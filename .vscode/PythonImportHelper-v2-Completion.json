[
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "convert_to_wav",
        "importPath": "bot_management.core.service",
        "description": "bot_management.core.service",
        "isExtraImport": true,
        "detail": "bot_management.core.service",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "bot_management.plattforms.telegram.bot_testbot.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "bot_management.plattforms.telegram.bot_testbot.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "bot_management.plattforms.telegram.api",
        "description": "bot_management.plattforms.telegram.api",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "bot_management.plattforms.telegram.api",
        "description": "bot_management.plattforms.telegram.api",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "send_message",
        "importPath": "bot_management.plattforms.telegram.api",
        "description": "bot_management.plattforms.telegram.api",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "get_webhook_info",
        "importPath": "bot_management.plattforms.telegram.api",
        "description": "bot_management.plattforms.telegram.api",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "set_webhook",
        "importPath": "bot_management.plattforms.telegram.api",
        "description": "bot_management.plattforms.telegram.api",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "django.http",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.http",
        "description": "django.http",
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotFound",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "StreamingHttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "StreamingHttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests.models",
        "description": "requests.models",
        "isExtraImport": true,
        "detail": "requests.models",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Voice",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "VoiceFile",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "PhotoMessage",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "TelegramPhoto",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Voice",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "VoiceFile",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Voice",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "VoiceFile",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "bot_management.models",
        "description": "bot_management.models",
        "isExtraImport": true,
        "detail": "bot_management.models",
        "documentation": {}
    },
    {
        "label": "get_bot_platform_by_token",
        "importPath": "bot_management.plattforms.telegram.utils",
        "description": "bot_management.plattforms.telegram.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_user_from_data",
        "importPath": "bot_management.plattforms.telegram.utils",
        "description": "bot_management.plattforms.telegram.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_and_update_message",
        "importPath": "bot_management.plattforms.telegram.utils",
        "description": "bot_management.plattforms.telegram.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_bot_info_from_id",
        "importPath": "bot_management.plattforms.telegram.utils",
        "description": "bot_management.plattforms.telegram.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_message_for_request",
        "importPath": "bot_management.plattforms.telegram.utils",
        "description": "bot_management.plattforms.telegram.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "InvalidMessageDataError",
        "importPath": "bot_management.plattforms.telegram.exceptions",
        "description": "bot_management.plattforms.telegram.exceptions",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.exceptions",
        "documentation": {}
    },
    {
        "label": "BotPlatformNotFoundError",
        "importPath": "bot_management.plattforms.telegram.exceptions",
        "description": "bot_management.plattforms.telegram.exceptions",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidMessageDataError",
        "importPath": "bot_management.plattforms.telegram.exceptions",
        "description": "bot_management.plattforms.telegram.exceptions",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.exceptions",
        "documentation": {}
    },
    {
        "label": "BotPlatformNotFoundError",
        "importPath": "bot_management.plattforms.telegram.exceptions",
        "description": "bot_management.plattforms.telegram.exceptions",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.exceptions",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "chord",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "transcribe_audio_file",
        "importPath": "bot_management.core.wisper",
        "description": "bot_management.core.wisper",
        "isExtraImport": true,
        "detail": "bot_management.core.wisper",
        "documentation": {}
    },
    {
        "label": "transcribe_audio_file",
        "importPath": "bot_management.core.wisper",
        "description": "bot_management.core.wisper",
        "isExtraImport": true,
        "detail": "bot_management.core.wisper",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "bot",
        "importPath": "bot_management.plattforms.telegram.bot",
        "description": "bot_management.plattforms.telegram.bot",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.bot",
        "documentation": {}
    },
    {
        "label": "get_message_for_request",
        "importPath": "bot_management.plattforms.whatsapp.utils",
        "description": "bot_management.plattforms.whatsapp.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "register_bot",
        "importPath": "bot_management.plattforms.whatsapp.utils",
        "description": "bot_management.plattforms.whatsapp.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "whatsapp_bots",
        "importPath": "bot_management.plattforms.whatsapp.utils",
        "description": "bot_management.plattforms.whatsapp.utils",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "rest_framework.response",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "bot",
        "importPath": "bot_management.plattforms.whatsapp.bot1.bot",
        "description": "bot_management.plattforms.whatsapp.bot1.bot",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.whatsapp.bot1.bot",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "django.db.models.options",
        "description": "django.db.models.options",
        "isExtraImport": true,
        "detail": "django.db.models.options",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "nadoo_erp.models",
        "description": "nadoo_erp.models",
        "isExtraImport": true,
        "detail": "nadoo_erp.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "BillingAdress",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "ShippingAdress",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "nadooit_crm.models",
        "description": "nadooit_crm.models",
        "isExtraImport": true,
        "detail": "nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "pre_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "telegram_webhook",
        "importPath": "bot_management.plattforms.telegram.views",
        "description": "bot_management.plattforms.telegram.views",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.telegram.views",
        "documentation": {}
    },
    {
        "label": "whatsapp_webhook",
        "importPath": "bot_management.plattforms.whatsapp.views",
        "description": "bot_management.plattforms.whatsapp.views",
        "isExtraImport": true,
        "detail": "bot_management.plattforms.whatsapp.views",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecutionManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "TimeAccountManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecutionManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "TimeAccountManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecutionManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "TimeAccountManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecutionManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "TimeAccountManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeManagerContract",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "importPath": "nadooit_hr.models",
        "description": "nadooit_hr.models",
        "isExtraImport": true,
        "detail": "nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "mfa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mfa",
        "description": "mfa",
        "detail": "mfa",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "djmoney.models.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "djmoney.models.fields",
        "description": "djmoney.models.fields",
        "detail": "djmoney.models.fields",
        "documentation": {}
    },
    {
        "label": "MoneyField",
        "importPath": "djmoney.models.fields",
        "description": "djmoney.models.fields",
        "isExtraImport": true,
        "detail": "djmoney.models.fields",
        "documentation": {}
    },
    {
        "label": "MoneyField",
        "importPath": "djmoney.models.fields",
        "description": "djmoney.models.fields",
        "isExtraImport": true,
        "detail": "djmoney.models.fields",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "ProgramShare",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "Program",
        "importPath": "nadooit_program_ownership_system.models",
        "description": "nadooit_program_ownership_system.models",
        "isExtraImport": true,
        "detail": "nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "baker",
        "importPath": "model_bakery",
        "description": "model_bakery",
        "isExtraImport": true,
        "detail": "model_bakery",
        "documentation": {}
    },
    {
        "label": "NadooitApiKey",
        "importPath": "nadooit_api_key.models",
        "description": "nadooit_api_key.models",
        "isExtraImport": true,
        "detail": "nadooit_api_key.models",
        "documentation": {}
    },
    {
        "label": "NadooitApiKey",
        "importPath": "nadooit_api_key.models",
        "description": "nadooit_api_key.models",
        "isExtraImport": true,
        "detail": "nadooit_api_key.models",
        "documentation": {}
    },
    {
        "label": "NadooitApiKey",
        "importPath": "nadooit_api_key.models",
        "description": "nadooit_api_key.models",
        "isExtraImport": true,
        "detail": "nadooit_api_key.models",
        "documentation": {}
    },
    {
        "label": "NadooitApiKey",
        "importPath": "nadooit_api_key.models",
        "description": "nadooit_api_key.models",
        "isExtraImport": true,
        "detail": "nadooit_api_key.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "nadooit_auth.models",
        "description": "nadooit_auth.models",
        "isExtraImport": true,
        "detail": "nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "Program",
        "importPath": "nadooit_program.models",
        "description": "nadooit_program.models",
        "isExtraImport": true,
        "detail": "nadooit_program.models",
        "documentation": {}
    },
    {
        "label": "Program",
        "importPath": "nadooit_program.models",
        "description": "nadooit_program.models",
        "isExtraImport": true,
        "detail": "nadooit_program.models",
        "documentation": {}
    },
    {
        "label": "Program",
        "importPath": "nadooit_program.models",
        "description": "nadooit_program.models",
        "isExtraImport": true,
        "detail": "nadooit_program.models",
        "documentation": {}
    },
    {
        "label": "Program",
        "importPath": "nadooit_program.models",
        "description": "nadooit_program.models",
        "isExtraImport": true,
        "detail": "nadooit_program.models",
        "documentation": {}
    },
    {
        "label": "TimeAccount",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "CustomerTimeAccount",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "TimeAccount",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "TimeAccount",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "CustomerTimeAccount",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "EmployeeTimeAccount",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "TimeAccount",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "WorkTimeAccountEntry",
        "importPath": "nadooit_time_account.models",
        "description": "nadooit_time_account.models",
        "isExtraImport": true,
        "detail": "nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "check_user",
        "importPath": "nadooit_api_executions_system.views",
        "description": "nadooit_api_executions_system.views",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.views",
        "documentation": {}
    },
    {
        "label": "create_execution",
        "importPath": "nadooit_api_executions_system.views",
        "description": "nadooit_api_executions_system.views",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.views",
        "documentation": {}
    },
    {
        "label": "check__customer_program__for__customer_program_id__exists",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__nadooit_api_key__has__is_active",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution__for__customer_program",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program__for__customer_program_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__hashed_api_key__for__request",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__nadooit_api_key__for__hashed_api_key",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__user_code__for__nadooit_api_key",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer__exists__for__customer_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program__for__customer_program_id__exists",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program_execution__exists__for__customer_program_execution_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__exists__for__employee_manager_and_customer__and__can_add_users__and__is_active",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__more_then_one_contract_between__user_code__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__user__exists__for__user_code",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__user__is__customer_program_manager__for__customer_prgram",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_manager_contract__for__employee_and_customer_and_list_of_abilities_and_employee_with_customer_program_manager_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_manager_contract__for__employee_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__employee_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__NadooitApiKey__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__time_account_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__active_TimeAccountManagerContracts__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__csv__for__list_of_customer_program_executions",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer__for__customer_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer__for__customer_program_execution_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program__for__customer_program_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_execution__for__customer_program_execution_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_executions__for__filter_type_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_manager_contract__for__employee_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee__for__user_code",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__employee_contract_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__user_code__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_manager_contract__for__user_code__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_abilities__for__list_of_selected_abilities_and_list_of_possible_abilities_the_employee_can_give",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_abilties__for__customer_program_manager_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_manager_contract__that_can_add_employees__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_manager_contract__that_can_give_the_role__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_program_execution_manager_contract_with_and_can_create_such_a_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_program_manager_contract_with_and_can_create_such_a_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_programm_manager_contract_with_and_the_customer_programms__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_manager_contracts__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__next_price_level__for__customer_program",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__not_paid_customer_program_executions__for__filter_type_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__payment_status__for__customer_program_execution",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__price_as_string_in_euro_format__for__price_in_euro_as_decimal",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__sum_of_price_for_execution__for__list_of_customer_program_exections",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__time_as_string_in_hour_format__for__time_in_seconds_as_integer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__user_info__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__all_active_NadooitApiKey__for__user_to_inactive",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__employee_contract__is_active_state__for__employee_contract_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__list_of_abilities__for__customer_program_manager_contract_according_to_list_of_abilities",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__payment_status__for__customer_program_execution",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set_employee_contract__as_inactive__for__employee_contract_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer__exists__for__customer_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program__for__customer_program_id__exists",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program_execution__exists__for__customer_program_execution_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__exists__for__employee_manager_and_customer__and__can_add_users__and__is_active",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__for__user__can_deactivate__employee_contracts",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__for__user__can_give_manager_role",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__more_then_one_contract_between__user_code__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__user__exists__for__user_code",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__user__is__customer_program_manager__for__customer_prgram",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_manager_contract__for__employee_and_customer_and_list_of_abilities_and_employee_with_customer_program_manager_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_manager_contract__for__employee_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__employee_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__NadooitApiKey__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__time_account_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__active_employee_contract__for__employee__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__csv__for__list_of_customer_program_executions",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer__for__customer_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer__for__customer_program_execution_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program__for__customer_program_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_execution__for__customer_program_execution_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_executions__for__filter_type_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_manager_contract__for__employee_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee__for__employee_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee__for__user_code",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__employee__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__employee_contract_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__user_code__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_manager_contract__for__user_code__and__customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_abilities__for__list_of_selected_abilities_and_list_of_possible_abilities_the_employee_can_give",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_abilties__for__customer_program_manager_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_program_execution_manager_contract__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_manager_contract__that_can_add_employees__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_manager_contract__that_can_give_the_role__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_program_execution_manager_contract_with_and_can_create_such_a_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_program_manager_contract_with_and_can_create_such_a_contract",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_programm_manager_contract_with_and_the_customer_programms__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_manager_contracts__for__employee",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__next_price_level__for__customer_program",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__not_paid_customer_program_executions__for__filter_type_and_customer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__price_as_string_in_euro_format__for__price_in_euro_as_decimal",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__sum_of_price_for_execution__for__list_of_customer_program_exections",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__time_as_string_in_hour_format__for__time_in_seconds_as_integer",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__user_info__for__user",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__all_active_NadooitApiKey__for__user_to_inactive",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__employee_contract__is_active_state__for__employee_contract_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__list_of_abilities__for__customer_program_manager_contract_according_to_list_of_abilities",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__payment_status__for__customer_program_execution",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set_employee_contract__as_inactive__for__employee_contract_id",
        "importPath": "nadooit_os.services",
        "description": "nadooit_os.services",
        "isExtraImport": true,
        "detail": "nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "nadooit_auth.user_code",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nadooit_auth.user_code",
        "description": "nadooit_auth.user_code",
        "detail": "nadooit_auth.user_code",
        "documentation": {}
    },
    {
        "label": "get__new_user_code",
        "importPath": "nadooit_auth.user_code",
        "description": "nadooit_auth.user_code",
        "isExtraImport": true,
        "detail": "nadooit_auth.user_code",
        "documentation": {}
    },
    {
        "label": "check__valid_user_code",
        "importPath": "nadooit_auth.user_code",
        "description": "nadooit_auth.user_code",
        "isExtraImport": true,
        "detail": "nadooit_auth.user_code",
        "documentation": {}
    },
    {
        "label": "BaseBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "nadooit_auth.views",
        "description": "nadooit_auth.views",
        "isExtraImport": true,
        "detail": "nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "nadooit_auth.views",
        "description": "nadooit_auth.views",
        "isExtraImport": true,
        "detail": "nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "register_user",
        "importPath": "nadooit_auth.views",
        "description": "nadooit_auth.views",
        "isExtraImport": true,
        "detail": "nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "isExtraImport": true,
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "get__new_username",
        "importPath": "nadooit_auth.username",
        "description": "nadooit_auth.username",
        "isExtraImport": true,
        "detail": "nadooit_auth.username",
        "documentation": {}
    },
    {
        "label": "default",
        "importPath": "email.policy",
        "description": "email.policy",
        "isExtraImport": true,
        "detail": "email.policy",
        "documentation": {}
    },
    {
        "label": "KeyManager",
        "importPath": "nadooit_key.models",
        "description": "nadooit_key.models",
        "isExtraImport": true,
        "detail": "nadooit_key.models",
        "documentation": {}
    },
    {
        "label": "label",
        "importPath": "cProfile",
        "description": "cProfile",
        "isExtraImport": true,
        "detail": "cProfile",
        "documentation": {}
    },
    {
        "label": "ModelChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "importPath": "nadoo_complaint_management.models",
        "description": "nadoo_complaint_management.models",
        "isExtraImport": true,
        "detail": "nadoo_complaint_management.models",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "get__employee_roles_and_rights__for__employee",
        "importPath": "nadooit_os.views",
        "description": "nadooit_os.views",
        "isExtraImport": true,
        "detail": "nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "nadooit_os.views",
        "description": "nadooit_os.views",
        "isExtraImport": true,
        "detail": "nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "require_GET",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "nadooit_website.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Plugin",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Plugin",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Session_Signal",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section_Order",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section_Order_Sections_Through_Model",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Video",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "VideoResolution",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Video",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "VideoResolution",
        "importPath": "nadooit_website.models",
        "description": "nadooit_website.models",
        "isExtraImport": true,
        "detail": "nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "check__session_id__is_valid",
        "importPath": "nadooit_website.services",
        "description": "nadooit_website.services",
        "isExtraImport": true,
        "detail": "nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "zip_directories_and_files",
        "importPath": "nadooit_website.services",
        "description": "nadooit_website.services",
        "isExtraImport": true,
        "detail": "nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "delete_video_files",
        "importPath": "nadooit_website.services",
        "description": "nadooit_website.services",
        "isExtraImport": true,
        "detail": "nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "zip_files",
        "importPath": "nadooit_website.services",
        "description": "nadooit_website.services",
        "isExtraImport": true,
        "detail": "nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "OrderedTabularInline",
        "importPath": "ordered_model.admin",
        "description": "ordered_model.admin",
        "isExtraImport": true,
        "detail": "ordered_model.admin",
        "documentation": {}
    },
    {
        "label": "OrderedInlineModelAdminMixin",
        "importPath": "ordered_model.admin",
        "description": "ordered_model.admin",
        "isExtraImport": true,
        "detail": "ordered_model.admin",
        "documentation": {}
    },
    {
        "label": "OrderedTabularInline",
        "importPath": "ordered_model.admin",
        "description": "ordered_model.admin",
        "isExtraImport": true,
        "detail": "ordered_model.admin",
        "documentation": {}
    },
    {
        "label": "OrderedInlineModelAdminMixin",
        "importPath": "ordered_model.admin",
        "description": "ordered_model.admin",
        "isExtraImport": true,
        "detail": "ordered_model.admin",
        "documentation": {}
    },
    {
        "label": "SimpleListFilter",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "SimpleListFilter",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "cleanup_video_files",
        "importPath": "nadooit_website.tasks.video",
        "description": "nadooit_website.tasks.video",
        "isExtraImport": true,
        "detail": "nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "create_streaming_files_task",
        "importPath": "nadooit_website.tasks",
        "description": "nadooit_website.tasks",
        "isExtraImport": true,
        "detail": "nadooit_website.tasks",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "chardet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chardet",
        "description": "chardet",
        "detail": "chardet",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "torch.nn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.nn",
        "description": "torch.nn",
        "detail": "torch.nn",
        "documentation": {}
    },
    {
        "label": "torch.optim",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch.optim",
        "description": "torch.optim",
        "detail": "torch.optim",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "VideoFileClip",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "ffmpeg_tools",
        "importPath": "moviepy.editor",
        "description": "moviepy.editor",
        "isExtraImport": true,
        "detail": "moviepy.editor",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "MaxRetriesExceededError",
        "importPath": "celery.exceptions",
        "description": "celery.exceptions",
        "isExtraImport": true,
        "detail": "celery.exceptions",
        "documentation": {}
    },
    {
        "label": "OrderedModel",
        "importPath": "ordered_model.models",
        "description": "ordered_model.models",
        "isExtraImport": true,
        "detail": "ordered_model.models",
        "documentation": {}
    },
    {
        "label": "default_storage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "FileSystemStorage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "deconstructible",
        "importPath": "django.utils.deconstruct",
        "description": "django.utils.deconstruct",
        "isExtraImport": true,
        "detail": "django.utils.deconstruct",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "InMemoryUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "pipes",
        "description": "pipes",
        "isExtraImport": true,
        "detail": "pipes",
        "documentation": {}
    },
    {
        "label": "analyze_and_visualize_session_data",
        "importPath": "nadooit_website.visulize",
        "description": "nadooit_website.visulize",
        "isExtraImport": true,
        "detail": "nadooit_website.visulize",
        "documentation": {}
    },
    {
        "label": "staff_member_required",
        "importPath": "django.contrib.admin.views.decorators",
        "description": "django.contrib.admin.views.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.admin.views.decorators",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Digraph",
        "importPath": "graphviz",
        "description": "graphviz",
        "isExtraImport": true,
        "detail": "graphviz",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "serialize",
        "importPath": "django.core.serializers",
        "description": "django.core.serializers",
        "isExtraImport": true,
        "detail": "django.core.serializers",
        "documentation": {}
    },
    {
        "label": "plotly.express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.express",
        "description": "plotly.express",
        "detail": "plotly.express",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "nadooit_workflow.models",
        "description": "nadooit_workflow.models",
        "isExtraImport": true,
        "detail": "nadooit_workflow.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "convert_to_wav",
        "kind": 2,
        "importPath": "app.bot_management.core.service",
        "description": "app.bot_management.core.service",
        "peekOfCode": "def convert_to_wav(input_filepath, output_filepath):\n    command = [\"ffmpeg\", \"-i\", input_filepath, output_filepath]\n    subprocess.run(command, check=True)",
        "detail": "app.bot_management.core.service",
        "documentation": {}
    },
    {
        "label": "transcribe_audio_file",
        "kind": 2,
        "importPath": "app.bot_management.core.wisper",
        "description": "app.bot_management.core.wisper",
        "peekOfCode": "def transcribe_audio_file(\n    file, supported_formats=[\"mp3\", \"mp4\", \"mpeg\", \"mpga\", \"m4a\", \"wav\", \"webm\"]\n):\n    # get file extension\n    extension = os.path.splitext(file.name)[1][1:]\n    file_path = None\n    delete_after_transcription = False\n    # Convert to wav if the file is oga and not directly supported by Whisper\n    if extension not in supported_formats:\n        if extension == \"oga\":",
        "detail": "app.bot_management.core.wisper",
        "documentation": {}
    },
    {
        "label": "openai.api_key",
        "kind": 5,
        "importPath": "app.bot_management.core.wisper",
        "description": "app.bot_management.core.wisper",
        "peekOfCode": "openai.api_key = os.getenv(\"OPENAI_API_KEY\")\ndef transcribe_audio_file(\n    file, supported_formats=[\"mp3\", \"mp4\", \"mpeg\", \"mpga\", \"m4a\", \"wav\", \"webm\"]\n):\n    # get file extension\n    extension = os.path.splitext(file.name)[1][1:]\n    file_path = None\n    delete_after_transcription = False\n    # Convert to wav if the file is oga and not directly supported by Whisper\n    if extension not in supported_formats:",
        "detail": "app.bot_management.core.wisper",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.bot_management.migrations.0001_initial",
        "description": "app.bot_management.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_crm', '0001_initial'),\n        ('nadoo_erp', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bot',\n            fields=[",
        "detail": "app.bot_management.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "command_name",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.base_bot.commands",
        "description": "app.bot_management.plattforms.telegram.base_bot.commands",
        "peekOfCode": "def command_name(message, token, *args, **kwargs):\nThe function must be decorated with the @register_command decorator.\nThe decorator takes the following arguments:\ncommand_message: The message that triggers the command. This can be a list of strings with \"/\" as the first character.\n\"\"\"\nfrom functools import wraps\nfrom bot_management.plattforms.telegram.bot_testbot.utils import *\nfrom bot_management.plattforms.telegram.api import *\ncommand_registry = {}\ndef register_command(*command_triggers, description=\"\"):",
        "detail": "app.bot_management.plattforms.telegram.base_bot.commands",
        "documentation": {}
    },
    {
        "label": "register_command",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.base_bot.commands",
        "description": "app.bot_management.plattforms.telegram.base_bot.commands",
        "peekOfCode": "def register_command(*command_triggers, description=\"\"):\n    def decorator(command_func):\n        @wraps(command_func)\n        def _wrapped_command(message, token, *args, **kwargs):\n            return command_func(message, token, *args, **kwargs)\n        for trigger in command_triggers:\n            command_registry[trigger] = (_wrapped_command, description)\n        return _wrapped_command\n    return decorator",
        "detail": "app.bot_management.plattforms.telegram.base_bot.commands",
        "documentation": {}
    },
    {
        "label": "command_registry",
        "kind": 5,
        "importPath": "app.bot_management.plattforms.telegram.base_bot.commands",
        "description": "app.bot_management.plattforms.telegram.base_bot.commands",
        "peekOfCode": "command_registry = {}\ndef register_command(*command_triggers, description=\"\"):\n    def decorator(command_func):\n        @wraps(command_func)\n        def _wrapped_command(message, token, *args, **kwargs):\n            return command_func(message, token, *args, **kwargs)\n        for trigger in command_triggers:\n            command_registry[trigger] = (_wrapped_command, description)\n        return _wrapped_command\n    return decorator",
        "detail": "app.bot_management.plattforms.telegram.base_bot.commands",
        "documentation": {}
    },
    {
        "label": "command_name",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "peekOfCode": "def command_name(message, token, *args, **kwargs):\nThe function must be decorated with the @register_command decorator.\nThe decorator takes the following arguments:\ncommand_message: The message that triggers the command. This can be a list of strings with \"/\" as the first character.\n\"\"\"\nfrom functools import wraps\nfrom bot_management.plattforms.telegram.bot_testbot.utils import *\nfrom bot_management.plattforms.telegram.api import *\n# TODO investigate how to cach the commands as they are loaded on every request to the webhook.\ncommand_registry = {}",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "documentation": {}
    },
    {
        "label": "register_command",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "peekOfCode": "def register_command(*command_triggers, description=\"\"):\n    def decorator(command_func):\n        @wraps(command_func)\n        def _wrapped_command(message, token, *args, **kwargs):\n            return command_func(message, token, *args, **kwargs)\n        for trigger in command_triggers:\n            command_registry[trigger] = (_wrapped_command, description)\n        return _wrapped_command\n    return decorator\n@register_command(",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "documentation": {}
    },
    {
        "label": "update_command",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "peekOfCode": "def update_command(message, token, *args, **kwargs):\n    send_message(\n        chat_id=message.chat.id,\n        text=(\n            \"<b>Neuen Artikel anlegen.</b> \"\n            \"Antworten Sie bitte <u>jeweils</u> auf die folgenden Fragen. \"\n            \"Nutzen Sie hierzu <code>Text</code> oder <em>Sprachnachrichten</em>.\"\n        ),\n        token=token,\n        parse_mode=\"HTML\",",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "documentation": {}
    },
    {
        "label": "create_command",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "peekOfCode": "def create_command(message, token, *args, **kwargs):\n    data_for_item = {\n        \"description\": \"Fahrradglocke, Fahrradklingel, Metall, mit Blumenmuster\",\n        \"price\": 0.83,\n        \"condition\": \"Restposten (Neuware)\",\n        \"quantity_available\": 14184,\n        \"minimum_quantity\": 1008,\n        \"location\": \"Rheinland\",\n        \"details\": \"\"\"   \n                - Artikel: Fahrradglocke ",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "documentation": {}
    },
    {
        "label": "command_registry",
        "kind": 5,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "peekOfCode": "command_registry = {}\ndef register_command(*command_triggers, description=\"\"):\n    def decorator(command_func):\n        @wraps(command_func)\n        def _wrapped_command(message, token, *args, **kwargs):\n            return command_func(message, token, *args, **kwargs)\n        for trigger in command_triggers:\n            command_registry[trigger] = (_wrapped_command, description)\n        return _wrapped_command\n    return decorator",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.commands",
        "documentation": {}
    },
    {
        "label": "create_text",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "def create_text(base_instruction, data=None, examples=None, extra_information=None):\n    \"\"\"\n    Create a text for the user to complete\n    :param base_instruction: The base instruction for the user\n    :param data: The data to clean\n    :param examples: Examples of correct results\n    :param extra_information: Extra information for the user\n    :return: The text for the user to complete\n    \"\"\"\n    extra_info_text = (",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "extract_details_from_text",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "def extract_details_from_text(text, extra_instructions=\"\"):\n    \"\"\"\n    Extracts the details from the text\n    :param text: The text to extract the details from\n    :return: The details\n    \"\"\"\n    instruction = f\"Extract the details from the text and return them in the following format as a json:\\n\\n {post_structure}, {extra_instructions}\"\n    promt = f\"{instruction}\\n\\n + {text}\"\n    import openai\n    response = openai.ChatCompletion.create(",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "change_text_with_instructions",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "def change_text_with_instructions(text, instructions):\n    import openai\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"Du bist ein Marketing Experte der bei ReUse and Sell arbeitet. In diesem Fall bekommst du einen Text mit Informationen für eine Anzeige, die in Telegram veröffentlich werden soll. Deine Aufgabe ist den Text so zu verändern, dass er den Anforderungen entspricht.\",\n            },\n            {",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "change_quantity_available",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "def change_quantity_available(text, quantity_available):\n    \"\"\"\n    Change the quantity available in the text\n    :param text: The text to change the quantity available\n    :return: The changed text\n    \"\"\"\n    base_instruction = f\"'Ändere nur die verfügbare Menge zu folgendem Wert: {quantity_available}. Gebe nur den so angepassten Post zurück. Gebe keine zusätzlichen Informationen oder Meldungen zurück.\"\n    instruction = create_text(\n        base_instruction=base_instruction,\n        extra_information=use_html_formatting,",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "get_advert_post_for_data",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "def get_advert_post_for_data(data: dict):\n    base_instruction = \"\"\"\n    Erstelle einen Telegram Post. \n    Regelen die immer eingehalten werden müssen für alle Posts:\n    Mache:\n    Der Post darf MAXIMAL 1024 Ziechen haben!,\n    Verwende keine Einleitungstext oder gebe sonsitgen Texte sondern halte dich weitgehend an eine auflistund der Produktdaten.\n    Halte dich so nahe wie möglich an die Beispiele und vermeide unnötige Wörter.\n    Halte dich an das Ende der anderen Post aus den Beispielen!\n    Der Post endet immer mit einem Link zu der Anzeige auf der Webseite. Zeige den Link vollständig an und nicht als href mit etwas wie Link.",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "post_structure",
        "kind": 5,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "post_structure = \"\"\"\n    post = {\n        \"title\": \"\",\t\n        \"price\": \"\",\t\t\n        \"condition\": \"\",\t\t\t\n        \"details\": {},\t\t\t\t\n        \"quantity_available\": \"\",\t\t\t\t\t\n        \"minimum_quantity\": \"\",\t\t\t\t\t\t\t\n        \"location\": \"\",\t\t\t\t\t\t\t\t\t\n        \"delivery_options\": \"\",\t\t\t\t\t\t\t\t\t",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "examples",
        "kind": 5,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "examples = \"\"\"\n    Panasonic FP-7113 Drucker\n                Preis: 60,- € pro Stück, inkl. MwSt.\n                Details: \n                Zählerstand: 232776 \n                Gerät war zuletzt bei einer Anwaltskanzlei in Benutzung. \n                Verfügbare Gesamtmenge: 1St. \n                Mindestabnahmemenge: 1St \n                Zustand: gebraucht \n                Standort: Paderborn ",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "use_html_formatting",
        "kind": 5,
        "importPath": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "description": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "peekOfCode": "use_html_formatting = \"\"\"\n        Der Post soll mit Telegrams HTML Formatierung erstellt werden. \n        Beachte die folgenden Inforamtionen dazu aus der Telegram Dokumentation. \n        Nutze kein HTML das nicht in der Dokumentation steht! \n        Nutze somit auf keinen Fall <br>! Ich wiederhole das nutzen des html <br> ist absolut verboten!\n        Verwende stattdessen \" \" um einen Zeilenumbruch zu erzeugen.\n        \\n\\n\n        HTML style:\n                To use this mode, pass HTML in the parse_mode field. The following tags are currently supported:\n                <b>bold</b>, <strong>bold</strong>",
        "detail": "app.bot_management.plattforms.telegram.bot_testbot.utils",
        "documentation": {}
    },
    {
        "label": "WebhookInfo",
        "kind": 6,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "class WebhookInfo:\n    url: str\n    has_custom_certificate: bool\n    pending_update_count: int\n    ip_address: Optional[str]\n    last_error_date: Optional[int]\n    last_error_message: Optional[str]\n    last_synchronization_error_date: Optional[int]\n    max_connections: Optional[int]\n    allowed_updates: Optional[List[str]]",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "get_webhook_info",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def get_webhook_info(bot_token: str) -> Optional[WebhookInfo]:\n    \"\"\"Gets the current webhook info.\n    Args:\n        bot_token (str): The token of the bot on the Telegram platform.\n    Returns:\n        WebhookInfo: The current webhook information if successful. Returns None otherwise.\n    \"\"\"\n    get_webhook_info_url = f\"https://api.telegram.org/bot{bot_token}/getWebhookInfo\"\n    try:\n        response: Response = requests.get(get_webhook_info_url)",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "set_webhook",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def set_webhook(\n    bot_token: str,\n    webhook_url: str,\n    certificate: Optional[str] = None,\n    ip_address: Optional[str] = None,\n    max_connections: Optional[int] = None,\n    allowed_updates: Optional[List[str]] = None,\n    drop_pending_updates: Optional[bool] = None,\n    secret_token: Optional[str] = None,\n) -> bool:",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def send_message(\n    token: str,\n    chat_id: int,\n    text: str,\n    message_thread_id: Optional[int] = None,\n    parse_mode: Optional[str] = None,\n    entities: Optional[str] = None,\n    disable_web_page_preview: Optional[bool] = None,\n    disable_notification: Optional[bool] = None,\n    protect_content: Optional[bool] = None,",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "get_file_info",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def get_file_info(token, file_id):\n    base_url = f\"https://api.telegram.org/bot{token}/getFile\"\n    # Construct the message payload\n    payload = {\n        \"file_id\": file_id,\n    }\n    # Remove None values from the payload\n    payload = {k: v for k, v in payload.items() if v is not None}\n    # Send the request\n    response = requests.post(base_url, json=payload)",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "get_file",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def get_file(token, file_path):\n    file_url = f\"https://api.telegram.org/file/bot{token}/{file_path}\"\n    response = requests.get(file_url)\n    # Ensure the request was successful\n    response.raise_for_status()\n    return response.content\n\"\"\" \neditMessageCaption\nUse this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.\nParameter\tType\tRequired\tDescription",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "edit_message_caption",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def edit_message_caption(\n    token: str,\n    message: Message,\n    caption: Optional[str] = None,\n    parse_mode: Optional[str] = None,\n    caption_entities: Optional[str] = None,\n    reply_markup: Optional[str] = None,\n) -> Union[HttpResponse, Message]:\n    base_url = f\"https://api.telegram.org/bot{token}/editMessageCaption\"\n    chat_id = message.chat.id",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "edit_message_text",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def edit_message_text(\n    token: str,\n    message: Message,\n    text: str,\n    parse_mode: Optional[str] = None,\n    entities: Optional[str] = None,\n    disable_web_page_preview: Optional[bool] = None,\n    reply_markup: Optional[str] = None,\n) -> Union[HttpResponse, Message]:\n    base_url = f\"https://api.telegram.org/bot{token}/editMessageText\"",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "edit_message_reply_markup",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def edit_message_reply_markup(\n    token: str,\n    chat_id: Optional[Union[int, str]] = None,\n    message_id: Optional[int] = None,\n    inline_message_id: Optional[str] = None,\n    reply_markup: Optional[str] = None,\n) -> Union[Message, bool]:\n    base_url = f\"https://api.telegram.org/bot{token}/editMessageReplyMarkup\"\n    # Construct the message payload\n    payload = {",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "send_photo",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.api",
        "description": "app.bot_management.plattforms.telegram.api",
        "peekOfCode": "def send_photo(\n    token: str,\n    chat_id: Union[int, str],\n    photo: Union[str, bytes],\n    caption: Optional[str] = None,\n    parse_mode: Optional[str] = None,\n    caption_entities: Optional[List[Dict[str, Union[str, int, bool]]]] = None,\n    has_spoiler: Optional[bool] = None,\n    disable_notification: Optional[bool] = None,\n    protect_content: Optional[bool] = None,",
        "detail": "app.bot_management.plattforms.telegram.api",
        "documentation": {}
    },
    {
        "label": "create_all_bots",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot",
        "description": "app.bot_management.plattforms.telegram.bot",
        "peekOfCode": "def create_all_bots(parent_package):\n    process_message_funcs = {}\n    for bot_folder in os.listdir(os.path.dirname(os.path.realpath(__file__))):\n        # Ensuring bot_folder is a directory and starts with 'bot_'\n        if bot_folder.startswith(\"bot_\") and os.path.isdir(\n            os.path.join(os.path.dirname(os.path.realpath(__file__)), bot_folder)\n        ):\n            bot_name = bot_folder[4:]  # removing 'bot_' prefix\n            try:\n                commands_module = importlib.import_module(",
        "detail": "app.bot_management.plattforms.telegram.bot",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot",
        "description": "app.bot_management.plattforms.telegram.bot",
        "peekOfCode": "def bot(request, bot_register_id, token=None, *args, **kwargs):\n    print(request)\n    try:\n        data = request.data\n        print(f\"Data in get_message_for_request: {data}\")\n        if \"message\" in data:\n            try:\n                message = get_message_for_request(request, token, *args, **kwargs)\n                if message is not None and not isinstance(message, HttpResponse):\n                    print(\"Message and not HttpResponse\")",
        "detail": "app.bot_management.plattforms.telegram.bot",
        "documentation": {}
    },
    {
        "label": "process_message",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.bot",
        "description": "app.bot_management.plattforms.telegram.bot",
        "peekOfCode": "def process_message(message_id, token: str, bot_name):\n    # Getting command_registry for bot_name\n    command_registry = all_bots[bot_name]\n    message = Message.objects.get(message_id=message_id)\n    # Check if message has text and if it's a command\n    if message.text is not None and message.text.startswith(\"/\"):\n        # Split the command and the arguments\n        command, args = (\n            message.text.split(\" \", 1) if \" \" in message.text else (message.text, \"\")\n        )",
        "detail": "app.bot_management.plattforms.telegram.bot",
        "documentation": {}
    },
    {
        "label": "all_bots",
        "kind": 5,
        "importPath": "app.bot_management.plattforms.telegram.bot",
        "description": "app.bot_management.plattforms.telegram.bot",
        "peekOfCode": "all_bots = create_all_bots(\"bot_management.plattforms.telegram\")\ndef bot(request, bot_register_id, token=None, *args, **kwargs):\n    print(request)\n    try:\n        data = request.data\n        print(f\"Data in get_message_for_request: {data}\")\n        if \"message\" in data:\n            try:\n                message = get_message_for_request(request, token, *args, **kwargs)\n                if message is not None and not isinstance(message, HttpResponse):",
        "detail": "app.bot_management.plattforms.telegram.bot",
        "documentation": {}
    },
    {
        "label": "BotPlatformNotFoundError",
        "kind": 6,
        "importPath": "app.bot_management.plattforms.telegram.exceptions",
        "description": "app.bot_management.plattforms.telegram.exceptions",
        "peekOfCode": "class BotPlatformNotFoundError(Exception):\n    pass\nclass InvalidMessageDataError(Exception):\n    pass",
        "detail": "app.bot_management.plattforms.telegram.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidMessageDataError",
        "kind": 6,
        "importPath": "app.bot_management.plattforms.telegram.exceptions",
        "description": "app.bot_management.plattforms.telegram.exceptions",
        "peekOfCode": "class InvalidMessageDataError(Exception):\n    pass",
        "detail": "app.bot_management.plattforms.telegram.exceptions",
        "documentation": {}
    },
    {
        "label": "get_bot_platform_by_token",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_bot_platform_by_token(token: str) -> Optional[BotPlatform]:\n    try:\n        bot_platform = BotPlatform.objects.get(access_token=token)\n        return bot_platform\n    except BotPlatform.DoesNotExist:\n        # Respond with an error or handle as needed\n        return None\ndef get_or_create_user_from_data(user_data: Dict) -> User:\n    user, _ = User.objects.get_or_create(\n        id=user_data[\"id\"],",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_user_from_data",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_or_create_user_from_data(user_data: Dict) -> User:\n    user, _ = User.objects.get_or_create(\n        id=user_data[\"id\"],\n        defaults={\n            \"is_bot\": user_data[\"is_bot\"],\n            \"first_name\": user_data[\"first_name\"],\n            \"last_name\": user_data.get(\"last_name\"),\n            \"language_code\": user_data.get(\"language_code\"),\n        },\n    )",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_and_update_message",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_or_create_and_update_message(\n    message_id: int,\n    date: datetime,\n    bot_platform: BotPlatform,\n    update_id: Optional[int] = None,  # Make update_id optional\n    **kwargs: Any,\n) -> Message:\n    \"\"\"\n    This function tries to get a message with the provided parameters from the database.\n    If the message does not exist, it creates a new one. If the message exists, it compares",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_message_for_request",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_message_for_request(request, token=None, *args, **kwargs):\n    from bot_management.plattforms.telegram.api import get_file\n    from bot_management.plattforms.telegram.api import get_file_info\n    data = request.data\n    # use an f string to print the data to the console\n    print(f\"Data in get_message_for_request: {data}\")\n    if \"message\" in data:\n        message_data = data[\"message\"]\n        # Get or create user from message\n        user_data = message_data[\"from\"]",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_user_from_data",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_or_create_user_from_data(user_data: dict) -> User:\n    user, _ = User.objects.get_or_create(\n        id=user_data[\"id\"],\n        defaults={\n            \"is_bot\": user_data[\"is_bot\"],\n            \"first_name\": user_data[\"first_name\"],\n            \"last_name\": user_data.get(\"last_name\"),\n            \"language_code\": user_data.get(\"language_code\"),\n        },\n    )",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_chat_from_data",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_or_create_chat_from_data(chat_data: dict) -> Chat:\n    if chat_data[\"type\"] == \"group\":\n        chat, _ = Chat.objects.get_or_create(\n            id=chat_data[\"id\"],\n            defaults={\n                \"title\": chat_data[\"title\"],\n                \"type\": chat_data[\"type\"],\n                \"all_members_are_administrators\": chat_data[\n                    \"all_members_are_administrators\"\n                ],",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "handle_voice_data",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def handle_voice_data(token: str, voice_info: dict) -> tuple:\n    from bot_management.plattforms.telegram.api import get_file, get_file_info\n    voice, _ = Voice.objects.get_or_create(\n        duration=voice_info[\"duration\"],\n        mime_type=voice_info[\"mime_type\"],\n        file_id=voice_info[\"file_id\"],\n        file_unique_id=voice_info[\"file_unique_id\"],\n        file_size=voice_info[\"file_size\"],\n    )\n    voice_file_info = get_file_info(token, voice_info[\"file_id\"])",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_message_for_request",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_message_for_request(request, token=None, *args, **kwargs):\n    data = request.data\n    if \"message\" not in data:\n        raise InvalidMessageDataError(\"Invalid data. No 'message' found.\")\n    message_data = data[\"message\"]\n    user = get_or_create_user_from_data(message_data[\"from\"])\n    chat = get_or_create_chat_from_data(message_data[\"chat\"])\n    # If 'date' is a timestamp (seconds since epoch), convert to datetime\n    if isinstance(message_data[\"date\"], (int, float)):\n        date = datetime.fromtimestamp(message_data[\"date\"])",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "get_bot_info_from_id",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.utils",
        "description": "app.bot_management.plattforms.telegram.utils",
        "peekOfCode": "def get_bot_info_from_id(bot_register_id):\n    bot_platform = BotPlatform.objects.get(bot_register_id=bot_register_id)\n    return bot_platform.bot.name, bot_platform.platform",
        "detail": "app.bot_management.plattforms.telegram.utils",
        "documentation": {}
    },
    {
        "label": "telegram_webhook",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.telegram.views",
        "description": "app.bot_management.plattforms.telegram.views",
        "peekOfCode": "def telegram_webhook(request, bot_register_id):\n    bot_platform = get_object_or_404(BotPlatform, bot_register_id=bot_register_id)\n    access_token = bot_platform.access_token\n    return bot(request, bot_register_id, token=access_token)",
        "detail": "app.bot_management.plattforms.telegram.views",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.whatsapp.bot1.bot",
        "description": "app.bot_management.plattforms.whatsapp.bot1.bot",
        "peekOfCode": "def bot(request, *args, token=None, **kwargs):\n    print(request)\n    print(\"AND HERE\")\n    # HTTPS 200 OK response required\n    # If get request, return challenge\n    if request.method == \"GET\":\n        return HttpResponse(request.GET.get(\"hub.challenge\"))\n    # If post request, handle message\n    elif request.method == \"POST\":\n        message = get_message_for_request(request)",
        "detail": "app.bot_management.plattforms.whatsapp.bot1.bot",
        "documentation": {}
    },
    {
        "label": "register_bot",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.whatsapp.utils",
        "description": "app.bot_management.plattforms.whatsapp.utils",
        "peekOfCode": "def register_bot(bot_register_id):\n    def decorator(view_func):\n        @wraps(view_func)\n        def _wrapped_view(request, *args, **kwargs):\n            token = BotPlatform.objects.get(\n                bot_register_id=bot_register_id\n            ).access_token\n            kwargs[\"token\"] = token\n            return view_func(request, *args, **kwargs)\n        whatsapp_bots[bot_register_id] = _wrapped_view",
        "detail": "app.bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "get_bot_platform_by_token",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.whatsapp.utils",
        "description": "app.bot_management.plattforms.whatsapp.utils",
        "peekOfCode": "def get_bot_platform_by_token(token: str) -> Optional[BotPlatform]:\n    try:\n        bot_platform = BotPlatform.objects.get(access_token=token)\n        return bot_platform\n    except BotPlatform.DoesNotExist:\n        # Respond with an error or handle as needed\n        return None\ndef get_or_create_user_from_data(user_data: Dict) -> User:\n    user, _ = User.objects.get_or_create(\n        id=user_data[\"id\"],",
        "detail": "app.bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_user_from_data",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.whatsapp.utils",
        "description": "app.bot_management.plattforms.whatsapp.utils",
        "peekOfCode": "def get_or_create_user_from_data(user_data: Dict) -> User:\n    user, _ = User.objects.get_or_create(\n        id=user_data[\"id\"],\n        defaults={\n            \"is_bot\": user_data[\"is_bot\"],\n            \"first_name\": user_data[\"first_name\"],\n            \"last_name\": user_data.get(\"last_name\"),\n            \"language_code\": user_data.get(\"language_code\"),\n        },\n    )",
        "detail": "app.bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_and_update_message",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.whatsapp.utils",
        "description": "app.bot_management.plattforms.whatsapp.utils",
        "peekOfCode": "def get_or_create_and_update_message(\n    message_id: int,\n    date: datetime,\n    bot_platform: BotPlatform,\n    update_id: Optional[int] = None,  # Make update_id optional\n    **kwargs: Any,\n) -> Message:\n    \"\"\"\n    This function tries to get a message with the provided parameters from the database.\n    If the message does not exist, it creates a new one. If the message exists, it compares",
        "detail": "app.bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "get_message_for_request",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.whatsapp.utils",
        "description": "app.bot_management.plattforms.whatsapp.utils",
        "peekOfCode": "def get_message_for_request(request, *args, token=None, **kwargs):\n    # get all the info that was send in the request\n    data = request.POST.dict()\n    # check if the data is empty\n    if not data:\n        # return None if the data is empty\n        pass\n    return None\n    # use an f string to print the data to the console\n    print(f\"Data in get_message_for_request: {data}\")",
        "detail": "app.bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "whatsapp_bots",
        "kind": 5,
        "importPath": "app.bot_management.plattforms.whatsapp.utils",
        "description": "app.bot_management.plattforms.whatsapp.utils",
        "peekOfCode": "whatsapp_bots = {}\ndef register_bot(bot_register_id):\n    def decorator(view_func):\n        @wraps(view_func)\n        def _wrapped_view(request, *args, **kwargs):\n            token = BotPlatform.objects.get(\n                bot_register_id=bot_register_id\n            ).access_token\n            kwargs[\"token\"] = token\n            return view_func(request, *args, **kwargs)",
        "detail": "app.bot_management.plattforms.whatsapp.utils",
        "documentation": {}
    },
    {
        "label": "whatsapp_webhook",
        "kind": 2,
        "importPath": "app.bot_management.plattforms.whatsapp.views",
        "description": "app.bot_management.plattforms.whatsapp.views",
        "peekOfCode": "def whatsapp_webhook(request, bot_register_id):\n    print(\"whatsapp_webhook\")\n    # bot/whatsapp/webhook/3cfa80bb-f3c1-49ff-bf1d-2f51f5f22138?hub.mode=subscribe&hub.challenge=1382766763&hub.verify_token=e1f234bd-dd69-4938-ae16-f9b27807e819\n    print(request)\n    print(bot_register_id)\n    print(whatsapp_bots)\n    if bot_register_id not in whatsapp_bots:\n        return JsonResponse({\"error\": \"Unknown bot\"}, status=404)\n    print(\"bot_routes_whatsapp[bot_register_id](request)\")\n    view_func = whatsapp_bots[bot_register_id]",
        "detail": "app.bot_management.plattforms.whatsapp.views",
        "documentation": {}
    },
    {
        "label": "APIKeyInline",
        "kind": 6,
        "importPath": "app.bot_management.admin",
        "description": "app.bot_management.admin",
        "peekOfCode": "class APIKeyInline(admin.TabularInline):\n    model = APIKey\n    readonly_fields = (\"display_api_key\",)\n    extra = 1\n    def display_api_key(self, obj):\n        return obj.api_key\n    display_api_key.short_description = \"API Key\"\nclass BotPlatformAdmin(admin.ModelAdmin):\n    inlines = [APIKeyInline]\n    list_display = (",
        "detail": "app.bot_management.admin",
        "documentation": {}
    },
    {
        "label": "BotPlatformAdmin",
        "kind": 6,
        "importPath": "app.bot_management.admin",
        "description": "app.bot_management.admin",
        "peekOfCode": "class BotPlatformAdmin(admin.ModelAdmin):\n    inlines = [APIKeyInline]\n    list_display = (\n        \"id\",\n        \"bot_name\",\n        \"customer_name\",\n        \"platform\",\n        \"webhook_status\",\n        \"bot_register_id\",\n    )",
        "detail": "app.bot_management.admin",
        "documentation": {}
    },
    {
        "label": "BotPlatformInline",
        "kind": 6,
        "importPath": "app.bot_management.admin",
        "description": "app.bot_management.admin",
        "peekOfCode": "class BotPlatformInline(admin.StackedInline):\n    model = BotPlatform\n    extra = 1\nclass BotAdmin(admin.ModelAdmin):\n    inlines = [BotPlatformInline]\n    list_display = (\"name\", \"customer\")\n    search_fields = [\"name\", \"customer__name\"]\nadmin.site.register(TelegramPhoto)\nadmin.site.register(PhotoMessage)\nadmin.site.register(User)",
        "detail": "app.bot_management.admin",
        "documentation": {}
    },
    {
        "label": "BotAdmin",
        "kind": 6,
        "importPath": "app.bot_management.admin",
        "description": "app.bot_management.admin",
        "peekOfCode": "class BotAdmin(admin.ModelAdmin):\n    inlines = [BotPlatformInline]\n    list_display = (\"name\", \"customer\")\n    search_fields = [\"name\", \"customer__name\"]\nadmin.site.register(TelegramPhoto)\nadmin.site.register(PhotoMessage)\nadmin.site.register(User)\nadmin.site.register(Chat)\nadmin.site.register(Voice)\nadmin.site.register(VoiceFile)",
        "detail": "app.bot_management.admin",
        "documentation": {}
    },
    {
        "label": "BotManagementConfig",
        "kind": 6,
        "importPath": "app.bot_management.apps",
        "description": "app.bot_management.apps",
        "peekOfCode": "class BotManagementConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"bot_management\"",
        "detail": "app.bot_management.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class User(models.Model):\n    id = models.BigIntegerField(primary_key=True)\n    is_bot = models.BooleanField()\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255, blank=True, null=True)\n    language_code = models.CharField(max_length=255, blank=True, null=True)\n    def __str__(self):\n        if self.last_name:\n            return self.first_name + \" \" + self.last_name\n        else:",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class Chat(models.Model):\n    id = models.BigIntegerField(primary_key=True)\n    first_name = models.CharField(max_length=255, blank=True, null=True)\n    last_name = models.CharField(max_length=255, blank=True, null=True)\n    type = models.CharField(max_length=255)\n    title = models.CharField(max_length=255, blank=True, null=True)\n    all_members_are_administrators = models.BooleanField(default=False)\nclass Bot(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "Bot",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class Bot(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\nclass BotPlatform(models.Model):\n    bot = models.ForeignKey(Bot, on_delete=models.CASCADE)\n    platform = models.CharField(max_length=50, choices=PLATFORM_CHOICES)\n    bot_register_id = models.UUIDField(default=uuid4, unique=True, editable=False)\n    access_token = models.CharField(max_length=100)\n    secret_token = models.UUIDField(default=uuid4, unique=True, editable=False)\n    phone_number = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "BotPlatform",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class BotPlatform(models.Model):\n    bot = models.ForeignKey(Bot, on_delete=models.CASCADE)\n    platform = models.CharField(max_length=50, choices=PLATFORM_CHOICES)\n    bot_register_id = models.UUIDField(default=uuid4, unique=True, editable=False)\n    access_token = models.CharField(max_length=100)\n    secret_token = models.UUIDField(default=uuid4, unique=True, editable=False)\n    phone_number = models.CharField(max_length=100, blank=True, null=True)\n    def __str__(self):\n        return self.bot.name + \" - \" + self.platform\nclass APIKey(models.Model):",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "APIKey",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class APIKey(models.Model):\n    bot_platform = models.ForeignKey(BotPlatform, on_delete=models.CASCADE)\n    api_key = models.UUIDField(default=uuid4, unique=True, editable=False)\n    name = models.CharField(max_length=100)\n    def __str__(self):\n        return self.name + \" - \" + str(self.api_key)\nclass Voice(models.Model):\n    duration = models.IntegerField()\n    mime_type = models.CharField(max_length=100)\n    file_id = models.CharField(max_length=100)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "Voice",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class Voice(models.Model):\n    duration = models.IntegerField()\n    mime_type = models.CharField(max_length=100)\n    file_id = models.CharField(max_length=100)\n    file_unique_id = models.CharField(max_length=100)\n    file_size = models.IntegerField()\n    def __str__(self):\n        return f\"Voice Message {self.file_id}\"\nclass VoiceFile(models.Model):\n    voice = models.OneToOneField(Voice, on_delete=models.CASCADE)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "VoiceFile",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class VoiceFile(models.Model):\n    voice = models.OneToOneField(Voice, on_delete=models.CASCADE)\n    file = models.FileField(upload_to=\"voice_files/\")\n    def __str__(self):\n        return f\"Voice File {self.voice.file_id}\"\n# This method will be called before a VoiceFile instance is deleted\n@receiver(pre_delete, sender=VoiceFile)\ndef delete_file_pre_delete(sender, instance, **kwargs):\n    instance.file.delete(False)\nclass Message(models.Model):",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class Message(models.Model):\n    update_id = models.BigIntegerField(unique=True, blank=True, null=True)\n    message_id = models.BigIntegerField()\n    from_user = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name=\"messages\", blank=True, null=True\n    )\n    chat = models.ForeignKey(\n        Chat, on_delete=models.CASCADE, related_name=\"messages\", blank=True, null=True\n    )\n    text = models.TextField(blank=True, null=True)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "PhotoMessage",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class PhotoMessage(models.Model):\n    message = models.ForeignKey(Message, on_delete=models.CASCADE)\n    caption = models.TextField(blank=True, null=True)\n    class Meta:\n        ordering = [\"-message__date\"]\n    def __str__(self):\n        return f\"Photo Message {self.message.message_id} on {self.message.bot_platform.platform}\"\nclass TelegramPhoto(models.Model):\n    photo_message = models.ForeignKey(PhotoMessage, on_delete=models.CASCADE)\n    file_id = models.CharField(max_length=100, null=True)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "TelegramPhoto",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class TelegramPhoto(models.Model):\n    photo_message = models.ForeignKey(PhotoMessage, on_delete=models.CASCADE)\n    file_id = models.CharField(max_length=100, null=True)\n    file_unique_id = models.CharField(max_length=100, null=True)\n    file_size = models.IntegerField(null=True)\n    width = models.IntegerField(null=True)\n    height = models.IntegerField(null=True)\nclass Advertisement(models.Model):\n    item = models.ForeignKey(Item, on_delete=models.CASCADE)\n    messages = models.ManyToManyField(Message)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "Advertisement",
        "kind": 6,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "class Advertisement(models.Model):\n    item = models.ForeignKey(Item, on_delete=models.CASCADE)\n    messages = models.ManyToManyField(Message)\n    def __str__(self):\n        return f\"Advertisement {self.pk}\"",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "delete_file_pre_delete",
        "kind": 2,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "def delete_file_pre_delete(sender, instance, **kwargs):\n    instance.file.delete(False)\nclass Message(models.Model):\n    update_id = models.BigIntegerField(unique=True, blank=True, null=True)\n    message_id = models.BigIntegerField()\n    from_user = models.ForeignKey(\n        User, on_delete=models.CASCADE, related_name=\"messages\", blank=True, null=True\n    )\n    chat = models.ForeignKey(\n        Chat, on_delete=models.CASCADE, related_name=\"messages\", blank=True, null=True",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "PLATFORM_CHOICES",
        "kind": 5,
        "importPath": "app.bot_management.models",
        "description": "app.bot_management.models",
        "peekOfCode": "PLATFORM_CHOICES = [\n    (\"telegram\", \"Telegram\"),\n    (\"facebook\", \"Facebook Messenger\"),\n    (\"whatsapp\", \"WhatsApp\"),\n    # add more platforms as needed\n]\nclass User(models.Model):\n    id = models.BigIntegerField(primary_key=True)\n    is_bot = models.BooleanField()\n    first_name = models.CharField(max_length=255)",
        "detail": "app.bot_management.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "app.bot_management.urls",
        "description": "app.bot_management.urls",
        "peekOfCode": "app_name = \"bot_management\"\nurlpatterns = [\n    # telegram\n    path(\n        \"telegram/webhook/<str:bot_register_id>\",\n        telegram_webhook,\n        name=\"telegram-webhook\",\n    ),\n    path(\n        \"whatsapp/webhook/<str:bot_register_id>\",",
        "detail": "app.bot_management.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.bot_management.urls",
        "description": "app.bot_management.urls",
        "peekOfCode": "urlpatterns = [\n    # telegram\n    path(\n        \"telegram/webhook/<str:bot_register_id>\",\n        telegram_webhook,\n        name=\"telegram-webhook\",\n    ),\n    path(\n        \"whatsapp/webhook/<str:bot_register_id>\",\n        whatsapp_webhook,",
        "detail": "app.bot_management.urls",
        "documentation": {}
    },
    {
        "label": "is_url_active",
        "kind": 2,
        "importPath": "app.django_is_url_active_templatetag.templatetags.is_url_active_templatetag",
        "description": "app.django_is_url_active_templatetag.templatetags.is_url_active_templatetag",
        "peekOfCode": "def is_url_active(request: HttpRequest, url: str) -> str:\n    # Main idea is to check if the url and the current path is a match\n    if reverse(url) == request.path:\n        return \"active-link\"\n    # print(\"url: \", url)\n    # print(\"request.path: \", request.path)\n    if request.path in reverse(url) and len(request.path) > 1:\n        return \"active-link\"\n    return \"\"",
        "detail": "app.django_is_url_active_templatetag.templatetags.is_url_active_templatetag",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "app.django_is_url_active_templatetag.templatetags.is_url_active_templatetag",
        "description": "app.django_is_url_active_templatetag.templatetags.is_url_active_templatetag",
        "peekOfCode": "register = template.Library()\n@register.simple_tag\ndef is_url_active(request: HttpRequest, url: str) -> str:\n    # Main idea is to check if the url and the current path is a match\n    if reverse(url) == request.path:\n        return \"active-link\"\n    # print(\"url: \", url)\n    # print(\"request.path: \", request.path)\n    if request.path in reverse(url) and len(request.path) > 1:\n        return \"active-link\"",
        "detail": "app.django_is_url_active_templatetag.templatetags.is_url_active_templatetag",
        "documentation": {}
    },
    {
        "label": "DjangoIsUrlActiveTemplatetagConfig",
        "kind": 6,
        "importPath": "app.django_is_url_active_templatetag.apps",
        "description": "app.django_is_url_active_templatetag.apps",
        "peekOfCode": "class DjangoIsUrlActiveTemplatetagConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"django_is_url_active_templatetag\"",
        "detail": "app.django_is_url_active_templatetag.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadoo_complaint_management.migrations.0001_initial",
        "description": "app.nadoo_complaint_management.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Complaint',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('complaint', models.TextField()),",
        "detail": "app.nadoo_complaint_management.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadoo_complaint_management.migrations.0002_initial",
        "description": "app.nadoo_complaint_management.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_api_executions_system', '0001_initial'),\n        ('nadoo_complaint_management', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='complaint',\n            name='customer_program_execution',",
        "detail": "app.nadoo_complaint_management.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadoo_complaint_management.migrations.0003_initial",
        "description": "app.nadoo_complaint_management.migrations.0003_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_hr', '0001_initial'),\n        ('nadoo_complaint_management', '0002_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='complaint',\n            name='customer_program_execution_manager',",
        "detail": "app.nadoo_complaint_management.migrations.0003_initial",
        "documentation": {}
    },
    {
        "label": "NadooComplaintManagementConfig",
        "kind": 6,
        "importPath": "app.nadoo_complaint_management.apps",
        "description": "app.nadoo_complaint_management.apps",
        "peekOfCode": "class NadooComplaintManagementConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadoo_complaint_management\"",
        "detail": "app.nadoo_complaint_management.apps",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "kind": 6,
        "importPath": "app.nadoo_complaint_management.models",
        "description": "app.nadoo_complaint_management.models",
        "peekOfCode": "class Complaint(models.Model):\n    # This model is used to store diffent possivle states of a complaint that can be made by a customer\n    class ComplaintStatus(models.TextChoices):\n        OPEN = \"OPEN\", _(\"Open\")\n        IN_PROGRESS = \"IN_PROGRESS\", _(\"In Progress\")\n        CLOSED = \"CLOSED\", _(\"Closed\")\n        REJECTED = \"REJECTED\", _(\"Rejected\")\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # the customer program execution that is complained about\n    customer_program_execution = models.ForeignKey(",
        "detail": "app.nadoo_complaint_management.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadoo_erp.migrations.0001_initial",
        "description": "app.nadoo_erp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_crm', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Item',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.nadoo_erp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooErpConfig",
        "kind": 6,
        "importPath": "app.nadoo_erp.apps",
        "description": "app.nadoo_erp.apps",
        "peekOfCode": "class NadooErpConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadoo_erp\"",
        "detail": "app.nadoo_erp.apps",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "app.nadoo_erp.models",
        "description": "app.nadoo_erp.models",
        "peekOfCode": "class Item(models.Model):\n    description = models.TextField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    condition = models.CharField(max_length=100)\n    quantity_available = models.BigIntegerField()\n    minimum_quantity = models.BigIntegerField()\n    location = models.CharField(max_length=100)\n    delivery_options = models.TextField()\n    link = models.URLField()\n    img_link = models.URLField()",
        "detail": "app.nadoo_erp.models",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "app.nadooit.__init__-CPU1",
        "description": "app.nadooit.__init__-CPU1",
        "peekOfCode": "__all__ = (\"celery_app\",)",
        "detail": "app.nadooit.__init__-CPU1",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.nadooit.asgi",
        "description": "app.nadooit.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "app.nadooit.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.nadooit.celery",
        "description": "app.nadooit.celery",
        "peekOfCode": "app = Celery(\"nadooit\")\napp.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\napp.autodiscover_tasks()\napp.conf.broker_url = os.environ[\"CELERY_BROKER_URL\"]\napp.conf.result_backend = os.environ[\"CELERY_BROKER_URL\"]",
        "detail": "app.nadooit.celery",
        "documentation": {}
    },
    {
        "label": "app.conf.broker_url",
        "kind": 5,
        "importPath": "app.nadooit.celery",
        "description": "app.nadooit.celery",
        "peekOfCode": "app.conf.broker_url = os.environ[\"CELERY_BROKER_URL\"]\napp.conf.result_backend = os.environ[\"CELERY_BROKER_URL\"]",
        "detail": "app.nadooit.celery",
        "documentation": {}
    },
    {
        "label": "app.conf.result_backend",
        "kind": 5,
        "importPath": "app.nadooit.celery",
        "description": "app.nadooit.celery",
        "peekOfCode": "app.conf.result_backend = os.environ[\"CELERY_BROKER_URL\"]",
        "detail": "app.nadooit.celery",
        "documentation": {}
    },
    {
        "label": "env_path",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "env_path = Path(__file__).resolve().parent.parent.parent / \".env\"\n# Load the .env file into the environment. This is done before the settings are loaded.\n# This is done to make sure that the environment variables are available when the settings are loaded.\n# Was required to make the environment variables available in the test_services.py file.\nload_dotenv(dotenv_path=env_path)\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\"DJANGO_SECRET_KEY\", \"changeme\")\n# SECURITY WARNING: don't run with debug turned on in production!\n# DEBUG = True\nDEBUG = bool(int(os.environ.get(\"DJANGO_DEBUG\", 0)))\n# The list of allowed hosts is set in the environment variable DJANGO_ALLOWED_HOSTS\n# The value is a comma separated list of hosts",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"DJANGO_SECRET_KEY\", \"changeme\")\n# SECURITY WARNING: don't run with debug turned on in production!\n# DEBUG = True\nDEBUG = bool(int(os.environ.get(\"DJANGO_DEBUG\", 0)))\n# The list of allowed hosts is set in the environment variable DJANGO_ALLOWED_HOSTS\n# The value is a comma separated list of hosts\n# Example: DJANGO_ALLOWED_HOSTS= \"localhost, nadooit.de,\nALLOWED_HOSTS = os.environ.get(\"DJANGO_ALLOWED_HOSTS\", \"\").split(\",\")\nif DEBUG:\n    ALLOWED_HOSTS += [",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "DEBUG = bool(int(os.environ.get(\"DJANGO_DEBUG\", 0)))\n# The list of allowed hosts is set in the environment variable DJANGO_ALLOWED_HOSTS\n# The value is a comma separated list of hosts\n# Example: DJANGO_ALLOWED_HOSTS= \"localhost, nadooit.de,\nALLOWED_HOSTS = os.environ.get(\"DJANGO_ALLOWED_HOSTS\", \"\").split(\",\")\nif DEBUG:\n    ALLOWED_HOSTS += [\n        \"5634-2a02-908-815-9ce0-00-9f10.ngrok-free.app\",\n        \"localhost\",\n        \"127.0.0.1\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.environ.get(\"DJANGO_ALLOWED_HOSTS\", \"\").split(\",\")\nif DEBUG:\n    ALLOWED_HOSTS += [\n        \"5634-2a02-908-815-9ce0-00-9f10.ngrok-free.app\",\n        \"localhost\",\n        \"127.0.0.1\",\n        \"0.0.0.0\",\n    ]\n# Application definition\n# This is the list of installed apps. If a new app is added, it must be added here.",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"sslserver\",\n    \"ordered_model\",\n    \"django_is_url_active_templatetag\",\n    \"grappelli\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"django_htmx.middleware.HtmxMiddleware\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"nadooit_auth.custom_user_code_auth_backend.UserCodeBackend\",\n]\n# Configure how templates are loaded.\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "STATICFILES_DIRS = [(os.path.join(BASE_DIR, \"static\")), \"/var/www/static/\"]\nSTATIC_URL = \"/static/static/\"\nMEDIA_URL = \"/static/media/\"\nSTATIC_ROOT = \"/vol/web/static/\"\nMEDIA_ROOT = \"/vol/web/media/\"\nROOT_URLCONF = \"nadooit.urls\"\n# The WSGI application is used to serve the application.\n# The WSGI application is called by the webserver.\n# This is the entry point for the application.\nWSGI_APPLICATION = \"nadooit.wsgi.application\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "STATIC_URL = \"/static/static/\"\nMEDIA_URL = \"/static/media/\"\nSTATIC_ROOT = \"/vol/web/static/\"\nMEDIA_ROOT = \"/vol/web/media/\"\nROOT_URLCONF = \"nadooit.urls\"\n# The WSGI application is used to serve the application.\n# The WSGI application is called by the webserver.\n# This is the entry point for the application.\nWSGI_APPLICATION = \"nadooit.wsgi.application\"\n# Database",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MEDIA_URL = \"/static/media/\"\nSTATIC_ROOT = \"/vol/web/static/\"\nMEDIA_ROOT = \"/vol/web/media/\"\nROOT_URLCONF = \"nadooit.urls\"\n# The WSGI application is used to serve the application.\n# The WSGI application is called by the webserver.\n# This is the entry point for the application.\nWSGI_APPLICATION = \"nadooit.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "STATIC_ROOT = \"/vol/web/static/\"\nMEDIA_ROOT = \"/vol/web/media/\"\nROOT_URLCONF = \"nadooit.urls\"\n# The WSGI application is used to serve the application.\n# The WSGI application is called by the webserver.\n# This is the entry point for the application.\nWSGI_APPLICATION = \"nadooit.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\"\"\" CockroachDB settings",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MEDIA_ROOT = \"/vol/web/media/\"\nROOT_URLCONF = \"nadooit.urls\"\n# The WSGI application is used to serve the application.\n# The WSGI application is called by the webserver.\n# This is the entry point for the application.\nWSGI_APPLICATION = \"nadooit.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\"\"\" CockroachDB settings\nDATABASES = {",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "ROOT_URLCONF = \"nadooit.urls\"\n# The WSGI application is used to serve the application.\n# The WSGI application is called by the webserver.\n# This is the entry point for the application.\nWSGI_APPLICATION = \"nadooit.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\"\"\" CockroachDB settings\nDATABASES = {\n    \"default\": {",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "WSGI_APPLICATION = \"nadooit.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\"\"\" CockroachDB settings\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django_cockroachdb\",\n        \"NAME\": os.getenv(\"COCKROACH_DB_NAME\"),\n        \"USER\": os.getenv(\"COCKROACH_DB_USER\"),\n        \"PASSWORD\": os.getenv(\"COCKROACH_DB_PASSWORD\"),",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django_cockroachdb\",\n        \"NAME\": os.getenv(\"COCKROACH_DB_NAME\"),\n        \"USER\": os.getenv(\"COCKROACH_DB_USER\"),\n        \"PASSWORD\": os.getenv(\"COCKROACH_DB_PASSWORD\"),\n        \"HOST\": os.getenv(\"COCKROACH_DB_HOST\"),\n        \"PORT\": os.getenv(\"COCKROACH_DB_PORT\"),\n        \"OPTIONS\": {\n            \"sslmode\": \"verify-full\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.getenv('MYSQL_DATABASE', 'your_mysql_database'),  # Default used if env var is not set\n        'USER': os.getenv('MYSQL_USER', 'your_mysql_user'),  # Default used if env var is not set\n        'PASSWORD': os.getenv('MYSQL_PASSWORD', 'your_database_password'),  # Update this default as necessary\n        'HOST': os.getenv('MYSQL_DB_HOST', 'db'),  # No change needed\n        'PORT': os.getenv('MYSQL_DB_PORT', '3306'),  # No change needed\n    }\n}",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"nadooit_auth.User\"\n# Password validation\nCSRF_TRUSTED_ORIGINS = os.environ.get(\"DJANGO_CSRF_TRUSTED_ORIGINS\", \"\").split(\",\")\nprint(\"DEBUG-Modus ist:\", DEBUG)\nprint(\"CSRF_TRUSTED_ORIGINS gesetzt auf:\", CSRF_TRUSTED_ORIGINS)\nprint(\"ALLOWED_HOSTS gesetzt auf:\", ALLOWED_HOSTS)\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = os.environ.get(\"DJANGO_CSRF_TRUSTED_ORIGINS\", \"\").split(\",\")\nprint(\"DEBUG-Modus ist:\", DEBUG)\nprint(\"CSRF_TRUSTED_ORIGINS gesetzt auf:\", CSRF_TRUSTED_ORIGINS)\nprint(\"ALLOWED_HOSTS gesetzt auf:\", ALLOWED_HOSTS)\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Default primary key field type",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Settings for additional apps",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Settings for additional apps\n# Settings for Django Crispy Forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Settings for additional apps\n# Settings for Django Crispy Forms\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# PWA settings\nPWA_SERVICE_WORKER_PATH = os.path.join(\n    BASE_DIR, \"static\", \"static\", \"js\", \"nadooit_serviceworker.js\"\n)\nPWA_APP_NAME = \"NADOOIT\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# PWA settings\nPWA_SERVICE_WORKER_PATH = os.path.join(\n    BASE_DIR, \"static\", \"static\", \"js\", \"nadooit_serviceworker.js\"\n)\nPWA_APP_NAME = \"NADOOIT\"\nPWA_APP_DESCRIPTION = \"NADOOIT PWA\"\nPWA_APP_THEME_COLOR = \"#000000\"\nPWA_APP_BACKGROUND_COLOR = \"#ffffff\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# PWA settings\nPWA_SERVICE_WORKER_PATH = os.path.join(\n    BASE_DIR, \"static\", \"static\", \"js\", \"nadooit_serviceworker.js\"\n)\nPWA_APP_NAME = \"NADOOIT\"\nPWA_APP_DESCRIPTION = \"NADOOIT PWA\"\nPWA_APP_THEME_COLOR = \"#000000\"\nPWA_APP_BACKGROUND_COLOR = \"#ffffff\"\nPWA_APP_DISPLAY = \"standalone\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_SERVICE_WORKER_PATH",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_SERVICE_WORKER_PATH = os.path.join(\n    BASE_DIR, \"static\", \"static\", \"js\", \"nadooit_serviceworker.js\"\n)\nPWA_APP_NAME = \"NADOOIT\"\nPWA_APP_DESCRIPTION = \"NADOOIT PWA\"\nPWA_APP_THEME_COLOR = \"#000000\"\nPWA_APP_BACKGROUND_COLOR = \"#ffffff\"\nPWA_APP_DISPLAY = \"standalone\"\nPWA_APP_SCOPE = \"/\"\nPWA_APP_ORIENTATION = \"any\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_NAME",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_NAME = \"NADOOIT\"\nPWA_APP_DESCRIPTION = \"NADOOIT PWA\"\nPWA_APP_THEME_COLOR = \"#000000\"\nPWA_APP_BACKGROUND_COLOR = \"#ffffff\"\nPWA_APP_DISPLAY = \"standalone\"\nPWA_APP_SCOPE = \"/\"\nPWA_APP_ORIENTATION = \"any\"\nPWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_DESCRIPTION",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_DESCRIPTION = \"NADOOIT PWA\"\nPWA_APP_THEME_COLOR = \"#000000\"\nPWA_APP_BACKGROUND_COLOR = \"#ffffff\"\nPWA_APP_DISPLAY = \"standalone\"\nPWA_APP_SCOPE = \"/\"\nPWA_APP_ORIENTATION = \"any\"\nPWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_THEME_COLOR",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_THEME_COLOR = \"#000000\"\nPWA_APP_BACKGROUND_COLOR = \"#ffffff\"\nPWA_APP_DISPLAY = \"standalone\"\nPWA_APP_SCOPE = \"/\"\nPWA_APP_ORIENTATION = \"any\"\nPWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_BACKGROUND_COLOR",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_BACKGROUND_COLOR = \"#ffffff\"\nPWA_APP_DISPLAY = \"standalone\"\nPWA_APP_SCOPE = \"/\"\nPWA_APP_ORIENTATION = \"any\"\nPWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_ICONS_APPLE = [",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_DISPLAY",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_DISPLAY = \"standalone\"\nPWA_APP_SCOPE = \"/\"\nPWA_APP_ORIENTATION = \"any\"\nPWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_ICONS_APPLE = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_SCOPE",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_SCOPE = \"/\"\nPWA_APP_ORIENTATION = \"any\"\nPWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_ICONS_APPLE = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_ORIENTATION",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_ORIENTATION = \"any\"\nPWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_ICONS_APPLE = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_SPLASH_SCREEN = [",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_START_URL",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_START_URL = \"/nadooit-os\"\nPWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_ICONS_APPLE = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_SPLASH_SCREEN = [\n    {",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_STATUS_BAR_COLOR",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_STATUS_BAR_COLOR = \"default\"\nPWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_ICONS_APPLE = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_SPLASH_SCREEN = [\n    {\n        \"src\": \"/static/static/splashscreen/nadooit.png\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_ICONS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_ICONS = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_ICONS_APPLE = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_SPLASH_SCREEN = [\n    {\n        \"src\": \"/static/static/splashscreen/nadooit.png\",\n        \"media\": \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_ICONS_APPLE",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_ICONS_APPLE = [\n    {\"src\": \"/static/static/static/appicon/maskable_icon_x192.png\", \"sizes\": \"192x192\"}\n]\nPWA_APP_SPLASH_SCREEN = [\n    {\n        \"src\": \"/static/static/splashscreen/nadooit.png\",\n        \"media\": \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)\",\n    }\n]\nPWA_APP_DIR = \"ltr\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_SPLASH_SCREEN",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_SPLASH_SCREEN = [\n    {\n        \"src\": \"/static/static/splashscreen/nadooit.png\",\n        \"media\": \"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)\",\n    }\n]\nPWA_APP_DIR = \"ltr\"\nPWA_APP_LANG = \"de-DE\"\n# MFA settings\nMFA_UNALLOWED_METHODS = (",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_DIR",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_DIR = \"ltr\"\nPWA_APP_LANG = \"de-DE\"\n# MFA settings\nMFA_UNALLOWED_METHODS = (\n    \"TOTP\",\n    \"Email\",\n    \"U2F\",\n    \"Trusted_Devices\",\n    \"RECOVERY\",\n)  # Methods that shouldn't be allowed for the user",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "PWA_APP_LANG",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "PWA_APP_LANG = \"de-DE\"\n# MFA settings\nMFA_UNALLOWED_METHODS = (\n    \"TOTP\",\n    \"Email\",\n    \"U2F\",\n    \"Trusted_Devices\",\n    \"RECOVERY\",\n)  # Methods that shouldn't be allowed for the user\nMFA_LOGIN_CALLBACK = \"nadooit_auth.views.log_user_in\"  # A function that should be called by username to login the user in session",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_UNALLOWED_METHODS",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_UNALLOWED_METHODS = (\n    \"TOTP\",\n    \"Email\",\n    \"U2F\",\n    \"Trusted_Devices\",\n    \"RECOVERY\",\n)  # Methods that shouldn't be allowed for the user\nMFA_LOGIN_CALLBACK = \"nadooit_auth.views.log_user_in\"  # A function that should be called by username to login the user in session\nMFA_RECHECK = True  # Allow random rechecking of the user\nMFA_RECHECK_MIN = 10  # Minimum interval in seconds",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_LOGIN_CALLBACK",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_LOGIN_CALLBACK = \"nadooit_auth.views.log_user_in\"  # A function that should be called by username to login the user in session\nMFA_RECHECK = True  # Allow random rechecking of the user\nMFA_RECHECK_MIN = 10  # Minimum interval in seconds\nMFA_RECHECK_MAX = 30  # Maximum in seconds\nMFA_QUICKLOGIN = True  # Allow quick login for returning users by provide only their 2FA\nMFA_HIDE_DISABLE = (\"\",)  # Can the user disable his key (Added in 1.2.0).\nMFA_OWNED_BY_ENTERPRISE = False  # Who owns security keys\nTOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_RECHECK",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_RECHECK = True  # Allow random rechecking of the user\nMFA_RECHECK_MIN = 10  # Minimum interval in seconds\nMFA_RECHECK_MAX = 30  # Maximum in seconds\nMFA_QUICKLOGIN = True  # Allow quick login for returning users by provide only their 2FA\nMFA_HIDE_DISABLE = (\"\",)  # Can the user disable his key (Added in 1.2.0).\nMFA_OWNED_BY_ENTERPRISE = False  # Who owns security keys\nTOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F\n    FIDO_SERVER_ID = (",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_RECHECK_MIN",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_RECHECK_MIN = 10  # Minimum interval in seconds\nMFA_RECHECK_MAX = 30  # Maximum in seconds\nMFA_QUICKLOGIN = True  # Allow quick login for returning users by provide only their 2FA\nMFA_HIDE_DISABLE = (\"\",)  # Can the user disable his key (Added in 1.2.0).\nMFA_OWNED_BY_ENTERPRISE = False  # Who owns security keys\nTOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F\n    FIDO_SERVER_ID = (\n        \"localhost\"  # Server rp id for FIDO2, it is the full domain of your project",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_RECHECK_MAX",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_RECHECK_MAX = 30  # Maximum in seconds\nMFA_QUICKLOGIN = True  # Allow quick login for returning users by provide only their 2FA\nMFA_HIDE_DISABLE = (\"\",)  # Can the user disable his key (Added in 1.2.0).\nMFA_OWNED_BY_ENTERPRISE = False  # Who owns security keys\nTOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F\n    FIDO_SERVER_ID = (\n        \"localhost\"  # Server rp id for FIDO2, it is the full domain of your project\n    )",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_QUICKLOGIN",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_QUICKLOGIN = True  # Allow quick login for returning users by provide only their 2FA\nMFA_HIDE_DISABLE = (\"\",)  # Can the user disable his key (Added in 1.2.0).\nMFA_OWNED_BY_ENTERPRISE = False  # Who owns security keys\nTOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F\n    FIDO_SERVER_ID = (\n        \"localhost\"  # Server rp id for FIDO2, it is the full domain of your project\n    )\nelse:",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_HIDE_DISABLE",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_HIDE_DISABLE = (\"\",)  # Can the user disable his key (Added in 1.2.0).\nMFA_OWNED_BY_ENTERPRISE = False  # Who owns security keys\nTOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F\n    FIDO_SERVER_ID = (\n        \"localhost\"  # Server rp id for FIDO2, it is the full domain of your project\n    )\nelse:\n    U2F_APPID = \"https://nadooit.de\"  # URL For U2F",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_OWNED_BY_ENTERPRISE",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_OWNED_BY_ENTERPRISE = False  # Who owns security keys\nTOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F\n    FIDO_SERVER_ID = (\n        \"localhost\"  # Server rp id for FIDO2, it is the full domain of your project\n    )\nelse:\n    U2F_APPID = \"https://nadooit.de\"  # URL For U2F\n    FIDO_SERVER_ID = \"nadooit.de\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "TOKEN_ISSUER_NAME",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "TOKEN_ISSUER_NAME = \"nadooit\"  # TOTP Issuer name\nif DEBUG:\n    U2F_APPID = \"https://localhost\"  # URL For U2F\n    FIDO_SERVER_ID = (\n        \"localhost\"  # Server rp id for FIDO2, it is the full domain of your project\n    )\nelse:\n    U2F_APPID = \"https://nadooit.de\"  # URL For U2F\n    FIDO_SERVER_ID = \"nadooit.de\"\nFIDO_SERVER_NAME = \"nadooit\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "FIDO_SERVER_NAME",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "FIDO_SERVER_NAME = \"nadooit\"\nMFA_REDIRECT_AFTER_REGISTRATION = (\n    \"nadooit_os:nadooit-os\"  # Allows Changing the page after successful registeration\n)\nMFA_SUCCESS_REGISTRATION_MSG = (\n    \"Schlüssel erfolgreich registriert\"  # The text of the link\n)\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_REDIRECT_AFTER_REGISTRATION",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_REDIRECT_AFTER_REGISTRATION = (\n    \"nadooit_os:nadooit-os\"  # Allows Changing the page after successful registeration\n)\nMFA_SUCCESS_REGISTRATION_MSG = (\n    \"Schlüssel erfolgreich registriert\"  # The text of the link\n)\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MFA_SUCCESS_REGISTRATION_MSG",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "MFA_SUCCESS_REGISTRATION_MSG = (\n    \"Schlüssel erfolgreich registriert\"  # The text of the link\n)\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"Simple_Format\": {\n            \"format\": \"{levelname} {message}\",\n            \"style\": \"{\",",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"Simple_Format\": {\n            \"format\": \"{levelname} {message}\",\n            \"style\": \"{\",\n        },\n    },\n    \"handlers\": {",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CELERY_BROKER_URL = \"redis://redis:6379/0\"\nCELERY_RESULT_BACKEND = \"redis://redis:6379/0\"\nCELERY_ACCEPT_CONTENT = [\"application/json\"]\nCELERY_RESULT_SERIALIZER = \"json\"\nCELERY_TASK_SERIALIZER = \"json\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = \"redis://redis:6379/0\"\nCELERY_ACCEPT_CONTENT = [\"application/json\"]\nCELERY_RESULT_SERIALIZER = \"json\"\nCELERY_TASK_SERIALIZER = \"json\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = [\"application/json\"]\nCELERY_RESULT_SERIALIZER = \"json\"\nCELERY_TASK_SERIALIZER = \"json\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = \"json\"\nCELERY_TASK_SERIALIZER = \"json\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "app.nadooit.settings",
        "description": "app.nadooit.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = \"json\"",
        "detail": "app.nadooit.settings",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "app.nadooit.urls",
        "description": "app.nadooit.urls",
        "peekOfCode": "admin.site.site_header = \"NADOOIT Administration\"  # default: \"Django Administration\"\nadmin.site.index_title = \"NADOOIT Administration Site\"  # default: \"Site administration\"\nadmin.site.site_title = \"NADOOIT\"\n# This is where the urls are placed\nurlpatterns = [\n    # These are the urls for the webpage\n    path(\n        \"\",\n        include(\n            (\"nadooit_website.urls\", \"nadooit_website\"), namespace=\"nadooit_website\"",
        "detail": "app.nadooit.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "app.nadooit.urls",
        "description": "app.nadooit.urls",
        "peekOfCode": "admin.site.index_title = \"NADOOIT Administration Site\"  # default: \"Site administration\"\nadmin.site.site_title = \"NADOOIT\"\n# This is where the urls are placed\nurlpatterns = [\n    # These are the urls for the webpage\n    path(\n        \"\",\n        include(\n            (\"nadooit_website.urls\", \"nadooit_website\"), namespace=\"nadooit_website\"\n        ),",
        "detail": "app.nadooit.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "app.nadooit.urls",
        "description": "app.nadooit.urls",
        "peekOfCode": "admin.site.site_title = \"NADOOIT\"\n# This is where the urls are placed\nurlpatterns = [\n    # These are the urls for the webpage\n    path(\n        \"\",\n        include(\n            (\"nadooit_website.urls\", \"nadooit_website\"), namespace=\"nadooit_website\"\n        ),\n    ),",
        "detail": "app.nadooit.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit.urls",
        "description": "app.nadooit.urls",
        "peekOfCode": "urlpatterns = [\n    # These are the urls for the webpage\n    path(\n        \"\",\n        include(\n            (\"nadooit_website.urls\", \"nadooit_website\"), namespace=\"nadooit_website\"\n        ),\n    ),\n    path(\n        \"\",",
        "detail": "app.nadooit.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.nadooit.wsgi",
        "description": "app.nadooit.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "app.nadooit.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_api_executions_system.migrations.0001_initial",
        "description": "app.nadooit_api_executions_system.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomerProgramExecution',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('program_time_saved_in_seconds', models.IntegerField(default=0)),",
        "detail": "app.nadooit_api_executions_system.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_api_executions_system.migrations.0002_initial",
        "description": "app.nadooit_api_executions_system.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_program_ownership_system', '0001_initial'),\n        ('nadooit_api_executions_system', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customerprogramexecution',\n            name='customer_program',",
        "detail": "app.nadooit_api_executions_system.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "NadooitApiExecutionsSystemConfig",
        "kind": 6,
        "importPath": "app.nadooit_api_executions_system.apps",
        "description": "app.nadooit_api_executions_system.apps",
        "peekOfCode": "class NadooitApiExecutionsSystemConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_api_executions_system\"",
        "detail": "app.nadooit_api_executions_system.apps",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "kind": 6,
        "importPath": "app.nadooit_api_executions_system.models",
        "description": "app.nadooit_api_executions_system.models",
        "peekOfCode": "class CustomerProgramExecution(models.Model):\n    \"\"\"_summary_\n    model for a single execution of a nadooit program.\n    \"\"\"\n    class PaymentStatus(models.TextChoices):\n        NOT_PAID = \"NOT_PAID\", _(\"Not Paid\")\n        PAID = \"PAID\", _(\"Paid\")\n        REFUNDED = \"REFUNDED\", _(\"Refunded\")\n        REVOKED = \"REVOKED\", _(\"Revoked\")\n    # id of the execution",
        "detail": "app.nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "cutomer_program_execution_was_created",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.models",
        "description": "app.nadooit_api_executions_system.models",
        "peekOfCode": "def cutomer_program_execution_was_created(sender, instance, created, *args, **kwargs):\n    if created:\n        # reduce the customer_programs time_account by the program_time_saved_in_seconds\n        # gets the customer program of the execution\n        nadooit_customer_program = CustomerProgram.objects.get(\n            id=instance.customer_program.id\n        )\n        # gets the time account of the customer program and reduces it by the time saved by the program\n        nadooit_customer_program.time_account.time_balance_in_seconds = (\n            nadooit_customer_program.time_account.time_balance_in_seconds",
        "detail": "app.nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "customer_program_execution_was_deleted",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.models",
        "description": "app.nadooit_api_executions_system.models",
        "peekOfCode": "def customer_program_execution_was_deleted(sender, instance, *args, **kwargs):\n    \"\"\"\n        Whenever a customer program execution is deleted this signal is triggered.\n    Args:\n        sender (_type_): _description_\n        instance (_type_): _description_\n    \"\"\"\n    # increase the customer_programs time_account by the program_time_saved_in_seconds\n    obj = CustomerProgram.objects.get(id=instance.customer_program.id)\n    obj.time_account.time_balance_in_seconds = (",
        "detail": "app.nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "test_create_execution",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.test_views",
        "description": "app.nadooit_api_executions_system.test_views",
        "peekOfCode": "def test_create_execution():\n    # create a user\n    user = baker.make(User)\n    baker.make(Employee, user=user)\n    customer = baker.make(Customer)\n    EmployeeContract.objects.create(\n        employee=user.employee,\n        customer=customer,\n    )\n    customer_program = baker.make(",
        "detail": "app.nadooit_api_executions_system.test_views",
        "documentation": {}
    },
    {
        "label": "test_create_execution__with__invalid__user_code",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.test_views",
        "description": "app.nadooit_api_executions_system.test_views",
        "peekOfCode": "def test_create_execution__with__invalid__user_code():\n    # create a user\n    user = baker.make(User)\n    baker.make(Employee, user=user)\n    customer = baker.make(Customer)\n    EmployeeContract.objects.create(\n        employee=user.employee,\n        customer=customer,\n    )\n    customer_program = baker.make(",
        "detail": "app.nadooit_api_executions_system.test_views",
        "documentation": {}
    },
    {
        "label": "test_create_execution__with__invalid__api_key",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.test_views",
        "description": "app.nadooit_api_executions_system.test_views",
        "peekOfCode": "def test_create_execution__with__invalid__api_key():\n    # create a user\n    user = baker.make(User)\n    baker.make(Employee, user=user)\n    customer = baker.make(Customer)\n    EmployeeContract.objects.create(\n        employee=user.employee,\n        customer=customer,\n    )\n    customer_program = baker.make(",
        "detail": "app.nadooit_api_executions_system.test_views",
        "documentation": {}
    },
    {
        "label": "test_check_user",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.test_views",
        "description": "app.nadooit_api_executions_system.test_views",
        "peekOfCode": "def test_check_user():\n    # create a user\n    user = baker.make(User, user_code=\"nadoo01\")\n    baker.make(Employee, user=user)\n    customer = baker.make(Customer)\n    EmployeeContract.objects.create(\n        employee=user.employee,\n        customer=customer,\n    )\n    Nadooit_api_key = baker.make(NadooitApiKey, user=user)",
        "detail": "app.nadooit_api_executions_system.test_views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit_api_executions_system.urls",
        "description": "app.nadooit_api_executions_system.urls",
        "peekOfCode": "urlpatterns = [\n    # path for the api requests for program executions\n    path(\"executions\", create_execution, name=\"create-execution\"),\n    # path for the api requests for checking if a user is valid or not\n    path(\"users/check\", check_user, name=\"check\"),\n]",
        "detail": "app.nadooit_api_executions_system.urls",
        "documentation": {}
    },
    {
        "label": "get__user_code__for__request",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.views",
        "description": "app.nadooit_api_executions_system.views",
        "peekOfCode": "def get__user_code__for__request(request) -> str:\n    \"\"\"\n    gets the user code from the request\n    Returns:\n        _type_: the user code as a string\n    \"\"\"\n    return request.data.get(\"NADOOIT__USER_CODE\")\n# Create your views here.\n# view for creating a new execution\n@api_view([\"POST\"])",
        "detail": "app.nadooit_api_executions_system.views",
        "documentation": {}
    },
    {
        "label": "create_execution",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.views",
        "description": "app.nadooit_api_executions_system.views",
        "peekOfCode": "def create_execution(request):\n    print(\"create_execution\")\n    print(request.data)\n    try:\n        # gets the hashed api key from the request\n        hashed_api_key = get__hashed_api_key__for__request(request)\n        print(\"hashed_api_key\", hashed_api_key)\n        try:\n            # checks if the api key is active\n            if check__nadooit_api_key__has__is_active(hashed_api_key):",
        "detail": "app.nadooit_api_executions_system.views",
        "documentation": {}
    },
    {
        "label": "check_user",
        "kind": 2,
        "importPath": "app.nadooit_api_executions_system.views",
        "description": "app.nadooit_api_executions_system.views",
        "peekOfCode": "def check_user(request):\n    try:\n        hashed_api_key = get__hashed_api_key__for__request(request)\n        found_nadooit_api_key = get__nadooit_api_key__for__hashed_api_key(\n            hashed_api_key\n        )\n        if not check__nadooit_api_key__has__is_active(hashed_api_key):\n            return Response({\"error\": \"Your API Key is not valid\"}, status=403)\n        if not found_nadooit_api_key.user.user_code == request.data.get(\n            \"NADOOIT__USER_CODE\"",
        "detail": "app.nadooit_api_executions_system.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_api_key.migrations.0001_initial",
        "description": "app.nadooit_api_key.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NadooitApiKey',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('api_key', models.CharField(default=uuid.uuid4, max_length=255, unique=True)),",
        "detail": "app.nadooit_api_key.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_api_key.migrations.0002_initial",
        "description": "app.nadooit_api_key.migrations.0002_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_crm', '0001_initial'),\n        ('nadooit_hr', '0001_initial'),\n        ('nadooit_api_key', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(",
        "detail": "app.nadooit_api_key.migrations.0002_initial",
        "documentation": {}
    },
    {
        "label": "NadooitApiKeyConfig",
        "kind": 6,
        "importPath": "app.nadooit_api_key.apps",
        "description": "app.nadooit_api_key.apps",
        "peekOfCode": "class NadooitApiKeyConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_api_key\"",
        "detail": "app.nadooit_api_key.apps",
        "documentation": {}
    },
    {
        "label": "NadooitApiKey",
        "kind": 6,
        "importPath": "app.nadooit_api_key.models",
        "description": "app.nadooit_api_key.models",
        "peekOfCode": "class NadooitApiKey(models.Model):\n    # id of the api key\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # the user that owns the api key\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # api_keys are unique and are stored in the database as a hash of the api key\n    # this is done to prevent the api key from being stored in plain text in the database\n    api_key = models.CharField(\n        max_length=255,\n        unique=True,",
        "detail": "app.nadooit_api_key.models",
        "documentation": {}
    },
    {
        "label": "NadooitApiKeyManager",
        "kind": 6,
        "importPath": "app.nadooit_api_key.models",
        "description": "app.nadooit_api_key.models",
        "peekOfCode": "class NadooitApiKeyManager(models.Model):\n    employee = models.OneToOneField(\n        Employee, on_delete=models.CASCADE, primary_key=True\n    )\n    can_create_api_key = models.BooleanField(default=False)\n    can_delete_api_key = models.BooleanField(default=False)\n    can_give_manager_role = models.BooleanField(default=False)\n    list_of_customers_the_manager_is_responsible_for = models.ManyToManyField(\n        Customer, blank=True\n    )",
        "detail": "app.nadooit_api_key.models",
        "documentation": {}
    },
    {
        "label": "hash_api_key_when_created",
        "kind": 2,
        "importPath": "app.nadooit_api_key.models",
        "description": "app.nadooit_api_key.models",
        "peekOfCode": "def hash_api_key_when_created(sender, instance, created, *args, **kwargs):\n    if created:\n        print(\"hashing api key\")\n        # hashes the api_key\n        obj = NadooitApiKey.objects.get(id=instance.id)\n        hashed_apit_key = hashlib.sha256(str(obj.api_key).encode()).hexdigest()\n        NadooitApiKey.objects.filter(id=instance.id).update(api_key=hashed_apit_key)\n# A role class that gets added to the user model\n# It is used to determine what the user can do in regards to the Nadooit Api Key\nclass NadooitApiKeyManager(models.Model):",
        "detail": "app.nadooit_api_key.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_auth.migrations.0001_initial",
        "description": "app.nadooit_auth.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "app.nadooit_auth.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AuthConfig",
        "kind": 6,
        "importPath": "app.nadooit_auth.apps",
        "description": "app.nadooit_auth.apps",
        "peekOfCode": "class AuthConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_auth\"",
        "detail": "app.nadooit_auth.apps",
        "documentation": {}
    },
    {
        "label": "UserCodeBackend",
        "kind": 6,
        "importPath": "app.nadooit_auth.custom_user_code_auth_backend",
        "description": "app.nadooit_auth.custom_user_code_auth_backend",
        "peekOfCode": "class UserCodeBackend(BaseBackend):\n    def authenticate(self, request, user_code=None):\n        from nadooit_auth.models import User\n        try:\n            user = User.objects.get(user_code=user_code)\n            return user\n        except User.DoesNotExist:\n            return None\n    def get_user(self, user_code):\n        from nadooit_auth.models import User",
        "detail": "app.nadooit_auth.custom_user_code_auth_backend",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.nadooit_auth.models",
        "description": "app.nadooit_auth.models",
        "peekOfCode": "class User(AbstractUser, PermissionsMixin):\n    # id is a unique identifier for the user\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # The user code is a unique code that is used to identify the user.\n    # The user code is generated automatically when the user is created.\n    # The user can change the user code in the settings.\n    # The user code is wirrten on the user's security key.\n    # TODO: #114 rename to code because it is already in the user model\n    user_code = models.CharField(\n        max_length=32,",
        "detail": "app.nadooit_auth.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "app.nadooit_auth.urls",
        "description": "app.nadooit_auth.urls",
        "peekOfCode": "app_name = \"nadooit_auth\"\nurlpatterns = [\n    # path for login\n    path(\"login-user\", login_user, name=\"login-user\"),\n    # path for logout\n    path(\"logout-user\", logout_user, name=\"logout-user\"),\n    # path for registering a new user\n    path(\"register-user\", register_user, name=\"register-user\"),\n]",
        "detail": "app.nadooit_auth.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit_auth.urls",
        "description": "app.nadooit_auth.urls",
        "peekOfCode": "urlpatterns = [\n    # path for login\n    path(\"login-user\", login_user, name=\"login-user\"),\n    # path for logout\n    path(\"logout-user\", logout_user, name=\"logout-user\"),\n    # path for registering a new user\n    path(\"register-user\", register_user, name=\"register-user\"),\n]",
        "detail": "app.nadooit_auth.urls",
        "documentation": {}
    },
    {
        "label": "get__new_user_code",
        "kind": 2,
        "importPath": "app.nadooit_auth.user_code",
        "description": "app.nadooit_auth.user_code",
        "peekOfCode": "def get__new_user_code() -> str:\n    \"\"\"\n    Generates a new user code.\n    \"\"\"\n    user_code = \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(6)\n    )\n    return user_code\ndef check__valid_user_code(user_code: str) -> bool:\n    \"\"\"",
        "detail": "app.nadooit_auth.user_code",
        "documentation": {}
    },
    {
        "label": "check__valid_user_code",
        "kind": 2,
        "importPath": "app.nadooit_auth.user_code",
        "description": "app.nadooit_auth.user_code",
        "peekOfCode": "def check__valid_user_code(user_code: str) -> bool:\n    \"\"\"\n    Checks if a user code is valid.\n    \"\"\"\n    # A user code is valid if it is a string of 6 characters.\n    if len(user_code) > 6:\n        return False\n    if len(user_code) < 6:\n        return False\n    # A user code is valid if it contains only letters and digits.",
        "detail": "app.nadooit_auth.user_code",
        "documentation": {}
    },
    {
        "label": "get__new_username",
        "kind": 2,
        "importPath": "app.nadooit_auth.username",
        "description": "app.nadooit_auth.username",
        "peekOfCode": "def get__new_username() -> str:\n    \"\"\"\n    This function generates a new username for a new user.\n    \"\"\"\n    username = \"\".join(\n        random.choice(string.ascii_letters + string.digits) for _ in range(20)\n    )\n    return username",
        "detail": "app.nadooit_auth.username",
        "documentation": {}
    },
    {
        "label": "user_is_KeyManager_that_can_create_new_keys",
        "kind": 2,
        "importPath": "app.nadooit_auth.views",
        "description": "app.nadooit_auth.views",
        "peekOfCode": "def user_is_KeyManager_that_can_create_new_keys(user):\n    if hasattr(user.employee, \"keymanager\"):\n        return user.employee.keymanager.can_create_keys\n    return False\ndef log_user_in(request, username):\n    user = User.objects.get(username=username)\n    user.backend = \"django.contrib.auth.backends.ModelBackend\"\n    # loging in the user\n    login(request, user)\n    # request.POST containing redirect might be wrong here and should be request.GET \"next\" instead. Test this.",
        "detail": "app.nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "log_user_in",
        "kind": 2,
        "importPath": "app.nadooit_auth.views",
        "description": "app.nadooit_auth.views",
        "peekOfCode": "def log_user_in(request, username):\n    user = User.objects.get(username=username)\n    user.backend = \"django.contrib.auth.backends.ModelBackend\"\n    # loging in the user\n    login(request, user)\n    # request.POST containing redirect might be wrong here and should be request.GET \"next\" instead. Test this.\n    if \"redirect\" in request.POST:\n        return redirect(request.POST[\"redirect\"])\n    else:\n        return redirect(reverse(\"nadooit_os:nadooit-os\"))",
        "detail": "app.nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "app.nadooit_auth.views",
        "description": "app.nadooit_auth.views",
        "peekOfCode": "def login_user(request):\n    if request.method == \"POST\":\n        user_code = request.POST[\"user_code\"]\n        user = authenticate(request, user_code=user_code)\n        # print(\"user: \", user)\n        err = \"\"\n        if user is not None:\n            # print(\"found user\")\n            if user.is_active:  # if the user object exist\n                if \"mfa\" in settings.INSTALLED_APPS and settings.DEBUG == False:",
        "detail": "app.nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "app.nadooit_auth.views",
        "description": "app.nadooit_auth.views",
        "peekOfCode": "def logout_user(request):\n    logout(request)\n    messages.success(request, \"You habe successfully logged out\")\n    return redirect(\"/auth/login-user\")\n@login_required(login_url=\"/auth/login-user\")\n@user_passes_test(\n    user_is_KeyManager_that_can_create_new_keys,\n    redirect_field_name=None,\n    login_url=\"/auth/login-user\",\n)",
        "detail": "app.nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "register_user",
        "kind": 2,
        "importPath": "app.nadooit_auth.views",
        "description": "app.nadooit_auth.views",
        "peekOfCode": "def register_user(request):\n    if request.method == \"POST\":\n        error = \"\"\n        user_code = request.POST.get(\"user_code\").replace(\"/\", \"\")\n        display_name = request.POST.get(\"display_name\")\n        if not check__valid_user_code(user_code):\n            error = \"Invalid user_code\"\n            return render(\n                request,\n                \"nadooit_auth/register.html\",",
        "detail": "app.nadooit_auth.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_crm.migrations.0001_initial",
        "description": "app.nadooit_crm.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('street', models.CharField(blank=True, max_length=255, null=True)),",
        "detail": "app.nadooit_crm.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomerAdmin",
        "kind": 6,
        "importPath": "app.nadooit_crm.admin",
        "description": "app.nadooit_crm.admin",
        "peekOfCode": "class CustomerAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Customer._meta.fields]\nclass AddressAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Address._meta.fields]\n# Register your models here.\nadmin.site.register(Customer, CustomerAdmin)\nadmin.site.register(Address, AddressAdmin)\nadmin.site.register(ShippingAdress)\nadmin.site.register(BillingAdress)",
        "detail": "app.nadooit_crm.admin",
        "documentation": {}
    },
    {
        "label": "AddressAdmin",
        "kind": 6,
        "importPath": "app.nadooit_crm.admin",
        "description": "app.nadooit_crm.admin",
        "peekOfCode": "class AddressAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Address._meta.fields]\n# Register your models here.\nadmin.site.register(Customer, CustomerAdmin)\nadmin.site.register(Address, AddressAdmin)\nadmin.site.register(ShippingAdress)\nadmin.site.register(BillingAdress)",
        "detail": "app.nadooit_crm.admin",
        "documentation": {}
    },
    {
        "label": "NadooitCrmConfig",
        "kind": 6,
        "importPath": "app.nadooit_crm.apps",
        "description": "app.nadooit_crm.apps",
        "peekOfCode": "class NadooitCrmConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_crm\"",
        "detail": "app.nadooit_crm.apps",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "app.nadooit_crm.models",
        "description": "app.nadooit_crm.models",
        "peekOfCode": "class Address(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    street = models.CharField(max_length=255, null=True, blank=True)\n    house_number = models.CharField(max_length=255, null=True, blank=True)\n    town = models.CharField(max_length=255, null=True, blank=True)\n    postal_code = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return (",
        "detail": "app.nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "ShippingAdress",
        "kind": 6,
        "importPath": "app.nadooit_crm.models",
        "description": "app.nadooit_crm.models",
        "peekOfCode": "class ShippingAdress(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    adress = models.ForeignKey(Address, on_delete=models.SET_NULL, null=True)\n    addressed_to = models.CharField(max_length=255, null=True, blank=True)\n    def __str__(self):\n        return (\n            self.addressed_to\n            + \", \"\n            + self.adress.street\n            + \" \"",
        "detail": "app.nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "BillingAdress",
        "kind": 6,
        "importPath": "app.nadooit_crm.models",
        "description": "app.nadooit_crm.models",
        "peekOfCode": "class BillingAdress(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    adress = models.ForeignKey(Address, on_delete=models.SET_NULL, null=True)\n    addressed_to = models.CharField(max_length=255, null=True, blank=True)\n    def __str__(self):\n        return (\n            self.addressed_to\n            + \", \"\n            + self.adress.street\n            + \" \"",
        "detail": "app.nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "app.nadooit_crm.models",
        "description": "app.nadooit_crm.models",
        "peekOfCode": "class Customer(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    shipping_address = models.ForeignKey(\n        ShippingAdress, on_delete=models.SET_NULL, null=True\n    )\n    billing_address = models.ForeignKey(\n        BillingAdress, on_delete=models.SET_NULL, null=True",
        "detail": "app.nadooit_crm.models",
        "documentation": {}
    },
    {
        "label": "NadooitDeliveryConfig",
        "kind": 6,
        "importPath": "app.nadooit_delivery.apps",
        "description": "app.nadooit_delivery.apps",
        "peekOfCode": "class NadooitDeliveryConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_delivery\"",
        "detail": "app.nadooit_delivery.apps",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "app.nadooit_delivery.models",
        "description": "app.nadooit_delivery.models",
        "peekOfCode": "class Order(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.customer.name + \" \" + self.created_at.strftime(\"%Y-%m-%d %H:%M:%S\")\nclass OrderItem(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)",
        "detail": "app.nadooit_delivery.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "app.nadooit_delivery.models",
        "description": "app.nadooit_delivery.models",
        "peekOfCode": "class OrderItem(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.product.name + \" \" + self.quantity.__str__()",
        "detail": "app.nadooit_delivery.models",
        "documentation": {}
    },
    {
        "label": "NadooitFunnelConfig",
        "kind": 6,
        "importPath": "app.nadooit_funnel.apps",
        "description": "app.nadooit_funnel.apps",
        "peekOfCode": "class NadooitFunnelConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_funnel\"",
        "detail": "app.nadooit_funnel.apps",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_hr.migrations.0001_initial",
        "description": "app.nadooit_hr.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_crm', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Employee',\n            fields=[",
        "detail": "app.nadooit_hr.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitHrConfig",
        "kind": 6,
        "importPath": "app.nadooit_hr.apps",
        "description": "app.nadooit_hr.apps",
        "peekOfCode": "class NadooitHrConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_hr\"",
        "detail": "app.nadooit_hr.apps",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "app.nadooit_hr.models",
        "description": "app.nadooit_hr.models",
        "peekOfCode": "class Employee(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    # a customers field that shows what customers the employee is assigned to\n    # customers_the_employee_works_for = models.ManyToManyField(Customer)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        display_name = self.user.display_name\n        if display_name is not None:",
        "detail": "app.nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeContract",
        "kind": 6,
        "importPath": "app.nadooit_hr.models",
        "description": "app.nadooit_hr.models",
        "peekOfCode": "class EmployeeContract(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # the employee that is assigned to the customer\n    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    # the start date of the contract\n    start_date = models.DateField(auto_now_add=True)\n    # the end date of the contract\n    end_date = models.DateField(null=True, blank=True)\n    # if false the contract is not active and hidden from the frontend",
        "detail": "app.nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "EmployeeManagerContract",
        "kind": 6,
        "importPath": "app.nadooit_hr.models",
        "description": "app.nadooit_hr.models",
        "peekOfCode": "class EmployeeManagerContract(models.Model):\n    contract = models.OneToOneField(EmployeeContract, on_delete=models.CASCADE)\n    # if true, the employee manager can assign employees to customers\n    # TODO #104 rename to can_add_employees\n    can_add_new_employee = models.BooleanField(default=False)\n    # if true, the employee manager can remove employees from customers\n    # TODO #108 rename to can_delete_employees\n    can_delete_employee = models.BooleanField(default=False)\n    # if true, the employee manager can give the role of employee manager to other employees\n    # TODO #103 rename to can_create_employee_manager_contract",
        "detail": "app.nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramManagerContract",
        "kind": 6,
        "importPath": "app.nadooit_hr.models",
        "description": "app.nadooit_hr.models",
        "peekOfCode": "class CustomerProgramManagerContract(models.Model):\n    contract = models.OneToOneField(EmployeeContract, on_delete=models.CASCADE)\n    # if true, the employee manager can assign employees to customers\n    can_create_customer_program = models.BooleanField(default=False)\n    # if true, the employee manager can remove employees from customers\n    can_delete_customer_program = models.BooleanField(default=False)\n    # if true, the employee manager can give the role of employee manager to other employees\n    # TODO #105 rename to can_create_customer_program_manager_contract\n    can_give_manager_role = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)",
        "detail": "app.nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecutionManagerContract",
        "kind": 6,
        "importPath": "app.nadooit_hr.models",
        "description": "app.nadooit_hr.models",
        "peekOfCode": "class CustomerProgramExecutionManagerContract(models.Model):\n    # TODO rename from single to plural\n    contract = models.OneToOneField(EmployeeContract, on_delete=models.CASCADE)\n    # If true the customer can create customer program executions\n    can_create_customer_program_execution = models.BooleanField(default=False)\n    # If true the customer can delete customer program executions\n    can_delete_customer_program_execution = models.BooleanField(default=False)\n    # If true the customer can give the rights to other users\n    # TODO #106 rename to can_create_customer_program_execution_manager_contract\n    can_give_manager_role = models.BooleanField(default=False)",
        "detail": "app.nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "TimeAccountManagerContract",
        "kind": 6,
        "importPath": "app.nadooit_hr.models",
        "description": "app.nadooit_hr.models",
        "peekOfCode": "class TimeAccountManagerContract(models.Model):\n    contract = models.OneToOneField(EmployeeContract, on_delete=models.CASCADE)\n    # If true the customer can create customer program executions\n    can_create_time_accounts = models.BooleanField(default=False)\n    # If true the customer can delete customer program executions\n    can_delete_time_accounts = models.BooleanField(default=False)\n    # If true the customer can give the rights to other users\n    # TODO #107 rename to can_create_time_account_manager_contract\n    can_give_manager_role = models.BooleanField(default=False)\n    def __str__(self) -> str:",
        "detail": "app.nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "CustomerManagerContract",
        "kind": 6,
        "importPath": "app.nadooit_hr.models",
        "description": "app.nadooit_hr.models",
        "peekOfCode": "class CustomerManagerContract(models.Model):\n    contract = models.OneToOneField(EmployeeContract, on_delete=models.CASCADE)\n    # if true, the employee manager can give the role of employee manager to other employees\n    can_give_manager_role = models.BooleanField(default=False)\n    def __str__(self) -> str:\n        return f\"Kundenverwaltervertrag zwischen: {self.contract.employee} - {self.contract.customer}\"\n    def get_abilities(self):\n        return {\n            \"can_give_manager_role\": self.can_give_manager_role,\n        }",
        "detail": "app.nadooit_hr.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_key.migrations.0001_initial",
        "description": "app.nadooit_key.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_hr', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='KeyManager',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.nadooit_key.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitKeyConfig",
        "kind": 6,
        "importPath": "app.nadooit_key.apps",
        "description": "app.nadooit_key.apps",
        "peekOfCode": "class NadooitKeyConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_key\"",
        "detail": "app.nadooit_key.apps",
        "documentation": {}
    },
    {
        "label": "KeyManager",
        "kind": 6,
        "importPath": "app.nadooit_key.models",
        "description": "app.nadooit_key.models",
        "peekOfCode": "class KeyManager(models.Model):\n    user = models.OneToOneField(Employee, on_delete=models.CASCADE)\n    can_create_keys = models.BooleanField(default=False)\n    can_delete_keys = models.BooleanField(default=False)\n    can_update_keys = models.BooleanField(default=False)\n    can_create_key_managers = models.BooleanField(default=False)\n    can_delete_key_managers = models.BooleanField(default=False)\n    can_update_key_managers = models.BooleanField(default=False)\n    key_managers_assigened_by_this_key_manager = models.ManyToManyField(\n        \"self\", blank=True",
        "detail": "app.nadooit_key.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_network.migrations.0001_initial",
        "description": "app.nadooit_network.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_program_ownership_system', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NadooitInventory',\n            fields=[",
        "detail": "app.nadooit_network.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitNetworkConfig",
        "kind": 6,
        "importPath": "app.nadooit_network.apps",
        "description": "app.nadooit_network.apps",
        "peekOfCode": "class NadooitNetworkConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_network\"",
        "detail": "app.nadooit_network.apps",
        "documentation": {}
    },
    {
        "label": "NadooitInventory",
        "kind": 6,
        "importPath": "app.nadooit_network.models",
        "description": "app.nadooit_network.models",
        "peekOfCode": "class NadooitInventory(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # Holds the amount of money in the inventory\n    money = models.IntegerField(default=0)\n    # Holds shares of programs\n    list_of_nadooit_program_ownership_shares = models.ManyToManyField(\n        ProgramShare, blank=True\n    )\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)",
        "detail": "app.nadooit_network.models",
        "documentation": {}
    },
    {
        "label": "NadooitNetworkMember",
        "kind": 6,
        "importPath": "app.nadooit_network.models",
        "description": "app.nadooit_network.models",
        "peekOfCode": "class NadooitNetworkMember(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    inventory = models.ForeignKey(NadooitInventory, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.user.display_name + \" \" + self.user.user_code\nclass NadooitNetworkFriendslist(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(NadooitNetworkMember, on_delete=models.CASCADE)\n    friend_list = models.ManyToManyField(",
        "detail": "app.nadooit_network.models",
        "documentation": {}
    },
    {
        "label": "NadooitNetworkFriendslist",
        "kind": 6,
        "importPath": "app.nadooit_network.models",
        "description": "app.nadooit_network.models",
        "peekOfCode": "class NadooitNetworkFriendslist(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(NadooitNetworkMember, on_delete=models.CASCADE)\n    friend_list = models.ManyToManyField(\n        NadooitNetworkMember, related_name=\"friend_list\"\n    )\n    def __str__(self):\n        return (\n            self.user.user.display_name\n            + \" \"",
        "detail": "app.nadooit_network.models",
        "documentation": {}
    },
    {
        "label": "NadooitNetworkGroup",
        "kind": 6,
        "importPath": "app.nadooit_network.models",
        "description": "app.nadooit_network.models",
        "peekOfCode": "class NadooitNetworkGroup(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    # the group is made up of members. There is a limit of 10 members in a group.\n    members = models.ManyToManyField(NadooitNetworkMember, blank=True)\n    created_by = models.ForeignKey(\n        NadooitNetworkMember, on_delete=models.CASCADE, related_name=\"created_by\"\n    )\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self) -> str:",
        "detail": "app.nadooit_network.models",
        "documentation": {}
    },
    {
        "label": "NadooitNetworkGuildMember",
        "kind": 6,
        "importPath": "app.nadooit_network.models",
        "description": "app.nadooit_network.models",
        "peekOfCode": "class NadooitNetworkGuildMember(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    nadooit_network_member = models.ForeignKey(\n        NadooitNetworkMember, on_delete=models.CASCADE\n    )\n    GUILD_ROLES = (\n        (\"MEMBER\", \"MEMBER\"),\n        (\"MODERATOR\", \"MODERATOR\"),\n        (\"ADMIN\", \"ADMIN\"),\n    )",
        "detail": "app.nadooit_network.models",
        "documentation": {}
    },
    {
        "label": "NadooitGuildBank",
        "kind": 6,
        "importPath": "app.nadooit_network.models",
        "description": "app.nadooit_network.models",
        "peekOfCode": "class NadooitGuildBank(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    guild_inventory = models.ForeignKey(NadooitInventory, on_delete=models.CASCADE)\n    # the amount of money the user has in the guild bank.\nclass NadooitGuild(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255, null=True, blank=True)\n    description = models.TextField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)",
        "detail": "app.nadooit_network.models",
        "documentation": {}
    },
    {
        "label": "NadooitGuild",
        "kind": 6,
        "importPath": "app.nadooit_network.models",
        "description": "app.nadooit_network.models",
        "peekOfCode": "class NadooitGuild(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255, null=True, blank=True)\n    description = models.TextField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    # Every guild has a members of type NadooitNetworkMember. Every NadooitNetworkMember can be a member of one guild.\n    member_list = models.ManyToManyField(NadooitNetworkGuildMember, blank=True)\n    guild_logo = models.ImageField(upload_to=\"guild_logo\", blank=True, null=True)\n    def __str__(self):",
        "detail": "app.nadooit_network.models",
        "documentation": {}
    },
    {
        "label": "templatetag_get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "kind": 2,
        "importPath": "app.nadooit_os.templatetags.get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "description": "app.nadooit_os.templatetags.get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "peekOfCode": "def templatetag_get_time_as_string_in_hour_format_for_time_in_seconds_as_integer(\n    time_in_seconds_as_integer,\n):\n    if time_in_seconds_as_integer is None:\n        return \"-\"\n    else:\n        return get_time_as_string_in_hour_format_for_time_in_seconds_as_integer(\n            time_in_seconds_as_integer\n        )\nregister.filter(",
        "detail": "app.nadooit_os.templatetags.get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "app.nadooit_os.templatetags.get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "description": "app.nadooit_os.templatetags.get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "peekOfCode": "register = template.Library()\nfrom nadooit_time_account.models import \\\n    get_time_as_string_in_hour_format_for_time_in_seconds_as_integer\ndef templatetag_get_time_as_string_in_hour_format_for_time_in_seconds_as_integer(\n    time_in_seconds_as_integer,\n):\n    if time_in_seconds_as_integer is None:\n        return \"-\"\n    else:\n        return get_time_as_string_in_hour_format_for_time_in_seconds_as_integer(",
        "detail": "app.nadooit_os.templatetags.get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "documentation": {}
    },
    {
        "label": "NadooitOsConfig",
        "kind": 6,
        "importPath": "app.nadooit_os.apps",
        "description": "app.nadooit_os.apps",
        "peekOfCode": "class NadooitOsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_os\"",
        "detail": "app.nadooit_os.apps",
        "documentation": {}
    },
    {
        "label": "UserCodeModelChoiceField",
        "kind": 6,
        "importPath": "app.nadooit_os.forms",
        "description": "app.nadooit_os.forms",
        "peekOfCode": "class UserCodeModelChoiceField(ModelChoiceField):\n    def label_from_instance(self, obj):\n        return obj.user_code\nclass ApiKeyForm(forms.Form):\n    api_key = forms.UUIDField(\n        initial=uuid.uuid4,\n        required=True,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control\",",
        "detail": "app.nadooit_os.forms",
        "documentation": {}
    },
    {
        "label": "ApiKeyForm",
        "kind": 6,
        "importPath": "app.nadooit_os.forms",
        "description": "app.nadooit_os.forms",
        "peekOfCode": "class ApiKeyForm(forms.Form):\n    api_key = forms.UUIDField(\n        initial=uuid.uuid4,\n        required=True,\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control\",\n                \"style\": \"width: 390px;\",\n                \"class\": \"form-control\",\n            }",
        "detail": "app.nadooit_os.forms",
        "documentation": {}
    },
    {
        "label": "ApiKeyManagerForm",
        "kind": 6,
        "importPath": "app.nadooit_os.forms",
        "description": "app.nadooit_os.forms",
        "peekOfCode": "class ApiKeyManagerForm(forms.Form):\n    # Text input for user code not choice field\n    user_code = forms.CharField(\n        required=True,\n        label=\"Schlüssel User code eingeben:\",\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control\",\n                \"style\": \"width: 150px;\",\n                \"class\": \"form-control\",",
        "detail": "app.nadooit_os.forms",
        "documentation": {}
    },
    {
        "label": "CustomerTimeAccountManagerForm",
        "kind": 6,
        "importPath": "app.nadooit_os.forms",
        "description": "app.nadooit_os.forms",
        "peekOfCode": "class CustomerTimeAccountManagerForm(forms.Form):\n    # Text input for user code not choice field\n    user_code = forms.CharField(\n        required=True,\n        label=\"Schlüssel User code eingeben:\",\n        widget=forms.TextInput(\n            attrs={\n                \"class\": \"form-control\",\n                \"style\": \"width: 150px;\",\n                \"class\": \"form-control\",",
        "detail": "app.nadooit_os.forms",
        "documentation": {}
    },
    {
        "label": "get__not_paid_customer_program_executions__for__filter_type_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__not_paid_customer_program_executions__for__filter_type_and_customer(\n    filter_type, customer\n):\n    customer_program_executions = (\n        get__customer_program_executions__for__filter_type_and_customer(\n            filter_type, customer\n        ).filter(payment_status=\"NOT_PAID\")\n    )\n    return customer_program_executions\ndef get__customer_program_executions__for__filter_type_and_customer(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_executions__for__filter_type_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer_program_executions__for__filter_type_and_customer(\n    filter_type, customer\n) -> QuerySet:\n    from datetime import date\n    todays_date = date.today()\n    customer_program_executions = None\n    if filter_type == \"lastmonth\":\n        print(todays_date.month)\n        print(todays_date.month - 1)\n        if todays_date.month == 1:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__price_as_string_in_euro_format__for__price_in_euro_as_decimal",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__price_as_string_in_euro_format__for__price_in_euro_as_decimal(price) -> str:\n    \"\"\"\n    Returns the price as a string in euro format\n    \"\"\"\n    if price is None:\n        price = 0\n    price_as_string = f\"{round(price, 3):.3f}\"\n    price_as_string = price_as_string.replace(\".\", \",\")\n    if price_as_string.endswith(\",0\"):\n        price_as_string = price_as_string[:-1]",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__time_as_string_in_hour_format__for__time_in_seconds_as_integer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__time_as_string_in_hour_format__for__time_in_seconds_as_integer(time) -> str:\n    # The format of the final string should result in something like this \"25 std : 03 min : 05 sek\"\n    return f\"{math.floor(time / 3600)} std : {math.floor((time % 3600) / 60)} min : {math.floor(time % 60)} sek\"\n# Refactore this function because it requeres an employee and not a user. This is dangerous because it is not clear by the name of the function\ndef check__user__is__customer_program_manager__for__customer_prgram(\n    user: User, customer_program: CustomerProgram\n):\n    return CustomerProgramManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__user__is__customer_program_manager__for__customer_prgram",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__user__is__customer_program_manager__for__customer_prgram(\n    user: User, customer_program: CustomerProgram\n):\n    return CustomerProgramManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n        contract__customer=customer_program.customer,\n    ).exists()\ndef check__customer_program__for__customer_program_id__exists(customer_program_id):\n    return CustomerProgram.objects.filter(id=customer_program_id).exists()",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program__for__customer_program_id__exists",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__customer_program__for__customer_program_id__exists(customer_program_id):\n    return CustomerProgram.objects.filter(id=customer_program_id).exists()\ndef get__customer_program__for__customer_program_id(customer_program_id):\n    return CustomerProgram.objects.get(id=customer_program_id)\ndef get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them(\n    employee,\n):\n    print(\"employee\", employee)\n    list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts = get__list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts(\n        employee=employee",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program__for__customer_program_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer_program__for__customer_program_id(customer_program_id):\n    return CustomerProgram.objects.get(id=customer_program_id)\ndef get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them(\n    employee,\n):\n    print(\"employee\", employee)\n    list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts = get__list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts(\n        employee=employee\n    )\n    print(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them(\n    employee,\n):\n    print(\"employee\", employee)\n    list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts = get__list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts(\n        employee=employee\n    )\n    print(\n        list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts\n    )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_programm_manager_contract_with_and_the_customer_programms__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers_the_employee_has_a_customer_programm_manager_contract_with_and_the_customer_programms__for__employee(\n    employee: Employee,\n):\n    customers_the_user_is_responsible_for_and_the_customer_programms = []\n    list_of_customer_program_manger_contract_for_logged_in_user = (\n        CustomerProgramManagerContract.objects.filter(\n            contract__employee=employee, can_give_manager_role=True\n        ).distinct(\"contract__customer\")\n    )\n    # get the list of customers the customer program manager is responsible for using the list_of_customer_program_manger_contract_for_logged_in_user",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer(\n    employee: Employee, customer: Customer\n):\n    return CustomerProgramExecutionManagerContract.objects.filter(\n        contract__employee=employee,\n        contract__is_active=True,\n        contract__customer=customer,\n    ).exists()\ndef get__list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts(\n    employee,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_time_account_manager_contracts__for__employee__where__employee_is_time_account_manager_and_can_create_time_account_manager_contracts(\n    employee,\n):\n    return TimeAccountManagerContract.objects.filter(\n        contract__employee=employee, can_give_manager_role=True\n    ).distinct(\"contract__customer\")\ndef create__time_account_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract(\n    user_code, customer, list_of_abilities, employee_creating_contract\n) -> TimeAccountManagerContract | None:\n    # check if there is an emplyee for that user code",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__time_account_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__time_account_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract(\n    user_code, customer, list_of_abilities, employee_creating_contract\n) -> TimeAccountManagerContract | None:\n    # check if there is an emplyee for that user code\n    if not check__employee__exists__for__user_code(user_code):\n        # create new employee for the user_code\n        create__employee__for__user_code(user_code)\n    # get the employee object for the user\n    employee = get__employee__for__user_code(user_code)\n    # check if the employee already has the role for the customer",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__employee_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__employee_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract(\n    user_code,\n    customer: Customer,\n    list_of_abilities,\n    employee_creating_contract: Employee,\n) -> EmployeeManagerContract | None:\n    # check if there is an emplyee for that user code\n    if not check__employee__exists__for__user_code(user_code):\n        # create new employee for the user_code\n        create__employee__for__user_code(user_code)",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_program_execution_manager_contracts__for__employee__where__employee_is_customer_program_execution_manager",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customer_program_execution_manager_contracts__for__employee__where__employee_is_customer_program_execution_manager(\n    employee: Employee, contract_state=\"active\"\n):\n    if contract_state == \"active\":\n        return CustomerProgramExecutionManagerContract.objects.filter(\n            contract__employee=employee, contract__is_active=True\n        ).distinct(\"contract__customer\")\n    elif contract_state == \"inactive\":\n        return CustomerProgramExecutionManagerContract.objects.filter(\n            contract__employee=employee, contract__is_active=False",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_program_manger_contracts__for__employee__where__employee_is_customer_program_manager",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customer_program_manger_contracts__for__employee__where__employee_is_customer_program_manager(\n    employee: Employee, contract_state=\"active\"\n):\n    if contract_state == \"active\":\n        return CustomerProgramManagerContract.objects.filter(\n            contract__employee=employee, contract__is_active=True\n        ).distinct(\"contract__customer\")\n    elif contract_state == \"inactive\":\n        return CustomerProgramManagerContract.objects.filter(\n            contract__employee=employee, contract__is_active=False",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer(\n    employee: Employee, filter_type: str = \"last20\"\n) -> list:\n    print(\"employee\", employee)\n    print(\"filter_type\", filter_type)\n    list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer = (\n        []\n    )\n    list_of_customer_program_execution_manager_contracts__for__employee = get__list_of_customer_program_execution_manager_contracts__for__employee__where__employee_is_customer_program_execution_manager(\n        employee",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__user__exists__for__user_code",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__user__exists__for__user_code(user_code) -> bool:\n    return User.objects.filter(user_code=user_code).exists()\n# Sets the employee contract as the given state\ndef set__employee_contract__is_active_state__for__employee_contract_id(\n    employee_contract_id, contract_state\n) -> EmployeeContract:\n    employee_contract = get__employee_contract__for__employee_contract_id(\n        employee_contract_id\n    )\n    employee_contract.is_active = contract_state",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__employee_contract__is_active_state__for__employee_contract_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set__employee_contract__is_active_state__for__employee_contract_id(\n    employee_contract_id, contract_state\n) -> EmployeeContract:\n    employee_contract = get__employee_contract__for__employee_contract_id(\n        employee_contract_id\n    )\n    employee_contract.is_active = contract_state\n    # If the contract is set to active, set the deactivation date to null\n    employee_contract.deactivation_date = None\n    employee_contract.save()",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__employee_contract_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee_contract__for__employee_contract_id(\n    employee_contract_id,\n) -> EmployeeContract:\n    employee_contract = EmployeeContract.objects.get(id=employee_contract_id)\n    return employee_contract\n# Sets the deactivation date of a employee contract for the given employee contract id\ndef set__employee_contract__deactivation_date__for__employee_contract_id(\n    employee_contract_id, deactivation_date\n) -> EmployeeContract:\n    employee_contract = EmployeeContract.objects.get(id=employee_contract_id)",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__employee_contract__deactivation_date__for__employee_contract_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set__employee_contract__deactivation_date__for__employee_contract_id(\n    employee_contract_id, deactivation_date\n) -> EmployeeContract:\n    employee_contract = EmployeeContract.objects.get(id=employee_contract_id)\n    employee_contract.deactivation_date = deactivation_date\n    employee_contract.save()\n    return employee_contract\n# Sets an employee contract as inactive for the given employee contract id\ndef set_employee_contract__as_inactive__for__employee_contract_id(\n    employee_contract_id,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set_employee_contract__as_inactive__for__employee_contract_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set_employee_contract__as_inactive__for__employee_contract_id(\n    employee_contract_id,\n) -> EmployeeContract:\n    # Gets the contract for the given employee contract id\n    employee_contract = EmployeeContract.objects.get(id=employee_contract_id)\n    # Sets the contract as inactive\n    employee_contract.is_active = False\n    # Sets the deactivation date to the current date\n    employee_contract.deactivation_date = timezone.now()\n    employee_contract.save()",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee__exists__for__user_code",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__employee__exists__for__user_code(user_code) -> bool:\n    return Employee.objects.filter(user__user_code=user_code).exists()\n# Creates and returns a new employee  for the given user code\ndef create__employee__for__user_code(user_code) -> Employee | None:\n    if not check__employee__exists__for__user_code(user_code):\n        # create new employee for the user_code\n        if not check__user__exists__for__user_code(user_code):\n            return None\n        user = User.objects.get(user_code=user_code)\n        return Employee.objects.create(user=user)",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__employee__for__user_code",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__employee__for__user_code(user_code) -> Employee | None:\n    if not check__employee__exists__for__user_code(user_code):\n        # create new employee for the user_code\n        if not check__user__exists__for__user_code(user_code):\n            return None\n        user = User.objects.get(user_code=user_code)\n        return Employee.objects.create(user=user)\n    return Employee.objects.get(user__user_code=user_code)\ndef check__employee_contract__exists__for__employee__and__customer(\n    employee: Employee, cutomer: Customer",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_contract__exists__for__employee__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__employee_contract__exists__for__employee__and__customer(\n    employee: Employee, cutomer: Customer\n) -> bool:\n    return EmployeeContract.objects.filter(employee=employee, customer=cutomer).exists()\ndef get__employee_contract__for__employee_and_customer(\n    employee: Employee, customer: Customer\n) -> EmployeeContract | None:\n    # Check if the employee contract exists\n    if not check__employee_contract__exists__for__employee__and__customer(\n        employee, customer",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__employee_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee_contract__for__employee_and_customer(\n    employee: Employee, customer: Customer\n) -> EmployeeContract | None:\n    # Check if the employee contract exists\n    if not check__employee_contract__exists__for__employee__and__customer(\n        employee, customer\n    ):\n        return create__employee_contract__for__employee_and__customer(\n            employee, customer\n        )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__employee_contract__for__employee_and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__employee_contract__for__employee_and__customer(\n    employee, customer\n) -> EmployeeContract:\n    return EmployeeContract.objects.create(\n        employee=employee,\n        customer=customer,\n    )\n# Returns the customer for the given customer id, the check if the customer exists is not done here and should be done before\ndef get__customer__for__customer_id(customer_id) -> Customer | None:\n    try:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer__for__customer_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer__for__customer_id(customer_id) -> Customer | None:\n    try:\n        return Customer.objects.get(id=customer_id)\n    except:\n        return None\n# checks if a TimeAccountManagerContract exists for the given employee\ndef check__time_account_manager_contract__exists__for__employee_and_customer(\n    employee, customer\n) -> bool:\n    return TimeAccountManagerContract.objects.filter(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__time_account_manager_contract__exists__for__employee_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__time_account_manager_contract__exists__for__employee_and_customer(\n    employee, customer\n) -> bool:\n    return TimeAccountManagerContract.objects.filter(\n        contract__employee=employee, contract__customer=customer\n    ).exists()\ndef get__list_of_customer_program_execution_manager_contract__for__employee(\n    employee: Employee,\n) -> List[CustomerProgramExecutionManagerContract]:\n    return CustomerProgramExecutionManagerContract.objects.filter(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_program_execution_manager_contract__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customer_program_execution_manager_contract__for__employee(\n    employee: Employee,\n) -> List[CustomerProgramExecutionManagerContract]:\n    return CustomerProgramExecutionManagerContract.objects.filter(\n        contract__employee=employee,\n        can_give_manager_role=True,\n    ).distinct(\"contract__customer\")\ndef get__customer_program_manager_contract__for__employee_and_customer(\n    employee: Employee, customer: Customer\n) -> CustomerProgramManagerContract:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_manager_contract__for__employee_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer_program_manager_contract__for__employee_and_customer(\n    employee: Employee, customer: Customer\n) -> CustomerProgramManagerContract:\n    # check if there is a customer program manager contract for the given employee and customer\n    # if there is no contract create one\n    if not check__customer_program_manager_contract__exists__for__employee_and_customer(\n        employee=employee, customer=customer\n    ):\n        return create__customer_program_manager_contract__for__employee_and__customer(\n            employee=employee, customer=customer",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_abilties__for__customer_program_manager_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_abilties__for__customer_program_manager_contract(\n    customer_program_manager_contract: CustomerProgramManagerContract,\n) -> List[str]:\n    # get the abilities of the customer program manager contract\n    # the returned abilities are a dictionary with the ability names as keys and the ability values as values\n    abilities = customer_program_manager_contract.get_abilities()\n    # create a list of the ability names that are set to true\n    list_of_abilities = []\n    for ability in abilities:\n        if abilities[ability]:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_abilities__for__list_of_selected_abilities_and_list_of_possible_abilities_the_employee_can_give",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_abilities__for__list_of_selected_abilities_and_list_of_possible_abilities_the_employee_can_give(\n    list_of_selected_abilities: List[str], list_of_possible_abilities: List[str]\n) -> List[str]:\n    # create a list of the abilities that the employee can give\n    # the abilities that the employee can give are the ones that are in the selected abilities\n    # and the ones that are in the possible abilities\n    list_of_abilities = []\n    for ability in list_of_selected_abilities:\n        if ability in list_of_possible_abilities:\n            list_of_abilities.append(ability)",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__list_of_abilities__for__customer_program_manager_contract_according_to_list_of_abilities",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set__list_of_abilities__for__customer_program_manager_contract_according_to_list_of_abilities(\n    customer_program_manager_contract: CustomerProgramManagerContract,\n    list_of_abilities: List[str],\n) -> None:\n    for ability in list_of_abilities:\n        # check if the employee already has the ability\n        if ability == \"can_create_customer_program\":\n            # Set the ability for the CustomerProgramManagerContract object to the value of the ability\n            customer_program_manager_contract.can_create_customer_program = True\n        if ability == \"can_delete_customer_program\":",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_manager_contract__for__employee_and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__customer_program_manager_contract__for__employee_and__customer(\n    employee: Employee, customer: Customer\n) -> CustomerProgramManagerContract:\n    # create a new employee contract for the given employee and customer\n    employee_contract = get__employee_contract__for__employee_and_customer(\n        employee=employee, customer=customer\n    )\n    # create a new customer program manager contract for the given employee contract\n    return CustomerProgramManagerContract.objects.create(contract=employee_contract)\ndef check__customer_program_manager_contract__exists__for__employee_and_customer(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program_manager_contract__exists__for__employee_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__customer_program_manager_contract__exists__for__employee_and_customer(\n    employee: Employee, customer: Customer\n) -> bool:\n    return CustomerProgramManagerContract.objects.filter(\n        contract__employee=employee, contract__customer=customer\n    ).exists()\ndef get__list_of_customers_the_employee_has_a_customer_program_execution_manager_contract_with_and_can_create_such_a_contract(\n    employee: Employee,\n) -> List[Customer]:\n    # get the list of customers the customer program manager is responsible for",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_program_execution_manager_contract_with_and_can_create_such_a_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers_the_employee_has_a_customer_program_execution_manager_contract_with_and_can_create_such_a_contract(\n    employee: Employee,\n) -> List[Customer]:\n    # get the list of customers the customer program manager is responsible for\n    list_of_customer_program_execution_manager_contract = (\n        get__list_of_customer_program_execution_manager_contract__for__employee(\n            employee=employee\n        )\n    )\n    # get the list of customers the customer program manager is responsible for using the list_of_customer_program_execution_manager_contract",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_manager_contract__for__employee_and_customer_and_list_of_abilities_and_employee_with_customer_program_manager_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__customer_program_execution_manager_contract__for__employee_and_customer_and_list_of_abilities_and_employee_with_customer_program_manager_contract(\n    employee,\n    customer,\n    list_of_abilities,\n    employee_with_customer_program_manager_contract,\n) -> CustomerProgramExecutionManagerContract:\n    # check if the employee already has the role and if not create it\n    if not check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer(\n        employee, customer\n    ):",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee__for__user_code",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee__for__user_code(user_code) -> Employee | None:\n    employee = None\n    if not check__employee__exists__for__user_code(user_code):\n        # create new employee for the user_code\n        employee = create__employee__for__user_code(user_code)\n    if employee == None:\n        # get the employee object for the user\n        employee = Employee.objects.filter(user__user_code=user_code).first()\n    return employee\ndef check__employee_manager_contract__exists__for__employee_contract(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__exists__for__employee_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__employee_manager_contract__exists__for__employee_contract(\n    employee_contract,\n) -> bool:\n    return EmployeeManagerContract.objects.filter(contract=employee_contract).exists()\ndef check__more_then_one_contract_between__user_code__and__customer(\n    user_code, customer_id\n) -> bool:\n    return (\n        list(\n            EmployeeContract.objects.filter(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__more_then_one_contract_between__user_code__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__more_then_one_contract_between__user_code__and__customer(\n    user_code, customer_id\n) -> bool:\n    return (\n        list(\n            EmployeeContract.objects.filter(\n                employee__user__user_code=user_code, customer__id=customer_id\n            )\n        ).count()\n        > 1",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_manager_contract__for__employee_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__customer_program_execution_manager_contract__for__employee_contract(\n    employee_contract: EmployeeContract,\n) -> CustomerProgramExecutionManagerContract:\n    # Check if the employee contract is already a customer program execution manager contract\n    if check__customer_program_execution_manager_contract__exists__for__employee_contract(\n        employee_contract\n    ):\n        return CustomerProgramExecutionManagerContract.objects.get(\n            contract=employee_contract\n        )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program_execution_manager_contract__exists__for__employee_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__customer_program_execution_manager_contract__exists__for__employee_contract(\n    employee_contract: EmployeeContract,\n) -> bool:\n    return CustomerProgramExecutionManagerContract.objects.filter(\n        contract=employee_contract\n    ).exists()\ndef get__active_employee_contract__for__employee__and__customer(\n    employee: Employee, customer: Customer\n) -> EmployeeContract:\n    # Check if the employee has a contract with the customer",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__active_employee_contract__for__employee__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__active_employee_contract__for__employee__and__customer(\n    employee: Employee, customer: Customer\n) -> EmployeeContract:\n    # Check if the employee has a contract with the customer\n    if not check__employee_contract__exists__for__employee__and__customer(\n        employee, customer\n    ):\n        return create__employee_contract__for__employee_and__customer(\n            employee, customer\n        )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__employee__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee_contract__for__employee__and__customer(\n    employee: Employee, customer: Customer\n) -> EmployeeContract:\n    # Check if the employee has a contract with the customer\n    if not check__employee_contract__exists__for__employee__and__customer(\n        employee, customer\n    ):\n        return create__employee_contract__for__employee_and__customer(\n            employee, customer\n        )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_manager_contract__for__employee_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee_manager_contract__for__employee_contract(\n    employee_contract,\n) -> EmployeeManagerContract:\n    # Check if the employee has an employee manager contract with the customer\n    if not check__employee_manager_contract__exists__for__employee_contract(\n        employee_contract\n    ):\n        return EmployeeManagerContract.objects.create(contract=employee_contract)\n    else:\n        return EmployeeManagerContract.objects.get(contract=employee_contract)",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_manager_contract__for__user_code__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee_manager_contract__for__user_code__and__customer(\n    user_code, customer_id\n) -> EmployeeManagerContract:\n    employee = get__employee__for__user_code(user_code)\n    employee_contract = get__employee_contract__for__employee__and__customer(\n        employee, customer_id\n    )\n    return get__employee_manager_contract__for__employee_contract(employee_contract)\ndef check__employee_manager_contract__for__user__can_deactivate__employee_contracts(\n    user,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__for__user__can_deactivate__employee_contracts",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__employee_manager_contract__for__user__can_deactivate__employee_contracts(\n    user,\n) -> bool:\n    return EmployeeManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n        can_delete_employee=True,\n    ).exists()\ndef check__employee_manager_contract__for__user__can_give_manager_role(\n    user,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__for__user__can_give_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__employee_manager_contract__for__user__can_give_manager_role(\n    user,\n) -> bool:\n    return EmployeeManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n        can_give_manager_role=True,\n    ).exists()\ndef check__customer__exists__for__customer_id(customer_id) -> bool:\n    return Customer.objects.filter(id=customer_id).exists()",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer__exists__for__customer_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__customer__exists__for__customer_id(customer_id) -> bool:\n    return Customer.objects.filter(id=customer_id).exists()\ndef get__employee_contract__for__user_code__and__customer(\n    user_code, customer\n) -> EmployeeContract:\n    employee = get__employee__for__user_code(user_code)\n    employee_contract = get__employee_contract__for__employee__and__customer(\n        employee, customer\n    )\n    return employee_contract",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee_contract__for__user_code__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee_contract__for__user_code__and__customer(\n    user_code, customer\n) -> EmployeeContract:\n    employee = get__employee__for__user_code(user_code)\n    employee_contract = get__employee_contract__for__employee__and__customer(\n        employee, customer\n    )\n    return employee_contract\ndef get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user(\n    user,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user(\n    user,\n):\n    customers__and__employees__for__employee_manager_contract__for__user = []\n    # get all the customers the employee has contracts with and is an employee manager for\n    # Do not use employee.employeemanager.list_of_customers_the_manager_is_responsible_for.all()!\n    # Instead look at the contracts the employee has and get the customers from the contracts\n    # This is because the employee manager will be deprecated in the future\n    # Only list a customer once\n    list_of_customers_the_employee_has_an_employee_manager_contract_with = (",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_employee_manager_contracts_that_can_add_new_employees__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_employee_manager_contracts_that_can_add_new_employees__for__user(\n    user,\n) -> List[EmployeeManagerContract]:\n    return EmployeeManagerContract.objects.filter(\n        contract__employee=user.employee, can_add_new_employee=True\n    ).distinct(\"contract__customer\")\ndef get__list_of_employee_manager_contracts__for__user(\n    user,\n) -> List[EmployeeManagerContract]:\n    return EmployeeManagerContract.objects.filter(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_employee_manager_contracts__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_employee_manager_contracts__for__user(\n    user,\n) -> List[EmployeeManagerContract]:\n    return EmployeeManagerContract.objects.filter(\n        contract__employee=user.employee,\n    ).distinct(\"contract__customer\")\ndef get__list_of_customers__for__employee_manager_contract__that_can_add_employees__for__user(\n    user,\n) -> List[Customer]:\n    list_of_employee_manager_contracts = (",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_manager_contract__that_can_add_employees__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers__for__employee_manager_contract__that_can_add_employees__for__user(\n    user,\n) -> List[Customer]:\n    list_of_employee_manager_contracts = (\n        get__list_of_employee_manager_contracts_that_can_add_new_employees__for__user(\n            user\n        )\n    )\n    # get the list of customers the employee manager is responsible for using the list_of_employee_manager_contracts\n    return get__list_of_customers__for__list_of_employee_manager_contracts(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_manager_contract__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers__for__employee_manager_contract__for__user(\n    user,\n) -> List[Customer]:\n    list_of_employee_manager_contracts = (\n        get__list_of_employee_manager_contracts__for__user(user)\n    )\n    # get the list of customers the employee manager is responsible for using the list_of_employee_manager_contracts\n    return get__list_of_customers__for__list_of_employee_manager_contracts(\n        list_of_employee_manager_contracts\n    )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__employee_manager_contract__that_can_give_the_role__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers__for__employee_manager_contract__that_can_give_the_role__for__user(\n    user,\n) -> List[Customer]:\n    list_of_employee_manager_contract_for_logged_in_user = (\n        EmployeeManagerContract.objects.filter(\n            contract__employee=user.employee, can_give_manager_role=True\n        ).distinct(\"contract__customer\")\n    )\n    # get the list of customers the employee manager is responsible for using the list_of_employee_manager_contract_for_logged_in_user\n    return get__list_of_customers__for__list_of_employee_manager_contracts(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers__for__list_of_employee_manager_contracts",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers__for__list_of_employee_manager_contracts(\n    list_of_employee_manager_contracts: List[EmployeeManagerContract],\n) -> List[Customer]:\n    # get the list of customers the employee manager is responsible for using the list_of_employee_manager_contract_for_logged_in_user\n    list_of_customers__for__employee_manager_contract = []\n    for contract in list_of_employee_manager_contracts:\n        list_of_customers__for__employee_manager_contract.append(\n            contract.contract.customer\n        )\n    # order customers by created_at",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_employee_manager_contract__with__given_abitly__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_employee_manager_contract__with__given_abitly__for__user(\n    user, ability\n) -> List[EmployeeManagerContract]:\n    return EmployeeManagerContract.objects.filter(\n        contract__employee=user.employee, **{ability: True}\n    ).distinct(\"contract__customer\")\ndef check__employee_manager_contract__exists__for__employee_manager_and_customer__and__can_add_users__and__is_active(\n    employee_manager: Employee, customer: Customer\n) -> bool:\n    return EmployeeManagerContract.objects.filter(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__employee_manager_contract__exists__for__employee_manager_and_customer__and__can_add_users__and__is_active",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__employee_manager_contract__exists__for__employee_manager_and_customer__and__can_add_users__and__is_active(\n    employee_manager: Employee, customer: Customer\n) -> bool:\n    return EmployeeManagerContract.objects.filter(\n        contract__employee=employee_manager,\n        contract__customer=customer,\n        contract__is_active=True,\n        can_add_new_employee=True,\n    ).exists()\ndef get__employee__for__user(user) -> Employee:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee__for__user(user) -> Employee:\n    return Employee.objects.get(user=user)\ndef get__price_per_hour__for__total_time_saved(total_time_saved: Decimal) -> Decimal:\n    # print(\"total_time_saved\", total_time_saved)\n    price_per_hour = 0\n    points = get__price_list()\n    for time in points:\n        if total_time_saved >= time:\n            # If the time saved is greater than the time of the next point, the price of the last point before will be used\n            price_per_hour = points[time]",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__price_per_hour__for__total_time_saved",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__price_per_hour__for__total_time_saved(total_time_saved: Decimal) -> Decimal:\n    # print(\"total_time_saved\", total_time_saved)\n    price_per_hour = 0\n    points = get__price_list()\n    for time in points:\n        if total_time_saved >= time:\n            # If the time saved is greater than the time of the next point, the price of the last point before will be used\n            price_per_hour = points[time]\n        else:\n            break",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__price_list",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__price_list() -> dict:\n    # Define\tpoints for the graph\n    # The time saved starts at 0 seconds and increases with each point\n    # The price starts at 230 and decreases with each point untill it reaches 30\n    return {  # time: price\n        0: 230,\n        1: 230,\n        2: 230,\n        3: 230,\n        4: 230,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__new_price_per_second__for__customer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__new_price_per_second__for__customer_program(\n    customer_program: CustomerProgram,\n) -> Decimal:\n    # print(\"Kommt bis hier hin\")\n    # Get the current amount of time saved by the program belonging to the customer program execution (in hours) check what the price should be\n    # Get all the customer program executions belonging to the program of the customer program execution\n    total_time_saved_program_executions_in_seconds = (\n        get__total_time_saved__for__customer_program(customer_program)\n    )\n    \"\"\"     print(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections(\n    list_of_customer_program_executions: QuerySet,\n) -> int:\n    from django.db.models import Sum\n    total_time_saved_in_seconds = list_of_customer_program_executions.aggregate(\n        Sum(\"program_time_saved_in_seconds\")\n    )[\"program_time_saved_in_seconds__sum\"]\n    if total_time_saved_in_seconds == None:\n        total_time_saved_in_seconds = 0\n    return total_time_saved_in_seconds",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__sum_of_price_for_execution__for__list_of_customer_program_exections",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__sum_of_price_for_execution__for__list_of_customer_program_exections(\n    list_of_customer_program_executions,\n) -> Decimal:\n    from django.db.models import Sum\n    # print(\"list_of_customer_program_executions\", list_of_customer_program_executions)\n    return list_of_customer_program_executions.aggregate(Sum(\"price_for_execution\"))[\n        \"price_for_execution__sum\"\n    ]\n# Returns the currently active TimeAccountManagerContracts for the user or None if there is no active one\ndef get__active_TimeAccountManagerContracts__for__employee(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__active_TimeAccountManagerContracts__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__active_TimeAccountManagerContracts__for__employee(\n    employee: Employee,\n) -> QuerySet:\n    # Get all the time account manager contracts of the user\n    # This funcion retuns a QuerySet of all the TimeAccountManagerContracts of the user\n    # The QuerySet is not evaluated until it is used\n    # To now get the acive TimeAccountManagerContracts, apply the filter function to the QuerySet\n    time_account_manager_contracts = get__TimeAccountMangerContracts__for__employee(\n        employee\n    )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__TimeAccountMangerContracts__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__TimeAccountMangerContracts__for__employee(employee: Employee) -> QuerySet:\n    # Get all the time account manager contracts of the user\n    time_account_manager_contracts = TimeAccountManagerContract.objects.filter(\n        contract__employee=employee,\n    )\n    return time_account_manager_contracts\ndef get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee(\n    employee: Employee,\n) -> dict:\n    # get all the customer time accounts the user has access to",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee(\n    employee: Employee,\n) -> dict:\n    # get all the customer time accounts the user has access to\n    list_of_TimeAccountMangerContracts = (\n        get__active_TimeAccountManagerContracts__for__employee(employee)\n    )\n    list_of_customer_time_accounts = (\n        get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts(\n            list_of_TimeAccountMangerContracts",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__all_active_NadooitApiKey__for__user_to_inactive",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set__all_active_NadooitApiKey__for__user_to_inactive(user: User) -> None:\n    # Get all the active NadooitApiKey of the user\n    list_of_active_NadooitApiKey = get__list_of_all_NadooitApiKey__for__user(\n        user, is_active=True\n    )\n    # Set all the active NadooitApiKey to inactive\n    for active_NadooitApiKey in list_of_active_NadooitApiKey:\n        active_NadooitApiKey.is_active = False\n        active_NadooitApiKey.save()\ndef get__list_of_all_NadooitApiKey__for__user(user: User, is_active=True) -> QuerySet:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_all_NadooitApiKey__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_all_NadooitApiKey__for__user(user: User, is_active=True) -> QuerySet:\n    return NadooitApiKey.objects.filter(user=user, is_active=is_active)\n# Creates a new NADOO API key for the user and returns it. Optionally a uuid that is used as the api key can be passed\ndef create__NadooitApiKey__for__user(\n    user: User, api_key_uuid: uuid = None\n) -> NadooitApiKey:\n    if api_key_uuid == None:\n        api_key_uuid = uuid.uuid4()\n    new_api_key = NadooitApiKey.objects.create(\n        api_key=api_key_uuid,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__NadooitApiKey__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__NadooitApiKey__for__user(\n    user: User, api_key_uuid: uuid = None\n) -> NadooitApiKey:\n    if api_key_uuid == None:\n        api_key_uuid = uuid.uuid4()\n    new_api_key = NadooitApiKey.objects.create(\n        api_key=api_key_uuid,\n        user=user,\n        is_active=True,\n    )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__list_of_customer_time_accounts",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__list_of_customer_time_accounts(\n    list_of_customer_time_accounts: list,\n) -> dict:\n    customer_time_accounts_grouped_by_customer = {}\n    for customer_time_account in list_of_customer_time_accounts:\n        if customer_time_account.customer in customer_time_accounts_grouped_by_customer:\n            customer_time_accounts_grouped_by_customer[customer_time_account.customer][\n                \"customer_time_accounts\"\n            ].append(customer_time_account)\n            customer_time_accounts_grouped_by_customer[customer_time_account.customer][",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts(\n    list_of_TimeAccountMangerContracts: list,\n) -> QuerySet:\n    customers_the_user_works_for_as_timeaccountmanager = []\n    for contract in list_of_TimeAccountMangerContracts:\n        customers_the_user_works_for_as_timeaccountmanager.append(\n            contract.contract.customer\n        )\n    list_of_customer_time_accounts = CustomerTimeAccount.objects.filter(\n        customer__in=customers_the_user_works_for_as_timeaccountmanager",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__customer_program__time_account__for__customer_program_execution",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set__customer_program__time_account__for__customer_program_execution(\n    customer_program_execution: CustomerProgramExecution,\n) -> None:\n    # Get the time account of the customer program\n    time_account = customer_program_execution.customer_program.time_account\n    # Get the time saved by the program execution\n    time_saved_in_seconds = customer_program_execution.program_time_saved_in_seconds\n    # Reduce the time account by the time saved by the program execution\n    reduce__time_account__by__time_in_seconds(time_account, time_saved_in_seconds)\ndef reduce__time_account__by__time_in_seconds(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "reduce__time_account__by__time_in_seconds",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def reduce__time_account__by__time_in_seconds(\n    time_account: TimeAccount, time_in_seconds: int\n) -> None:\n    # First check if the time account has enough time to pay for the execution\n    if time_account.time_balance_in_seconds >= time_in_seconds:\n        # If the time account has enough time, the time saved by the execution will be subtracted from the time account\n        time_account.time_balance_in_seconds -= time_in_seconds\n    else:\n        # If the time account does not have enough time, the time account will be set to 0\n        time_account.time_balance_in_seconds = 0",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__price_for_new_customer_program_execution__for__cutomer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__price_for_new_customer_program_execution__for__cutomer_program(\n    customer_program: CustomerProgram,\n):\n    print(\"get__price_for_new_customer_program_execution__for__cutomer_program\")\n    # The price for a program execution is calculated each time a new execution is added to the program\n    # First it is checked if there is currently time allocated to the program already\n    # If there is, the price for the exectution is 0 since the time is already paid for\n    # If there is only partially enough time allocated to the program, the time not covered by the time allocated is calculated and the price for that time is calculated\n    # If there is no time allocated to the program, the price for the execution is calculated based on the total time saved by all execution\n    time_not_accounted_for_by_balance_on_time_accout_asociated_with_customer_program = 0",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution__for__customer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__customer_program_execution__for__customer_program(\n    customer_program: CustomerProgram,\n) -> CustomerProgramExecution:\n    print(\"create__customer_program_execution__for__customer_program\")\n    # Create a new customer program execution with the current price for an execution\n    customer_program_execution = CustomerProgramExecution.objects.create(\n        customer_program=customer_program,\n        program_time_saved_in_seconds=customer_program.program_time_saved_per_execution_in_seconds,\n        price_for_execution=get__price_for_new_customer_program_execution__for__cutomer_program(\n            customer_program",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__new_price_per_second__for__customer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set__new_price_per_second__for__customer_program(\n    customer_program: CustomerProgram,\n):\n    customer_program.price_per_second = (\n        get__new_price_per_second__for__customer_program(customer_program)\n    )\n    customer_program.save()\ndef get__next_customer_program_execution_price__for__customer_program_execution(\n    customer_program_execution: CustomerProgramExecution,\n):",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__next_customer_program_execution_price__for__customer_program_execution",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__next_customer_program_execution_price__for__customer_program_execution(\n    customer_program_execution: CustomerProgramExecution,\n):\n    pass\ndef get__total_time_saved__for__customer_program(\n    customer_program: CustomerProgram,\n) -> Decimal:\n    from django.db.models import Q\n    return get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections(\n        CustomerProgramExecution.objects.filter(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__total_time_saved__for__customer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__total_time_saved__for__customer_program(\n    customer_program: CustomerProgram,\n) -> Decimal:\n    from django.db.models import Q\n    return get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections(\n        CustomerProgramExecution.objects.filter(\n            Q(customer_program=customer_program) & Q(payment_status=\"PAID\")\n            | Q(payment_status=\"NOT_PAID\")\n        )\n    )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__next_price_level__for__customer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__next_price_level__for__customer_program(\n    customer_program: CustomerProgram,\n) -> str:\n    totat_time_saved = get__total_time_saved__for__customer_program(customer_program)\n    # get the list of price levels\n    list_of_price_levels = get__price_list()\n    # get the price level for the total time saved\n    currnet_price_level = get__price_per_hour__for__total_time_saved(totat_time_saved)\n    # find the position in the list of price levels for the current price level and return the next price level\n    for price_level in list_of_price_levels:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__nadooit_api_key__for__hashed_api_key",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__nadooit_api_key__for__hashed_api_key(hashed_api_key) -> str:\n    return NadooitApiKey.objects.get(api_key=hashed_api_key)\ndef get__hashed_api_key__for__request(request) -> str | None:\n    \"\"\"\n    gets the hashed api key from the request\n    \"\"\"\n    # gets the api key from the request\n    api_key = request.data.get(\"NADOOIT__API_KEY\")\n    # hashes the api key\n    hashed_api_key = hashlib.sha256(api_key.encode()).hexdigest()",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__hashed_api_key__for__request",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__hashed_api_key__for__request(request) -> str | None:\n    \"\"\"\n    gets the hashed api key from the request\n    \"\"\"\n    # gets the api key from the request\n    api_key = request.data.get(\"NADOOIT__API_KEY\")\n    # hashes the api key\n    hashed_api_key = hashlib.sha256(api_key.encode()).hexdigest()\n    return hashed_api_key\ndef check__nadooit_api_key__has__is_active(hashed_api_key) -> bool:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__nadooit_api_key__has__is_active",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__nadooit_api_key__has__is_active(hashed_api_key) -> bool:\n    print(\"check__nadooit_api_key__has__is_active\")\n    return NadooitApiKey.objects.filter(api_key=hashed_api_key, is_active=True).exists()\ndef get__user_code__for__nadooit_api_key(nadooit_api_key) -> str:\n    return nadooit_api_key.user.user_code\ndef get__customer__for__customer_program_execution_id(\n    customer_program_execution_id,\n) -> Customer | None:\n    customer_program_execution = (\n        get__customer_program_execution__for__customer_program_execution_id(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__user_code__for__nadooit_api_key",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__user_code__for__nadooit_api_key(nadooit_api_key) -> str:\n    return nadooit_api_key.user.user_code\ndef get__customer__for__customer_program_execution_id(\n    customer_program_execution_id,\n) -> Customer | None:\n    customer_program_execution = (\n        get__customer_program_execution__for__customer_program_execution_id(\n            customer_program_execution_id\n        )\n    )",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer__for__customer_program_execution_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer__for__customer_program_execution_id(\n    customer_program_execution_id,\n) -> Customer | None:\n    customer_program_execution = (\n        get__customer_program_execution__for__customer_program_execution_id(\n            customer_program_execution_id\n        )\n    )\n    print(\"customer_program_execution\", customer_program_execution)\n    if customer_program_execution is not None:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__customer_program_execution__exists__for__customer_program_execution_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__customer_program_execution__exists__for__customer_program_execution_id(\n    customer_program_execution_id,\n) -> bool:\n    return CustomerProgramExecution.objects.filter(\n        id=customer_program_execution_id\n    ).exists()\ndef get__customer_program_execution__for__customer_program_execution_id(\n    customer_program_execution_id,\n) -> CustomerProgramExecution | None:\n    return CustomerProgramExecution.objects.filter(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__customer_program_execution__for__customer_program_execution_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__customer_program_execution__for__customer_program_execution_id(\n    customer_program_execution_id,\n) -> CustomerProgramExecution | None:\n    return CustomerProgramExecution.objects.filter(\n        id=customer_program_execution_id\n    ).first()\ndef set__payment_status__for__customer_program_execution(\n    customer_program_execution: CustomerProgramExecution,\n    payment_status: str,\n):",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "set__payment_status__for__customer_program_execution",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def set__payment_status__for__customer_program_execution(\n    customer_program_execution: CustomerProgramExecution,\n    payment_status: str,\n):\n    customer_program_execution.payment_status = payment_status\n    customer_program_execution.save()\ndef get__payment_status__for__customer_program_execution(\n    customer_program_execution: CustomerProgramExecution,\n) -> str:\n    return customer_program_execution.payment_status",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__payment_status__for__customer_program_execution",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__payment_status__for__customer_program_execution(\n    customer_program_execution: CustomerProgramExecution,\n) -> str:\n    return customer_program_execution.payment_status\ndef create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee(\n    customer_program_execution: CustomerProgramExecution,\n    complaint: str,\n    employee: Employee,\n) -> Complaint | None:\n    try:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee(\n    customer_program_execution: CustomerProgramExecution,\n    complaint: str,\n    employee: Employee,\n) -> Complaint | None:\n    try:\n        complaint = Complaint.objects.create(\n            customer_program_execution=customer_program_execution,\n            complaint=complaint,\n            customer_program_execution_manager=employee,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_customers_the_employee_has_a_customer_program_manager_contract_with_and_can_create_such_a_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_customers_the_employee_has_a_customer_program_manager_contract_with_and_can_create_such_a_contract(\n    employee: Employee,\n) -> list[Customer]:\n    list_of_customers_the_manager_is_responsible_for = []\n    # order by updated_at\n    list_of_employee_manager_contract_for_logged_in_user = (\n        CustomerProgramManagerContract.objects.filter(\n            contract__employee=employee,\n            can_give_manager_role=True,\n        ).distinct(\"contract__customer\")",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__employee__for__employee_id",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__employee__for__employee_id(employee_id) -> Employee | None:\n    return Employee.objects.filter(id=employee_id).first()\ndef get__csv__for__list_of_customer_program_executions(\n    list_of_customer_program_executions: list[CustomerProgramExecution],\n) -> HttpResponse:\n    response = HttpResponse(content_type=\"text/csv\")\n    response[\"Content-Disposition\"] = 'attachment; filename=\"transactions.csv\"'\n    writer = csv.writer(response)\n    # write the header\n    writer.writerow([\"id\", \"Programmname\", \"erspaarte Zeit\", \"Preis\", \"Erstellt\"])",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__csv__for__list_of_customer_program_executions",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__csv__for__list_of_customer_program_executions(\n    list_of_customer_program_executions: list[CustomerProgramExecution],\n) -> HttpResponse:\n    response = HttpResponse(content_type=\"text/csv\")\n    response[\"Content-Disposition\"] = 'attachment; filename=\"transactions.csv\"'\n    writer = csv.writer(response)\n    # write the header\n    writer.writerow([\"id\", \"Programmname\", \"erspaarte Zeit\", \"Preis\", \"Erstellt\"])\n    for transaction in list_of_customer_program_executions:\n        writer.writerow(",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "check__user_is_allowed_to_add_new_key",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def check__user_is_allowed_to_add_new_key(user: User) -> bool:\n    # user is superuser\n    if user.is_superuser:\n        return True\n    # user is not superuser\n    else:\n        return False\ndef get__user_info__for__user(user: User) -> dict:\n    return {\n        \"user_code\": user.user_code,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__user_info__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__user_info__for__user(user: User) -> dict:\n    return {\n        \"user_code\": user.user_code,\n        \"display_name\": user.display_name,\n    }\n\"\"\" \ndef get__list_of_manager_contracts__for__employee(employee: Employee):\n    # This function returns a list of all *_manager_contracts the employee has.\n    # This function needs to be updated if a new *_manager_contract is added.\n    list_of_manager_contracts = []",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_manager_contracts__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_manager_contracts__for__employee(employee: Employee):\n    # This function returns a list of all *_manager_contracts the employee has.\n    # This function needs to be updated if a new *_manager_contract is added.\n    list_of_manager_contracts = []\n    # get all employee contracts for the employee\n    list_of_employee_contracts = EmployeeContract.objects.filter(\n        employee=employee\n    ).order_by(\"created_at\")\n    # for each employee contract get all the manager contracts\n    for employee_contract in list_of_employee_contracts:",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "get__list_of_manager_contracts__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "def get__list_of_manager_contracts__for__employee(employee: Employee):\n    \"\"\"\n    results in the following structure:\n        [\n            {\n                'employee_contract': <EmployeeContract: Angestelltenvertrag zwischen: NADOOIT Christoph Backhaus - Christoph Backhaus IT>,\n                'list_of_manager_contracts':\n                [\n                    {\n                    'manager_contract': <EmployeeManagerContract: Angestelltenverwaltervertrag zwischen: NADOOIT Christoph Backhaus - Christoph Backhaus IT>,",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.nadooit_os.services",
        "description": "app.nadooit_os.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get__not_paid_customer_program_executions__for__filter_type_and_customer(\n    filter_type, customer\n):\n    customer_program_executions = (\n        get__customer_program_executions__for__filter_type_and_customer(\n            filter_type, customer\n        ).filter(payment_status=\"NOT_PAID\")\n    )\n    return customer_program_executions",
        "detail": "app.nadooit_os.services",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def user():\n    return User.objects.create(\n        username=\"test\",\n        display_name=\"test\",\n    )\n@pytest.fixture\ndef customer_program_execution():\n    return baker.make(\"nadooit_api_executions_system.CustomerProgramExecution\")\n@pytest.fixture()\ndef employee_with_active_TimeAccountManagerContract():",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "customer_program_execution",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def customer_program_execution():\n    return baker.make(\"nadooit_api_executions_system.CustomerProgramExecution\")\n@pytest.fixture()\ndef employee_with_active_TimeAccountManagerContract():\n    employee = baker.make(\"nadooit_hr.Employee\")\n    employeecontract = baker.make(\"nadooit_hr.EmployeeContract\", employee=employee)\n    baker.make(\n        \"nadooit_hr.TimeAccountManagerContract\",\n        contract=employeecontract,\n        can_give_manager_role=True,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "employee_with_active_TimeAccountManagerContract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def employee_with_active_TimeAccountManagerContract():\n    employee = baker.make(\"nadooit_hr.Employee\")\n    employeecontract = baker.make(\"nadooit_hr.EmployeeContract\", employee=employee)\n    baker.make(\n        \"nadooit_hr.TimeAccountManagerContract\",\n        contract=employeecontract,\n        can_give_manager_role=True,\n        can_delete_time_accounts=True,\n        can_create_time_accounts=True,\n    )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "customer_with_customer_program_execution",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def customer_with_customer_program_execution():\n    customer = baker.make(\"nadooit_crm.Customer\", name=\"Customer 1\")\n    customerprogram = baker.make(\n        \"nadooit_program_ownership_system.CustomerProgram\", customer=customer\n    )\n    customerprogramexecution = baker.make(\n        \"nadooit_api_executions_system.CustomerProgramExecution\",\n        customer_program=customerprogram,\n    )\n    return customer",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "employee_with_active_CustomerProgramExecutionManagerContract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def employee_with_active_CustomerProgramExecutionManagerContract():\n    employee = baker.make(\"nadooit_hr.Employee\")\n    employeecontract = baker.make(\"nadooit_hr.EmployeeContract\", employee=employee)\n    baker.make(\n        \"nadooit_hr.CustomerProgramExecutionManagerContract\",\n        contract=employeecontract,\n        can_give_manager_role=True,\n        can_delete_customer_program_execution=True,\n        can_create_customer_program_execution=True,\n    )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def customer():\n    return baker.make(\"nadooit_crm.Customer\", name=\"Customer 1\")\n@pytest.fixture()\ndef employee_with_active_TimeAccountManagerContract_and_also_managing_time_accounts_with_a_balance():\n    employee = baker.make(\n        \"nadooit_hr.Employee\",\n        user=baker.make(\"nadooit_auth.User\", is_active=True, user_code=\"TEST01\"),\n    )\n    for i in range(5):\n        customer = baker.make(\"nadooit_crm.Customer\", name=f\"Customer {i}\")",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "employee_with_active_TimeAccountManagerContract_and_also_managing_time_accounts_with_a_balance",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def employee_with_active_TimeAccountManagerContract_and_also_managing_time_accounts_with_a_balance():\n    employee = baker.make(\n        \"nadooit_hr.Employee\",\n        user=baker.make(\"nadooit_auth.User\", is_active=True, user_code=\"TEST01\"),\n    )\n    for i in range(5):\n        customer = baker.make(\"nadooit_crm.Customer\", name=f\"Customer {i}\")\n        employeecontract = baker.make(\n            \"nadooit_hr.EmployeeContract\", employee=employee, customer=customer\n        )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "list_of_TimeAccountMangerContracts__without_CustomerTimeAccounts",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def list_of_TimeAccountMangerContracts__without_CustomerTimeAccounts():\n    list_of_TimeAccountMangerContracts = []\n    for i in range(5):\n        employee = baker.make(\"nadooit_hr.Employee\")\n        employeecontract = baker.make(\"nadooit_hr.EmployeeContract\", employee=employee)\n        TimeAccountMangerContract = baker.make(\n            \"nadooit_hr.TimeAccountManagerContract\",\n            contract=employeecontract,\n            can_give_manager_role=True,\n            can_delete_time_accounts=True,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "employee_with_active_TimeAccountManagerContract_and_the_right_to_create_time_account_manager_contracts",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def employee_with_active_TimeAccountManagerContract_and_the_right_to_create_time_account_manager_contracts():\n    employee = baker.make(\n        \"nadooit_hr.Employee\",\n        user=baker.make(\n            \"nadooit_auth.User\",\n            is_active=True,\n            user_code=\"TEST01\",\n            display_name=\"Test Employee\",\n        ),\n    )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "get__utc_datetime_for_first_of_last_month",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def get__utc_datetime_for_first_of_last_month():\n    import pytz\n    utc = pytz.utc\n    now_but_a_month_ago = None\n    if datetime.utcnow().month == 1:\n        now_but_a_month_ago = utc.localize(\n            datetime.utcnow().replace(month=12, day=1, year=datetime.utcnow().year - 1)\n        )\n    else:\n        now_but_a_month_ago = utc.localize(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "customer_program_executions",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def customer_program_executions():\n    test_customer = baker.make(Customer, name=\"Test Customer\")\n    customer_program = CustomerProgram.objects.create(\n        customer=test_customer,\n        program=Program.objects.create(\n            name=\"test\",\n            description=\"test\",\n        ),\n    )\n    list_of_executions_this_year = []",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "list_of_TimeAccountMangerContracts__with_CustomerTimeAccounts",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def list_of_TimeAccountMangerContracts__with_CustomerTimeAccounts():\n    list_of_TimeAccountMangerContracts = []\n    for i in range(5):\n        employee = baker.make(\"nadooit_hr.Employee\")\n        employeecontract = baker.make(\"nadooit_hr.EmployeeContract\", employee=employee)\n        TimeAccountMangerContract = baker.make(\n            \"nadooit_hr.TimeAccountManagerContract\",\n            contract=employeecontract,\n            can_give_manager_role=True,\n            can_delete_time_accounts=True,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "employee_with_no_active_TImeAccountManagerContract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def employee_with_no_active_TImeAccountManagerContract():\n    employee = baker.make(\"nadooit_hr.Employee\")\n    return employee\n# A pytest fixure that returns a customer program object\n@pytest.fixture\ndef customer_program():\n    return CustomerProgram.objects.create(\n        customer=Customer.objects.create(\n            name=\"test\",\n        ),",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "customer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def customer_program():\n    return CustomerProgram.objects.create(\n        customer=Customer.objects.create(\n            name=\"test\",\n        ),\n        program=Program.objects.create(\n            name=\"test\",\n            description=\"test\",\n        ),\n    )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__not_paid_customer_program_executions__for__filter_type_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__not_paid_customer_program_executions__for__filter_type_and_customer(\n    customer_program: CustomerProgram,\n):\n    # Arrange\n    filter_type = \"last20\"\n    filter_type = \"lastmonth\"\n    filter_type = \"today\"\n    filter_type = \"thismonth\"\n    filter_type = \"thisyear\"\n    # Create customer program executions for the customer program",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__price_as_string_in_euro_format__for__price_in_euro_as_decimal",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__price_as_string_in_euro_format__for__price_in_euro_as_decimal():\n    # Arrange\n    price_in_euro_as_decimal = 10.0\n    # Act\n    # Assert\n    assert (\n        get__price_as_string_in_euro_format__for__price_in_euro_as_decimal(\n            price_in_euro_as_decimal\n        )\n        == \"10,000 €\"",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__time_as_string_in_hour_format__for__time_in_seconds_as_integer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__time_as_string_in_hour_format__for__time_in_seconds_as_integer():\n    # Arrange\n    time_in_seconds_as_integer = 90185\n    # Act\n    time_as_string_in_hour_format = (\n        get__time_as_string_in_hour_format__for__time_in_seconds_as_integer(\n            time_in_seconds_as_integer\n        )\n    )\n    # Assert",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_check__user__is__customer_program_manager__for__customer_prgram",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_check__user__is__customer_program_manager__for__customer_prgram(\n    user: User, customer_program: CustomerProgram\n):\n    # Arrange\n    baker.make(\"nadooit_hr.Employee\", user=user)\n    baker.make(\n        \"nadooit_hr.CustomerProgramManagerContract\",\n        contract=baker.make(\n            \"nadooit_hr.EmployeeContract\",\n            employee=user.employee,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_check__customer_program__for__customer_program_id__exists",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_check__customer_program__for__customer_program_id__exists(customer_program):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        check__customer_program__for__customer_program_id__exists(\n            customer_program_id=customer_program.id\n        )\n        == True\n    )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__active_TimeAccountManagerContracts__for__employee__with__active_TimeAccountManagerContract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__active_TimeAccountManagerContracts__for__employee__with__active_TimeAccountManagerContract(\n    employee_with_active_TimeAccountManagerContract,\n):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        len(\n            list(\n                get__active_TimeAccountManagerContracts__for__employee(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__active_TimeAccountManagerContracts__for__employee__with__no_active_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__active_TimeAccountManagerContracts__for__employee__with__no_active_contract(\n    employee_with_no_active_TImeAccountManagerContract,\n):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        len(\n            list(\n                get__active_TimeAccountManagerContracts__for__employee(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts__with_CustomerTimeAccounts",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts__with_CustomerTimeAccounts(\n    list_of_TimeAccountMangerContracts__with_CustomerTimeAccounts,\n):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        len(\n            list(\n                get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts__with_no_CustomerTimeAccounts",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts__with_no_CustomerTimeAccounts(\n    list_of_TimeAccountMangerContracts__without_CustomerTimeAccounts,\n):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        len(\n            list(\n                get__list_of_customer_time_accounts__for__list_of_TimeAccountMangerContracts(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee(\n    employee_with_active_TimeAccountManagerContract_and_also_managing_time_accounts_with_a_balance,\n):\n    # Arrange\n    # Act\n    customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts = get__customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts__for__employee(\n        employee_with_active_TimeAccountManagerContract_and_also_managing_time_accounts_with_a_balance\n    )\n    \"\"\"     print(\n            customer_time_accounts_grouped_by_customer_with_total_time_of_all_time_accounts",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_create__NadooitApiKey__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_create__NadooitApiKey__for__user(user):\n    # Arrange\n    # Act\n    nadooit_api_key = create__NadooitApiKey__for__user(user)\n    fake_api_key = uuid.uuid4()\n    nadooit_api_key_2 = create__NadooitApiKey__for__user(user, fake_api_key)\n    # Assert\n    assert type(nadooit_api_key) == NadooitApiKey\n    assert (\n        type(nadooit_api_key_2) == NadooitApiKey",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_create__time_account_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_create__time_account_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract(\n    user,\n    employee_with_active_TimeAccountManagerContract_and_the_right_to_create_time_account_manager_contracts,\n):\n    # Arrange\n    \"\"\"\n    ability == \"can_create_time_accounts\",\n    \"can_delete_time_accounts\",\n    \"can_give_manager_role\"\n    \"\"\"",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_check__user__exists__for__user_code",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_check__user__exists__for__user_code(user):\n    # Arrange\n    fake_user_code = \"NADOO01\"\n    # Act\n    # Assert\n    assert check__user__exists__for__user_code(user_code=user.user_code) == True\n    assert check__user__exists__for__user_code(user_code=fake_user_code) == False\n@pytest.mark.django_db\ndef test_set__all_active_NadooitApiKey__for__user_to_inactive(user):\n    # Arrange",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_set__all_active_NadooitApiKey__for__user_to_inactive",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_set__all_active_NadooitApiKey__for__user_to_inactive(user):\n    # Arrange\n    baker.make(NadooitApiKey, user=user, is_active=True)\n    baker.make(NadooitApiKey, user=user, is_active=True)\n    # Act\n    set__all_active_NadooitApiKey__for__user_to_inactive(user)\n    # Assert\n    assert NadooitApiKey.objects.filter(user=user, is_active=True).count() == 0\n@pytest.mark.django_db\ndef test_get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them(\n    employee_with_active_TimeAccountManagerContract_and_the_right_to_create_time_account_manager_contracts,\n):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        len(\n            get__list_of_customers__for__employee_that_has_a_time_account_manager_contract_with_and_can_create_time_account_manager_contracts_for_them(\n                employee_with_active_TimeAccountManagerContract_and_the_right_to_create_time_account_manager_contracts",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer():\n    # Arrange\n    # Create a customer, a program and 10 program executions for the customer\n    customer = baker.make(Customer)\n    program = baker.make(Program)\n    customer_program = baker.make(CustomerProgram, customer=customer, program=program)\n    for i in range(10):\n        baker.make(\n            CustomerProgramExecution,\n            customer_program=customer_program,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_check__customer__exists__for__customer_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_check__customer__exists__for__customer_id(customer):\n    # Arrange\n    fake_customer_id = 999\n    # Act\n    # Assert\n    assert check__customer__exists__for__customer_id(customer_id=customer.id) == True\n    assert (\n        check__customer__exists__for__customer_id(customer_id=fake_customer_id) == False\n    )\n@pytest.mark.django_db",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__customer__for__customer_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__customer__for__customer_id(customer):\n    # Arrange\n    fake_customer_id = 999\n    # Act\n    # Assert\n    assert get__customer__for__customer_id(customer_id=customer.id) == customer\n    assert get__customer__for__customer_id(customer_id=fake_customer_id) == None\n@pytest.mark.django_db\ndef test_check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer(\n    employee_with_active_CustomerProgramExecutionManagerContract,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer(\n    employee_with_active_CustomerProgramExecutionManagerContract,\n):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        check__active_customer_program_execution_manager_contract__exists__between__employee_and_customer(\n            employee_with_active_CustomerProgramExecutionManagerContract,\n            CustomerProgramExecutionManagerContract.objects.filter(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__customer_program_executions__for__filter_type_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__customer_program_executions__for__filter_type_and_customer(\n    customer_program,\n):\n    # Arrange\n    filter_type = \"last20\"\n    filter_type = \"lastmonth\"\n    filter_type = \"today\"\n    filter_type = \"thismonth\"\n    filter_type = \"thisyear\"\n    # Create customer program executions for the customer program",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__sum_of_time_saved_in_seconds__for__list_of_customer_program_exections(\n    customer_program,\n):\n    # Arrange\n    program_time_saved_in_seconds = 666\n    for x in range(5):\n        baker.make(\n            \"nadooit_api_executions_system.CustomerProgramExecution\",\n            customer_program=customer_program,\n            program_time_saved_in_seconds=program_time_saved_in_seconds,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__sum_of_price_for_execution__for__list_of_customer_program_exections",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__sum_of_price_for_execution__for__list_of_customer_program_exections(\n    customer_program,\n):\n    # Arrange\n    price_for_execution = 666\n    for x in range(5):\n        baker.make(\n            \"nadooit_api_executions_system.CustomerProgramExecution\",\n            customer_program=customer_program,\n            price_for_execution=price_for_execution,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__price_as_string_in_euro_format__for__price_in_euro_as_decimal",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__price_as_string_in_euro_format__for__price_in_euro_as_decimal():\n    # Arrange\n    price_in_euro_as_decimal = Decimal(666.66)\n    # Act\n    # Assert\n    assert (\n        get__price_as_string_in_euro_format__for__price_in_euro_as_decimal(\n            price_in_euro_as_decimal\n        )\n        == \"666,660 €\"",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_check__customer_program_execution__exists__for__customer_program_execution_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_check__customer_program_execution__exists__for__customer_program_execution_id(\n    customer_program_execution,\n):\n    # Arrange\n    # Act\n    # Assert\n    assert (\n        check__customer_program_execution__exists__for__customer_program_execution_id(\n            customer_program_execution.id\n        )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__customer__for__customer_program_execution_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__customer__for__customer_program_execution_id():\n    # Arrange\n    customer_program_execution = baker.make(\n        \"nadooit_api_executions_system.CustomerProgramExecution\",\n        customer_program=baker.make(\n            CustomerProgram, customer=baker.make(Customer), program=baker.make(Program)\n        ),\n    )\n    print(customer_program_execution)\n    # Act",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__customer_program_execution__for__customer_program_execution_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__customer_program_execution__for__customer_program_execution_id():\n    # Arrange\n    customer_program_execution = baker.make(\n        \"nadooit_api_executions_system.CustomerProgramExecution\",\n        customer_program=baker.make(\n            CustomerProgram, customer=baker.make(Customer), program=baker.make(Program)\n        ),\n    )\n    print(customer_program_execution)\n    # Act",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_set__payment_status__for__customer_program_execution",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_set__payment_status__for__customer_program_execution():\n    \"\"\"\n    class PaymentStatus(models.TextChoices):\n    NOT_PAID = \"NOT_PAID\", _(\"Not Paid\")\n    PAID = \"PAID\", _(\"Paid\")\n    REFUNDED = \"REFUNDED\", _(\"Refunded\")\n    REVOKED = \"REVOKED\", _(\"Revoked\")\n    \"\"\"\n    # Arrange\n    # create 3 customer_program_executions with different payment_status",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee(\n    customer_program_execution,\n):\n    # Arrange\n    complaint = \"complaint text\"\n    employee = baker.make(\"nadooit_hr.Employee\")\n    # Act\n    customer_program_execution_complaint = create__customer_program_execution_complaint__for__customer_program_execution_and_complaint_and_employee(\n        customer_program_execution, complaint, employee\n    )",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__employee__for__user_code",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__employee__for__user_code():\n    # Arrange\n    employee = baker.make(\n        \"nadooit_hr.Employee\", user=baker.make(\"nadooit_auth.User\", user_code=\"12345\")\n    )\n    baker.make(\"nadooit_auth.User\", user_code=\"123456\")\n    # Act\n    # Assert\n    assert get__employee__for__user_code(\"12345\") == employee\n    assert get__employee__for__user_code(\"123\t\") is None",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_create__customer_program_execution_manager_contract__for__employee_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_create__customer_program_execution_manager_contract__for__employee_contract():\n    # Arrange\n    employee_contract = baker.make(\"nadooit_hr.EmployeeContract\")\n    # Act\n    customer_program_execution_manager_contract = (\n        create__customer_program_execution_manager_contract__for__employee_contract(\n            employee_contract\n        )\n    )\n    # Assert",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_create__customer_program_execution_manager_contract__for__employee_and_customer_and_list_of_abilities_and_employee_with_customer_program_manager_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_create__customer_program_execution_manager_contract__for__employee_and_customer_and_list_of_abilities_and_employee_with_customer_program_manager_contract():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\")\n    abilities = [\n        \"can_give_manager_role\",\n        \"can_delete_customer_program_execution\",\n        \"can_create_customer_program_execution\",\n    ]\n    employee_with_customer_program_manager_contract = baker.make(",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customers_the_employee_has_a_customer_program_execution_manager_contract_with_and_can_create_such_a_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customers_the_employee_has_a_customer_program_execution_manager_contract_with_and_can_create_such_a_contract():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\", name=\"customer1\")\n    customer_program_manager_contract = baker.make(\n        \"nadooit_hr.CustomerProgramExecutionManagerContract\",\n        contract=baker.make(\n            \"nadooit_hr.EmployeeContract\",\n            employee=employee,\n            customer=customer,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customers_the_employee_has_a_customer_programm_manager_contract_with_and_the_customer_programms__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customers_the_employee_has_a_customer_programm_manager_contract_with_and_the_customer_programms__for__employee():\n    # Arrange\n    \"\"\"\n    This is what list of customers the employee is responsible for and the customer programms looks like:\n            [customer, customer_programms]\n            example:\n            [\n                customer1, [customer_program1, customer_program2],\n                customer2, [customer_program3, customer_program4],\n            ]",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__customer_program__for__customer_program_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__customer_program__for__customer_program_id():\n    # Arrange\n    customer_program = baker.make(CustomerProgram)\n    # Act\n    customer_program_from_db = get__customer_program__for__customer_program_id(\n        customer_program.id\n    )\n    # Assert\n    assert customer_program_from_db == customer_program\n# finish assertion",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__next_price_level__for__customer_program",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__next_price_level__for__customer_program():\n    # Arrange\n    customer_program = baker.make(CustomerProgram)\n    # Act\n    next_price_level = get__next_price_level__for__customer_program(customer_program)\n    # Assert\n    # test if the output is a string\n    assert True\n@pytest.mark.django_db\ndef test_get__customer_program_manager_contract__for__employee_and_customer():",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__customer_program_manager_contract__for__employee_and_customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__customer_program_manager_contract__for__employee_and_customer():\n    # Arrange\n    # Test that returns a customer_program_manager_contract that already exists\n    employee = baker.make(\n        \"nadooit_hr.Employee\",\n        user=baker.make(\"nadooit_auth.User\", display_name=\"employee1\"),\n    )\n    customer = baker.make(\"nadooit_crm.Customer\", name=\"customer1\")\n    customer_program_manager_contract = baker.make(\n        \"nadooit_hr.CustomerProgramManagerContract\",",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_abilties__for__customer_program_manager_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_abilties__for__customer_program_manager_contract():\n    # Arrange\n    customer_program_manager_contract = baker.make(\n        \"nadooit_hr.CustomerProgramManagerContract\",\n        can_create_customer_program=True,\n        can_delete_customer_program=True,\n        can_give_manager_role=True,\n    )\n    customer_program_manager_contract_2 = baker.make(\n        \"nadooit_hr.CustomerProgramManagerContract\",",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_abilities__for__list_of_selected_abilities_and_list_of_possible_abilities_the_employee_can_give",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_abilities__for__list_of_selected_abilities_and_list_of_possible_abilities_the_employee_can_give():\n    # Arrange\n    list_of_selected_abilities = [\"can_create_customer_program\"]\n    list_of_possible_abilities_the_employee_can_give = [\n        \"can_create_customer_program\",\n        \"can_delete_customer_program\",\n        \"can_give_manager_role\",\n    ]\n    list_of_selected_abilities_2 = [\"can_create_customer_program\"]\n    list_of_possible_abilities_the_employee_can_give_2 = [",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_set__list_of_abilities__for__customer_program_manager_contract_according_to_list_of_abilities",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_set__list_of_abilities__for__customer_program_manager_contract_according_to_list_of_abilities():\n    # Arrange\n    customer_program_manager_contract = baker.make(\n        \"nadooit_hr.CustomerProgramManagerContract\",\n        can_create_customer_program=False,\n        can_delete_customer_program=False,\n        can_give_manager_role=False,\n    )\n    list_of_abilities = [\"can_create_customer_program\", \"can_give_manager_role\"]\n    # Act",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customers_the_employee_has_a_customer_program_manager_contract_with_and_can_create_such_a_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customers_the_employee_has_a_customer_program_manager_contract_with_and_can_create_such_a_contract():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    employee_2 = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\")\n    customer_2 = baker.make(\"nadooit_crm.Customer\")\n    customer_3 = baker.make(\"nadooit_crm.Customer\")\n    # Contracts for employee\n    baker.make(\n        \"nadooit_hr.CustomerProgramManagerContract\",",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customers__for__employee_manager_contract__that_can_add_employees__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customers__for__employee_manager_contract__that_can_add_employees__for__user():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    employee_2 = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\", name=\"customer\")\n    customer_2 = baker.make(\"nadooit_crm.Customer\", name=\"customer_2\")\n    # Contracts for employee\n    baker.make(\n        \"nadooit_hr.EmployeeManagerContract\",\n        contract__employee=employee,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    employee_2 = baker.make(\"nadooit_hr.Employee\")\n    employee_3 = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\", name=\"customer\")\n    customer_2 = baker.make(\"nadooit_crm.Customer\", name=\"customer_2\")\n    # Contracts for employee\n    employee_contract_e1_c1 = baker.make(\n        \"nadooit_hr.EmployeeContract\", employee=employee, customer=customer",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_check__employee_manager_contract__exists__for__employee_manager_and_customer__and__can_add_users__and__is_active",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_check__employee_manager_contract__exists__for__employee_manager_and_customer__and__can_add_users__and__is_active():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\")\n    employee_contract = baker.make(\n        \"nadooit_hr.EmployeeContract\", employee=employee, customer=customer\n    )\n    baker.make(\n        \"nadooit_hr.EmployeeManagerContract\",\n        contract=employee_contract,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__employee_contract__for__user_code__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__employee_contract__for__user_code__and__customer():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\")\n    employee_contract = baker.make(\n        \"nadooit_hr.EmployeeContract\", employee=employee, customer=customer\n    )\n    # Act\n    result = get__employee_contract__for__user_code__and__customer(\n        employee.user.user_code, customer",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__employee_manager_contract__for__user_code__and__customer",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__employee_manager_contract__for__user_code__and__customer():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\")\n    employee_contract = baker.make(\n        \"nadooit_hr.EmployeeContract\", employee=employee, customer=customer\n    )\n    employee_manager_contract = baker.make(\n        \"nadooit_hr.EmployeeManagerContract\",\n        contract=employee_contract,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_create__employee_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_create__employee_manager_contract__for__user_code_customer_and_list_of_abilities_according_to_employee_creating_contract():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\")\n    employee_contract = baker.make(\n        \"nadooit_hr.EmployeeContract\", employee=employee, customer=customer\n    )\n    employee_contract_2 = baker.make(\"nadooit_hr.EmployeeContract\", customer=customer)\n    employee_manager_contract_with_all_rights: EmployeeManagerContract = baker.make(\n        \"nadooit_hr.EmployeeManagerContract\",",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_customers__for__employee_manager_contract__that_can_give_the_role__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_customers__for__employee_manager_contract__that_can_give_the_role__for__user():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    customer = baker.make(\"nadooit_crm.Customer\")\n    employee_contract = baker.make(\n        \"nadooit_hr.EmployeeContract\", employee=employee, customer=customer\n    )\n    employee_manager_contract = baker.make(\n        \"nadooit_hr.EmployeeManagerContract\",\n        contract=employee_contract,",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_set_employee_contract__as_inactive__for__employee_contract_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_set_employee_contract__as_inactive__for__employee_contract_id():\n    # Arrange\n    employee_contract = baker.make(\"nadooit_hr.EmployeeContract\", is_active=True)\n    # Act\n    set_employee_contract__as_inactive__for__employee_contract_id(employee_contract.id)\n    # Assert\n    assert EmployeeContract.objects.get(id=employee_contract.id).is_active == False\n@pytest.mark.django_db\ndef test_set__employee_contract__is_active_state__for__employee_contract_id():\n    # Arrange",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_set__employee_contract__is_active_state__for__employee_contract_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_set__employee_contract__is_active_state__for__employee_contract_id():\n    # Arrange\n    employee_contract = baker.make(\"nadooit_hr.EmployeeContract\", is_active=False)\n    # Act\n    set__employee_contract__is_active_state__for__employee_contract_id(\n        employee_contract.id, True\n    )\n    # Assert\n    assert EmployeeContract.objects.get(id=employee_contract.id).is_active == True\n@pytest.mark.django_db",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__employee_contract__for__employee_contract_id",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__employee_contract__for__employee_contract_id():\n    # Arrange\n    employee_contract = baker.make(\"nadooit_hr.EmployeeContract\")\n    # Act\n    result = get__employee_contract__for__employee_contract_id(employee_contract.id)\n    # Assert\n    assert result == employee_contract\n# TODO  #129 finish this test\n@pytest.mark.django_db\ndef test_get__csv__for__list_of_customer_program_executions():",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__csv__for__list_of_customer_program_executions",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__csv__for__list_of_customer_program_executions():\n    # get__csv__for__list_of_customer_program_executions returns a http response with a csv file as content\n    # this test checks if the content is a string\n    # the content is a string because the response is a http response with a csv file as content\n    # Arrange\n    customer_program_execution = baker.make(\n        CustomerProgramExecution,\n        customer_program=baker.make(\n            CustomerProgram, program=baker.make(Program, name=\"program_name\")\n        ),",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__user_info__for__user",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__user_info__for__user():\n    # Arrange\n    user = baker.make(\"nadooit_auth.User\")\n    # Act\n    result = get__user_info__for__user(user)\n    # Assert\n    assert result == {\n        \"user_code\": user.user_code,\n        \"display_name\": user.display_name,\n    }",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__list_of_manager_contracts__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.test_services",
        "description": "app.nadooit_os.test_services",
        "peekOfCode": "def test_get__list_of_manager_contracts__for__employee():\n    # Arrange\n    employee = baker.make(\n        \"nadooit_hr.Employee\",\n        user=baker.make(\"nadooit_auth.User\", display_name=\"employee_name\"),\n    )\n    employee_contract_1 = baker.make(\n        \"nadooit_hr.EmployeeContract\",\n        employee=employee,\n        customer=baker.make(\"nadooit_crm.Customer\", name=\"customer_1\"),",
        "detail": "app.nadooit_os.test_services",
        "documentation": {}
    },
    {
        "label": "test_get__employee_roles_and_rights__for__employee__with__no_rights",
        "kind": 2,
        "importPath": "app.nadooit_os.test_views",
        "description": "app.nadooit_os.test_views",
        "peekOfCode": "def test_get__employee_roles_and_rights__for__employee__with__no_rights():\n    # Arrange\n    employee = baker.make(\"nadooit_hr.Employee\")\n    # Act\n    roles_and_rights__for__user = get__employee_roles_and_rights__for__employee(\n        employee\n    )\n    print(\n        \"roles_and_rights__for__user in Test for user with no rights\",\n        roles_and_rights__for__user,",
        "detail": "app.nadooit_os.test_views",
        "documentation": {}
    },
    {
        "label": "test_get__employee_roles_and_rights__for__employee__with__all_rights_and_roles",
        "kind": 2,
        "importPath": "app.nadooit_os.test_views",
        "description": "app.nadooit_os.test_views",
        "peekOfCode": "def test_get__employee_roles_and_rights__for__employee__with__all_rights_and_roles():\n    # Arrange\n    employee = baker.make(\n        \"nadooit_hr.Employee\",\n    )\n    employeecontract = baker.make(\"nadooit_hr.EmployeeContract\", employee=employee)\n    baker.make(\n        \"nadooit_hr.TimeAccountManagerContract\",\n        contract=employeecontract,\n        can_give_manager_role=True,",
        "detail": "app.nadooit_os.test_views",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "app.nadooit_os.urls",
        "description": "app.nadooit_os.urls",
        "peekOfCode": "app_name = \"nadooit_os\"\nurlpatterns = [\n    path(\"\", index_nadooit_os, name=\"nadooit-os\"),\n    path(\n        \"time-account/customer-time-account-overview\",\n        customer_time_account_overview,\n        name=\"customer-time-account-overview\",\n    ),\n    path(\n        \"time-account/give-customer-time-account-manager-role\",",
        "detail": "app.nadooit_os.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit_os.urls",
        "description": "app.nadooit_os.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", index_nadooit_os, name=\"nadooit-os\"),\n    path(\n        \"time-account/customer-time-account-overview\",\n        customer_time_account_overview,\n        name=\"customer-time-account-overview\",\n    ),\n    path(\n        \"time-account/give-customer-time-account-manager-role\",\n        give_customer_time_account_manager_role,",
        "detail": "app.nadooit_os.urls",
        "documentation": {}
    },
    {
        "label": "user_is_Time_Account_Manager",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Time_Account_Manager(user: User) -> bool:\n    if TimeAccountManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n    ).exists():\n        return True\n    else:\n        return False\ndef user_is_Time_Account_Manager_and_can_give_manager_role(\n    user: User,",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Time_Account_Manager_and_can_give_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Time_Account_Manager_and_can_give_manager_role(\n    user: User,\n) -> bool:\n    if TimeAccountManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n        can_give_manager_role=True,\n    ).exists():\n        return True\n    else:",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Api_Key_Manager",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Api_Key_Manager(user: User) -> bool:\n    if hasattr(user.employee, \"nadooitapikeymanager\"):\n        return True\n    return False\ndef user_is_Api_Key_Manager_and_can_give_manager_role(user: User) -> bool:\n    if hasattr(user.employee, \"nadooitapikeymanager\"):\n        if user.employee.nadooitapikeymanager.can_give_manager_role:\n            return True\n    return False\n# Tests for Customer Program Execution Manager",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Api_Key_Manager_and_can_give_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Api_Key_Manager_and_can_give_manager_role(user: User) -> bool:\n    if hasattr(user.employee, \"nadooitapikeymanager\"):\n        if user.employee.nadooitapikeymanager.can_give_manager_role:\n            return True\n    return False\n# Tests for Customer Program Execution Manager\ndef user_is_Customer_Program_Execution_Manager(user: User) -> bool:\n    # checks if the employee for the user is an employee manager\n    if CustomerProgramExecutionManagerContract.objects.filter(\n        contract__employee=user.employee, contract__is_active=True",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Customer_Program_Execution_Manager",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Customer_Program_Execution_Manager(user: User) -> bool:\n    # checks if the employee for the user is an employee manager\n    if CustomerProgramExecutionManagerContract.objects.filter(\n        contract__employee=user.employee, contract__is_active=True\n    ).exists():\n        return True\n    else:\n        return False\ndef user_is_Customer_Program_Execution_Manager_and_can_give_Customer_Program_Execution_Manager_role(\n    user: User,",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Customer_Program_Execution_Manager_and_can_give_Customer_Program_Execution_Manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Customer_Program_Execution_Manager_and_can_give_Customer_Program_Execution_Manager_role(\n    user: User,\n) -> bool:\n    if CustomerProgramExecutionManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n        can_give_manager_role=True,\n    ).exists():\n        return True\n    else:",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Customer_Program_Manager",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Customer_Program_Manager(user: User) -> bool:\n    # checks if the employee for the user is an employee manager\n    if CustomerProgramManagerContract.objects.filter(\n        contract__employee=user.employee, contract__is_active=True\n    ).exists():\n        return True\n    else:\n        return False\ndef user_is_Customer_Program_Manager_and_can_give_Customer_Program_Manager_role(\n    user: User,",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Customer_Program_Manager_and_can_give_Customer_Program_Manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Customer_Program_Manager_and_can_give_Customer_Program_Manager_role(\n    user: User,\n) -> bool:\n    if CustomerProgramManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n        can_give_manager_role=True,\n    ).exists():\n        return True\n    else:",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Employee_Manager",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Employee_Manager(user: User) -> bool:\n    # checks if the employee for the user is an employee manager\n    if EmployeeManagerContract.objects.filter(\n        contract__employee=user.employee, contract__is_active=True\n    ).exists():\n        return True\n    else:\n        return False\ndef user_is_Employee_Manager_and_can_give_Employee_Manager_role(\n    user: User,",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Employee_Manager_and_can_give_Employee_Manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Employee_Manager_and_can_give_Employee_Manager_role(\n    user: User,\n) -> bool:\n    if check__employee_manager_contract__for__user__can_give_manager_role(user):\n        return True\n    else:\n        return False\ndef user_is_Employee_Manager_and_can_add_new_employee(\n    user: User,\n) -> bool:",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Employee_Manager_and_can_add_new_employee",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Employee_Manager_and_can_add_new_employee(\n    user: User,\n) -> bool:\n    if EmployeeManagerContract.objects.filter(\n        contract__employee=user.employee,\n        contract__is_active=True,\n        can_add_new_employee=True,\n    ).exists():\n        return True\n    else:",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "user_is_Employee_Manager_and_can_delete_employee",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def user_is_Employee_Manager_and_can_delete_employee(\n    user: User,\n) -> bool:\n    if check__employee_manager_contract__for__user__can_deactivate__employee_contracts(\n        user\n    ):\n        return True\n    else:\n        return False\n# Getting the user roles",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "get__employee_roles_and_rights__for__employee",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def get__employee_roles_and_rights__for__employee(employee: Employee) -> dict:\n    return {\n        \"is_time_account_manager\": user_is_Time_Account_Manager(employee.user),\n        \"user_is_Time_Account_Manager_and_can_give_manager_role\": user_is_Time_Account_Manager_and_can_give_manager_role(\n            employee.user\n        ),\n        \"is_api_key_manager\": user_is_Api_Key_Manager(employee.user),\n        \"user_is_api_key_manager_and_can_give_manager_role\": user_is_Api_Key_Manager_and_can_give_manager_role(\n            employee.user\n        ),",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "get__user__roles_and_rights__for__http_request",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def get__user__roles_and_rights__for__http_request(request: HttpRequest):\n    return get__employee_roles_and_rights__for__employee(request.user.employee)\n# Create your views here.\n# Main page of the nadooit_os\n@login_required(login_url=\"/auth/login-user\")\ndef index_nadooit_os(request: HttpRequest):\n    logger.info(\"nadoo os accessed\")\n    return render(\n        request,\n        \"nadooit_os/index.html\",",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "index_nadooit_os",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def index_nadooit_os(request: HttpRequest):\n    logger.info(\"nadoo os accessed\")\n    return render(\n        request,\n        \"nadooit_os/index.html\",\n        # context as dict\n        # first item is page_title\n        # dict from get__user__roles_and_rights__for__http_request is added\n        {\n            \"page_title\": \"Nadooit OS\",",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "customer_time_account_overview",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def customer_time_account_overview(request: HttpRequest):\n    # group the customer time accounts by customer and sum up the time balances\n    # the dictionary will look like this:\n    \"\"\"\n    {\n        customer1: {\n            customer_time_accounts: [customer_time_account1, customer_time_account2],\n            customer_time_account_total_time_balance: 123456\n        },\n        customer2: {",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "create_api_key",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def create_api_key(request: HttpRequest):\n    submitted = False\n    if request.method == \"POST\":\n        form = ApiKeyForm(request.POST)\n        if form.is_valid():\n            create__NadooitApiKey__for__user(request.user, form.cleaned_data[\"api_key\"])\n            return HttpResponseRedirect(\n                \"/nadooit-os/api_key/create-api-key?submitted=True\"\n            )\n    else:",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "revoke_api_key",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def revoke_api_key(request: HttpRequest):\n    submitted = False\n    if request.method == \"POST\":\n        # get list of all api keys that are active for the user and set them to inactive\n        set__all_active_NadooitApiKey__for__user_to_inactive(request.user)\n        return HttpResponseRedirect(\"/nadooit-os/api_key/revoke-api-key?submitted=True\")\n    else:\n        if \"submitted\" in request.GET:\n            submitted = True\n    return render(",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "give_api_key_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def give_api_key_manager_role(request: HttpRequest):\n    submitted = False\n    if request.method == \"POST\":\n        form = ApiKeyManagerForm(\n            request.POST,\n        )\n        if form.is_valid():\n            user_code = form.cleaned_data[\"user_code\"]\n            # get the employee object for the user\n            employee = Employee.objects.get(user__user_code=user_code)",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "give_customer_time_account_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def give_customer_time_account_manager_role(request: HttpRequest):\n    submitted = False\n    if request.method == \"POST\":\n        user_code = request.POST.get(\"user_code\")\n        # check if customer exists\n        if not check__customer__exists__for__customer_id(request.POST.get(\"customers\")):\n            return HttpResponseRedirect(\n                \"/nadooit-os/time-account/give-customer-time-account-manager-role?submitted=True&error=Kein gültiger Kunde eingegeben\"\n            )\n        if not check__user__exists__for__user_code(user_code):",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "customer_program_execution_overview",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def customer_program_execution_overview(request: HttpRequest):\n    # All orders for the current customer\n    # orders are the executions of customerprograms\n    # the list of customers that the time accounts that the employee is responsible for belong to\n    # the list has for its first element the customer that the employee is responsible for\n    # the list has for its second element the ccustomer programm execution for the customer that the employee is responsible for\n    list_of_customer_program_execution__for__employee_and_filter_type__grouped_by_customer = (\n        []\n    )\n    filter_type = \"last20\"",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "customer_program_execution_list_for_cutomer",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def customer_program_execution_list_for_cutomer(\n    request: HttpRequest, filter_type, cutomer_id\n):\n    # covered by test\n    if not check__customer__exists__for__customer_id(cutomer_id):\n        return HttpResponseForbidden()\n    # Get the customer\n    # covered by test\n    customer = get__customer__for__customer_id(cutomer_id)\n    # Check if the user is a customer program execution manager for the customer",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "customer_program_execution_list_complaint_modal",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def customer_program_execution_list_complaint_modal(\n    request: HttpRequest, customer_program_execution_id\n):\n    # check if the customer program execution exists\n    # covered by test\n    if not check__customer_program_execution__exists__for__customer_program_execution_id(\n        customer_program_execution_id\n    ):\n        return HttpResponseForbidden()\n    # Get the customer",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "customer_program_execution_send_complaint",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def customer_program_execution_send_complaint(\n    request: HttpRequest, customer_program_execution_id\n):\n    # check if the customer program execution exists\n    # covered by test\n    if not check__customer_program_execution__exists__for__customer_program_execution_id(\n        customer_program_execution_id\n    ):\n        return HttpResponseForbidden()\n    # Check that the user is a a customer program execution manager for the customer that the customer program execution belongs to",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "give_customer_program_execution_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def give_customer_program_execution_manager_role(request: HttpRequest):\n    submitted = False\n    employee_with_customer_program_manager_contract = request.user.employee\n    if request.method == \"POST\":\n        user_code = request.POST.get(\"user_code\")\n        customer_id = request.POST.get(\"customer_id\")\n        list_of_abilities = request.POST.getlist(\"role\")\n        # guard clauses for the input data of the form (user_code, customer_id, list_of_abilities)\n        # check that user_code is not empty\n        # covered by test",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "customer_program_overview",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def customer_program_overview(request: HttpRequest):\n    # All orders for the current customer\n    # orders are the executions of customerprograms\n    # the list of customers that the time accounts that the employee is responsible for belong to\n    # the list has for its first element the customer that the employee is responsible for\n    # the list has for its second element the ccustomer programm execution for the customer that the employee is responsible for\n    # covered by test\n    customers_the_user_is_responsible_for_and_the_customer_programms = get__list_of_customers_the_employee_has_a_customer_programm_manager_contract_with_and_the_customer_programms__for__employee(\n        employee=request.user.employee\n    )",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "get__customer_program_profile",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def get__customer_program_profile(\n    request: HttpRequest, customer_program_id: str\n) -> HttpResponse:\n    # Check that the user is a a customer program  manager for the customer that the customer program belongs to\n    # print(\"customer_program_id\", customer_program_id)\n    # covered by test\n    if not check__customer_program__for__customer_program_id__exists(\n        customer_program_id\n    ):\n        return HttpResponse(status=404)",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "give_customer_program_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def give_customer_program_manager_role(request: HttpRequest):\n    submitted = False\n    customer_program_manager_that_is_creating_the_contract = request.user.employee\n    if request.method == \"POST\":\n        user_code = request.POST.get(\"user_code\")\n        # check that user_code is not empty\n        # covered by test\n        if not check__user__exists__for__user_code(user_code):\n            return HttpResponseRedirect(\n                \"/nadooit-os/cutomer-program/give-customer-program-manager-role?submitted=True&error=Kein gültiger Benutzercode eingegeben\"",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "employee_overview",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def employee_overview(request: HttpRequest):\n    # This page displays all the employees that the logged in user is responsible for\n    # The user can be the employee manager of multiple companies\n    # Each company has multiple employees\n    # The page displays all the employees of all the companies the user is responsible for as a lists\n    # Each list is a company and the employees are the employees of that company\n    # TODO missing the ability to deactiave the diactivate button if the user does not have the right to deactivate employees\n    # TODO #113 test for this is not working. This structure could be restsrtuctured to make it easier to test\n    customers__and__employees__for__employee_manager_contract__that_can_add_employees__for__user = get__list_of_customers__and__their_employees__for__customers_that_have_a_employee_manager_contract__for__user(\n        request.user",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "employee_profile",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def employee_profile(request: HttpRequest):\n    logger.info(\"employee_profile view accessed\")\n    # def employee_profile(request: HttpRequest, employee_id: uuid4):\n    # TODO This is not doen yet and can and should not be used\n    # get the employee id from the current user\n    employee_id = request.user.employee.id\n    # get the employee object\n    employee = get__employee__for__employee_id(employee_id)\n    \"\"\" This is all not used\n    # A list of all the customers the user is responsible for so that in the profile the user only sees the infroation of the employee that is also part of the customers the user is responsible for",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "add_employee",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def add_employee(request: HttpRequest):\n    submitted = False\n    if request.method == \"POST\":\n        user_code = request.POST.get(\"user_code\")\n        customer_id = request.POST.get(\"customers\")\n        # check that user_code is not empty\n        if not check__user__exists__for__user_code(user_code):\n            return HttpResponseRedirect(\n                \"/nadooit-os/hr/add-employee?submitted=False&error=Kein gültiger Benutzercode eingegeben\"\n            )",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "give_employee_manager_role",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def give_employee_manager_role(request: HttpRequest):\n    employee_manager_giving_the_role = request.user.employee\n    submitted = False\n    if request.method == \"POST\":\n        user_code = request.POST.get(\"user_code\")\n        list_of_abilities = request.POST.getlist(\"role\")\n        customer_id = request.POST.get(\"customers\")\n        # covert by test\n        if not check__customer__exists__for__customer_id(customer_id):\n            return HttpResponseRedirect(",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "deactivate_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def deactivate_contract(request: HttpRequest, employee_contract_id: str):\n    # covert by test\n    employee_contract = set_employee_contract__as_inactive__for__employee_contract_id(\n        employee_contract_id\n    )\n    return render(\n        request,\n        \"nadooit_os/hr_department/components/activate_contract_button.html\",\n        {\n            \"employee_contract\": employee_contract,",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "activate_contract",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def activate_contract(request: HttpRequest, employee_contract_id: str):\n    # covert by test\n    set__employee_contract__is_active_state__for__employee_contract_id(\n        employee_contract_id, True\n    )\n    # covert by test\n    employee_contract = get__employee_contract__for__employee_contract_id(\n        employee_contract_id\n    )\n    return render(",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "export_transactions",
        "kind": 2,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "def export_transactions(request: HttpRequest, filter_type, cutomer_id):\n    # covert by test\n    if not check__customer__exists__for__customer_id(cutomer_id):\n        return HttpResponseNotFound(\"Customer not found\")\n    # covert by test\n    cutomer = get__customer__for__customer_id(cutomer_id)\n    unpaid_customer_program_executions = (\n        # covert by test\n        get__not_paid_customer_program_executions__for__filter_type_and_customer(\n            filter_type, cutomer",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.nadooit_os.views",
        "description": "app.nadooit_os.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nfrom django.views.decorators.http import require_GET, require_POST\nfrom nadooit_api_executions_system.models import CustomerProgramExecution\nfrom nadooit_auth.models import User\n# Manager Roles\nfrom nadooit_hr.models import (\n    CustomerProgramExecutionManagerContract,\n    CustomerProgramManagerContract,\n    Employee,\n    EmployeeContract,",
        "detail": "app.nadooit_os.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_program.migrations.0001_initial",
        "description": "app.nadooit_program.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Program',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('name', models.CharField(max_length=255)),",
        "detail": "app.nadooit_program.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitProgramConfig",
        "kind": 6,
        "importPath": "app.nadooit_program.apps",
        "description": "app.nadooit_program.apps",
        "peekOfCode": "class NadooitProgramConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_program\"",
        "detail": "app.nadooit_program.apps",
        "documentation": {}
    },
    {
        "label": "Program",
        "kind": 6,
        "importPath": "app.nadooit_program.models",
        "description": "app.nadooit_program.models",
        "peekOfCode": "class Program(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    # program_dependencies is a list of programs that this program depends on. They are represented as a list of strings. The list is empty if there are no dependencies.\n    program_dependencies = models.TextField(\n        default=\"\", blank=True, null=True, editable=True\n    )",
        "detail": "app.nadooit_program.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_program_ownership_system.migrations.0001_initial",
        "description": "app.nadooit_program_ownership_system.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_crm', '0001_initial'),\n        ('nadooit_time_account', '0001_initial'),\n        ('nadooit_program', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ProgramShare',",
        "detail": "app.nadooit_program_ownership_system.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitProgramOwnershipSystemConfig",
        "kind": 6,
        "importPath": "app.nadooit_program_ownership_system.apps",
        "description": "app.nadooit_program_ownership_system.apps",
        "peekOfCode": "class NadooitProgramOwnershipSystemConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_program_ownership_system\"",
        "detail": "app.nadooit_program_ownership_system.apps",
        "documentation": {}
    },
    {
        "label": "ProgramShare",
        "kind": 6,
        "importPath": "app.nadooit_program_ownership_system.models",
        "description": "app.nadooit_program_ownership_system.models",
        "peekOfCode": "class ProgramShare(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    share_of = models.ForeignKey(Program, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.id\nclass CustomerProgram(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    program_time_saved_per_execution_in_seconds = models.IntegerField(default=0)",
        "detail": "app.nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "kind": 6,
        "importPath": "app.nadooit_program_ownership_system.models",
        "description": "app.nadooit_program_ownership_system.models",
        "peekOfCode": "class CustomerProgram(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    program_time_saved_per_execution_in_seconds = models.IntegerField(default=0)\n    # TODO this relation means that every program can only be assigned to one time account. This is not correct. A program can be assigned to multiple time accounts.\n    time_account = models.ForeignKey(TimeAccount, on_delete=models.SET_NULL, null=True)\n    over_charge = models.BooleanField(default=False)\n    program = models.ForeignKey(Program, on_delete=models.SET_NULL, null=True)\n    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)\n    price_per_second = MoneyField(\n        max_digits=14, decimal_places=6, default_currency=\"EUR\", default=0",
        "detail": "app.nadooit_program_ownership_system.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit_program_ownership_system.urls",
        "description": "app.nadooit_program_ownership_system.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin\", views.admin, name=\"customer_program_ownership_overview_adminpage\"),\n    path(\n        \"customer_program_ownership_overview\",\n        views.customer_program_ownership_overview,\n        name=\"customer_program_ownership_overview\",\n    ),\n]",
        "detail": "app.nadooit_program_ownership_system.urls",
        "documentation": {}
    },
    {
        "label": "customer_program_ownership_overview",
        "kind": 2,
        "importPath": "app.nadooit_program_ownership_system.views",
        "description": "app.nadooit_program_ownership_system.views",
        "peekOfCode": "def customer_program_ownership_overview(request):\n    # if the logged in user is a time account manager show the time account manager view\n    return render(\n        request,\n        \"nadooit_program_ownership_system/customer_program_ownership_overview.html\",\n        {\n            \"page_title\": \"Übersicht der Zeitkonten\",\n        },\n    )\n@login_required(login_url=\"/auth/login-user\")",
        "detail": "app.nadooit_program_ownership_system.views",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 2,
        "importPath": "app.nadooit_program_ownership_system.views",
        "description": "app.nadooit_program_ownership_system.views",
        "peekOfCode": "def admin(request):\n    # if the logged in user is a time account manager show the time account manager view\n    return render(\n        request,\n        \"nadooit_program_ownership_system/customer_program_ownership_overview.html\",\n        {\n            \"page_title\": \"Übersicht der Zeitkonten\",\n        },\n    )",
        "detail": "app.nadooit_program_ownership_system.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_questions_and_answers.migrations.0001_initial",
        "description": "app.nadooit_questions_and_answers.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Question_Answer',\n            fields=[\n                ('question_answer_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('question_answer_date', models.DateTimeField(auto_now_add=True)),",
        "detail": "app.nadooit_questions_and_answers.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitQuestionsAndAnswersConfig",
        "kind": 6,
        "importPath": "app.nadooit_questions_and_answers.apps",
        "description": "app.nadooit_questions_and_answers.apps",
        "peekOfCode": "class NadooitQuestionsAndAnswersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_questions_and_answers\"",
        "detail": "app.nadooit_questions_and_answers.apps",
        "documentation": {}
    },
    {
        "label": "Question_Answer",
        "kind": 6,
        "importPath": "app.nadooit_questions_and_answers.models",
        "description": "app.nadooit_questions_and_answers.models",
        "peekOfCode": "class Question_Answer(models.Model):\n    question_answer_id = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False\n    )\n    question_answer_date = models.DateTimeField(auto_now_add=True)\n    question_answer_question = models.TextField(blank=True)\n    question_answer_answer = models.TextField(blank=True)\n    def __str__(self):\n        return self.question_answer_question + \" \" + self.question_answer_answer",
        "detail": "app.nadooit_questions_and_answers.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit_questions_and_answers.urls",
        "description": "app.nadooit_questions_and_answers.urls",
        "peekOfCode": "urlpatterns = [\n    path(\n        \"your_question_we_answer/question/<str:session_id>\",\n        views.submit_question,\n        name=\"submit_question\",\n    ),\n]",
        "detail": "app.nadooit_questions_and_answers.urls",
        "documentation": {}
    },
    {
        "label": "submit_question",
        "kind": 2,
        "importPath": "app.nadooit_questions_and_answers.views",
        "description": "app.nadooit_questions_and_answers.views",
        "peekOfCode": "def submit_question(request, session_id):\n    data = json.loads(request.body)\n    question = data.get(\"question\")\n    # Process the question and session_id here.\n    # You may want to save the question to the database or perform other actions.\n    if check__session_id__is_valid(session_id):\n        # create a question answer object\n        Question_Answer.objects.create(question_answer_question=question)\n        response_data = {\n            \"message\": \"Frage eingereicht\",",
        "detail": "app.nadooit_questions_and_answers.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_time_account.migrations.0001_initial",
        "description": "app.nadooit_time_account.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_crm', '0001_initial'),\n        ('nadooit_hr', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='EmployeeTimeAccount',\n            fields=[",
        "detail": "app.nadooit_time_account.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitTimeaccountConfig",
        "kind": 6,
        "importPath": "app.nadooit_time_account.apps",
        "description": "app.nadooit_time_account.apps",
        "peekOfCode": "class NadooitTimeaccountConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_time_account\"",
        "detail": "app.nadooit_time_account.apps",
        "documentation": {}
    },
    {
        "label": "TimeAccount",
        "kind": 6,
        "importPath": "app.nadooit_time_account.models",
        "description": "app.nadooit_time_account.models",
        "peekOfCode": "class TimeAccount(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    time_balance_in_seconds = models.BigIntegerField(null=True, blank=True, default=0)\n    name = models.CharField(max_length=255, null=True, blank=True)\n    is_active = models.BooleanField(default=True)\n    def __str__(self):\n        time_balance_in_seconds = (\n            get_time_as_string_in_hour_format_for_time_in_seconds_as_integer(\n                self.time_balance_in_seconds\n            )",
        "detail": "app.nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "EmployeeTimeAccount",
        "kind": 6,
        "importPath": "app.nadooit_time_account.models",
        "description": "app.nadooit_time_account.models",
        "peekOfCode": "class EmployeeTimeAccount(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    time_account = models.ForeignKey(TimeAccount, on_delete=models.CASCADE)\n    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        if self.employee.user.display_name == \"\":\n            return (",
        "detail": "app.nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "CustomerTimeAccount",
        "kind": 6,
        "importPath": "app.nadooit_time_account.models",
        "description": "app.nadooit_time_account.models",
        "peekOfCode": "class CustomerTimeAccount(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    time_account = models.ForeignKey(TimeAccount, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    name = models.CharField(max_length=255, null=False, blank=False)\n    def __str__(self):\n        return (\n            self.customer.name",
        "detail": "app.nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "WorkTimeAccountEntry",
        "kind": 6,
        "importPath": "app.nadooit_time_account.models",
        "description": "app.nadooit_time_account.models",
        "peekOfCode": "class WorkTimeAccountEntry(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    employee_time_account = models.ForeignKey(\n        EmployeeTimeAccount, on_delete=models.CASCADE\n    )\n    work_time = models.TimeField(null=True, blank=True)\n    work_date = models.DateField(null=True, blank=True)\n    ENTRY_TYPE = (\n        (\"IN\", \"IN\"),\n        (\"OUT\", \"OUT\"),",
        "detail": "app.nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "get_time_as_string_in_hour_format_for_time_in_seconds_as_integer",
        "kind": 2,
        "importPath": "app.nadooit_time_account.models",
        "description": "app.nadooit_time_account.models",
        "peekOfCode": "def get_time_as_string_in_hour_format_for_time_in_seconds_as_integer(\n    time: int | decimal.Decimal,\n):\n    return (\n        str(time // 3600)\n        + \" std : \"\n        + str((time % 3600) // 60)\n        + \" min : \"\n        + str(time % 60)\n        + \" sek\"",
        "detail": "app.nadooit_time_account.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit_time_account.urls",
        "description": "app.nadooit_time_account.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin\", views.admin, name=\"adminpage\"),\n]",
        "detail": "app.nadooit_time_account.urls",
        "documentation": {}
    },
    {
        "label": "FileAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.section",
        "description": "app.nadooit_website.admin.section",
        "peekOfCode": "class FileAdmin(admin.ModelAdmin):\n    list_display = ('name', 'file',)\nclass WebsiteSectionsOrderTabularInline(OrderedTabularInline):\n    model = Section_Order_Sections_Through_Model\n    fields = (\"section\", \"move_up_down_links\")\n    readonly_fields = (\n        \"order\",\n        \"move_up_down_links\",\n    )\n    ordering = (\"order\",)",
        "detail": "app.nadooit_website.admin.section",
        "documentation": {}
    },
    {
        "label": "WebsiteSectionsOrderTabularInline",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.section",
        "description": "app.nadooit_website.admin.section",
        "peekOfCode": "class WebsiteSectionsOrderTabularInline(OrderedTabularInline):\n    model = Section_Order_Sections_Through_Model\n    fields = (\"section\", \"move_up_down_links\")\n    readonly_fields = (\n        \"order\",\n        \"move_up_down_links\",\n    )\n    ordering = (\"order\",)\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):",
        "detail": "app.nadooit_website.admin.section",
        "documentation": {}
    },
    {
        "label": "Section_OrderAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.section",
        "description": "app.nadooit_website.admin.section",
        "peekOfCode": "class Section_OrderAdmin(OrderedInlineModelAdminMixin, admin.ModelAdmin):\n    list_display = (\"section_order_id\",)\n    inlines = (WebsiteSectionsOrderTabularInline,)\n    save_as = True\n# Update SectionAdmin to include video field in the form\nclass SectionAdmin(admin.ModelAdmin):\n    list_display = (\"section_id\", \"name\", \"html\", \"video\", \"file\")\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.DEBUG)\n    def save_model(self, request, obj, form, change):",
        "detail": "app.nadooit_website.admin.section",
        "documentation": {}
    },
    {
        "label": "SectionAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.section",
        "description": "app.nadooit_website.admin.section",
        "peekOfCode": "class SectionAdmin(admin.ModelAdmin):\n    list_display = (\"section_id\", \"name\", \"html\", \"video\", \"file\")\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.DEBUG)\n    def save_model(self, request, obj, form, change):\n        self.logger.info(\"Saving section with ID: %s\", obj.section_id)\n        if obj.video and \"{{ video }}\" not in obj.html:\n            messages.warning(\n                request,\n                \"A video is selected for this section, but the {{ video }} tag is missing in the HTML. Please add the tag where you want the video to appear.\",",
        "detail": "app.nadooit_website.admin.section",
        "documentation": {}
    },
    {
        "label": "SessionStatusFilter",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.session",
        "description": "app.nadooit_website.admin.session",
        "peekOfCode": "class SessionStatusFilter(SimpleListFilter):\n    title = \"Session Status\"\n    parameter_name = \"session_status\"\n    def lookups(self, request, model_admin):\n        return (\n            (\"active\", \"Active\"),\n            (\"inactive\", \"Inactive\"),\n        )\n    def queryset(self, request, queryset):\n        now = timezone.now()",
        "detail": "app.nadooit_website.admin.session",
        "documentation": {}
    },
    {
        "label": "SessionSignalsInline",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.session",
        "description": "app.nadooit_website.admin.session",
        "peekOfCode": "class SessionSignalsInline(admin.TabularInline):\n    model = Session_Signal\n    extra = 0\n    readonly_fields = (\"section\", \"session_signal_type\", \"session_signal_date\")\n    can_delete = False  # Prevent deletion of Session_Signals\n    ordering = (\"-session_signal_date\",)  # Order Session_Signals by date\n    def has_add_permission(self, request, obj=None):\n        return False  # Prevent adding new Session_Signals through the admin interface\nclass SessionAdmin(admin.ModelAdmin):\n    list_display = (",
        "detail": "app.nadooit_website.admin.session",
        "documentation": {}
    },
    {
        "label": "SessionAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.session",
        "description": "app.nadooit_website.admin.session",
        "peekOfCode": "class SessionAdmin(admin.ModelAdmin):\n    list_display = (\n        \"session_status\",\n        \"session_start_time\",\n        \"session_score\",\n        \"weekly_average_score\",\n        \"group_average_score\",\n        \"group_lowest_score\",\n        \"group_highest_score\",\n        \"session_id\",",
        "detail": "app.nadooit_website.admin.session",
        "documentation": {}
    },
    {
        "label": "SESSION_ACTIVE_OFFSET",
        "kind": 5,
        "importPath": "app.nadooit_website.admin.session",
        "description": "app.nadooit_website.admin.session",
        "peekOfCode": "SESSION_ACTIVE_OFFSET = 100\nclass SessionStatusFilter(SimpleListFilter):\n    title = \"Session Status\"\n    parameter_name = \"session_status\"\n    def lookups(self, request, model_admin):\n        return (\n            (\"active\", \"Active\"),\n            (\"inactive\", \"Inactive\"),\n        )\n    def queryset(self, request, queryset):",
        "detail": "app.nadooit_website.admin.session",
        "documentation": {}
    },
    {
        "label": "VideoResolutionInline",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.video",
        "description": "app.nadooit_website.admin.video",
        "peekOfCode": "class VideoResolutionInline(admin.TabularInline):\n    model = VideoResolution\n    extra = 0\n# Add VideoAdmin for managing videos in the admin panel\nimport os\nimport shutil\nfrom django.conf import settings\nclass VideoForm(forms.ModelForm):\n    class Meta:\n        model = Video",
        "detail": "app.nadooit_website.admin.video",
        "documentation": {}
    },
    {
        "label": "VideoForm",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.video",
        "description": "app.nadooit_website.admin.video",
        "peekOfCode": "class VideoForm(forms.ModelForm):\n    class Meta:\n        model = Video\n        fields = \"__all__\"\n    def delete_video_files(self, video):\n        try:\n            delete_video_files(video)\n            VideoResolution.objects.filter(video=video).delete()\n        except ObjectDoesNotExist:\n            pass",
        "detail": "app.nadooit_website.admin.video",
        "documentation": {}
    },
    {
        "label": "VideoAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin.video",
        "description": "app.nadooit_website.admin.video",
        "peekOfCode": "class VideoAdmin(admin.ModelAdmin):\n    inlines = [VideoResolutionInline]\n    form = VideoForm  # use the custom form\n    actions = [\"delete_associated_files\", \"export_files\", \"cleanup_files\"]\n    def cleanup_files(self, request, queryset):\n        cleanup_video_files.delay()\n    def export_files(self, request, queryset):\n        def file_iterator(file_name, chunk_size=512):\n            with open(file_name, \"rb\") as f:\n                while True:",
        "detail": "app.nadooit_website.admin.video",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.nadooit_website.management.commands.create_sections",
        "description": "app.nadooit_website.management.commands.create_sections",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Create section templates from a JSON file\"\n    def handle(self, *args, **options):\n        # Define the paths\n        sections_json_path = os.path.join(\n            settings.BASE_DIR, \"nadooit_website\", \"input\", \"sections.json\"\n        )\n        templates_dir = os.path.join(\n            settings.BASE_DIR, \"nadooit_website\", \"sections_templates\"\n        )",
        "detail": "app.nadooit_website.management.commands.create_sections",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.nadooit_website.management.commands.export_templates",
        "description": "app.nadooit_website.management.commands.export_templates",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Export templates from the database to the filesystem\"\n    def add_arguments(self, parser):\n        output_dir = os.path.join(\n            settings.BASE_DIR, \"nadooit_website\", \"templates_sync\"\n        )\n        parser.add_argument(\n            \"--output-dir\",\n            type=str,\n            default=output_dir,",
        "detail": "app.nadooit_website.management.commands.export_templates",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.nadooit_website.management.commands.import_templates",
        "description": "app.nadooit_website.management.commands.import_templates",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Import templates from the filesystem into the database\"\n    def add_arguments(self, parser):\n        input_dir = os.path.join(settings.BASE_DIR, \"nadooit_website\", \"templates_sync\")\n        parser.add_argument(\n            \"--input-dir\",\n            type=str,\n            default=input_dir,\n            help=\"Input directory for the templates to import\",\n        )",
        "detail": "app.nadooit_website.management.commands.import_templates",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.nadooit_website.management.commands.prepare_embedding_data",
        "description": "app.nadooit_website.management.commands.prepare_embedding_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Prepare session data for training an embedding model\"\n    def handle(self, *args, **options):\n        sessions = prepare_session_data()\n        # Ensure the TrainingData directory exists\n        import os\n        training_data_dir = os.path.join(\"nadooit_website\", \"TrainingData\")\n        if not os.path.exists(training_data_dir):\n            os.makedirs(training_data_dir)\n        # Save session data to a file",
        "detail": "app.nadooit_website.management.commands.prepare_embedding_data",
        "documentation": {}
    },
    {
        "label": "prepare_session_data",
        "kind": 2,
        "importPath": "app.nadooit_website.management.commands.prepare_embedding_data",
        "description": "app.nadooit_website.management.commands.prepare_embedding_data",
        "peekOfCode": "def prepare_session_data():\n    sessions = Session.objects.all()\n    session_data = []\n    for session in sessions:\n        signals = Session_Signal.objects.filter(session=session)\n        signal_types = [signal.session_signal_type for signal in signals]\n        signal_type_ids = [hash(signal_type) % 1000 for signal_type in signal_types]\n        session_data.append(signal_type_ids)\n    return session_data\nclass Command(BaseCommand):",
        "detail": "app.nadooit_website.management.commands.prepare_embedding_data",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.nadooit_website.management.commands.train_embeddings",
        "description": "app.nadooit_website.management.commands.train_embeddings",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Train the embedding model using session data\"\n    def handle(self, *args, **options):\n        def load_session_data(file_path):\n            with open(file_path, \"r\") as infile:\n                session_data = [\n                    list(map(int, line.strip().split())) for line in infile.readlines()\n                ]\n            return session_data\n        file_path = \"nadooit_website/TrainingData/session_data.txt\"",
        "detail": "app.nadooit_website.management.commands.train_embeddings",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_website.migrations.saved.0023_remove_session_session_signals_and_more copy",
        "description": "app.nadooit_website.migrations.saved.0023_remove_session_session_signals_and_more copy",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"nadooit_website\", \"0022_session_experiment_group\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"session\",\n            name=\"session_signals\",\n        ),\n        migrations.AddField(",
        "detail": "app.nadooit_website.migrations.saved.0023_remove_session_session_signals_and_more copy",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_website.migrations.saved.0024_session_signals_session",
        "description": "app.nadooit_website.migrations.saved.0024_session_signals_session",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"nadooit_website\", \"0023_remove_session_session_signals\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"session_signals\",\n            name=\"session\",\n            field=models.ForeignKey(\n                null=True,",
        "detail": "app.nadooit_website.migrations.saved.0024_session_signals_session",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_website.migrations.0001_initial",
        "description": "app.nadooit_website.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(choices=[('fast_and_engaged', 'Fast and Engaged'), ('fast_and_not_engaged', 'Fast and Not Engaged'), ('slow_and_engaged', 'Slow and Engaged'), ('slow_and_not_engaged', 'Slow and Not Engaged')], max_length=255, unique=True)),",
        "detail": "app.nadooit_website.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "update_session_section_order",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.session",
        "description": "app.nadooit_website.tasks.session",
        "peekOfCode": "def update_session_section_order(session_id, next_section_id):\n    session = Session.objects.get(session_id=session_id)\n    next_section = Section.objects.get(section_id=next_section_id)\n    # Get the current Section_Order of the Session\n    current_section_order = session.session_section_order\n    # Fetch the Section_Order_Sections_Through_Model objects for the current section order\n    current_section_order_sections = (\n        current_section_order.sections.through.objects.filter(\n            section_order=current_section_order\n        ).order_by(\"order\")",
        "detail": "app.nadooit_website.tasks.session",
        "documentation": {}
    },
    {
        "label": "create_hls_files",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def create_hls_files(input_path, output_path, resolution, segment_duration=4):\n    hls_output_path = os.path.splitext(output_path)[0] + f\"_{resolution}p_hls\"\n    os.makedirs(hls_output_path, exist_ok=True)\n    playlist_file = os.path.join(hls_output_path, f\"playlist_{resolution}p.m3u8\")\n    width = -1\n    height = resolution\n    bitrate = \"1000k\"\n    gop_size = segment_duration * 30\n    ffmpeg_tools.ffmpeg_extract_subclip(\n        input_path,",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "convert_to_mp4",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def convert_to_mp4(input_path, output_path):\n    clip = VideoFileClip(input_path)\n    clip.write_videofile(output_path, codec=\"libx264\")\ndef reduce_bitrate(input_path, output_path, bitrate, crf, preset):\n    ffmpeg_command = f\"ffmpeg -i {input_path} -b:v {bitrate} -crf {crf} -preset {preset} {output_path}\"\n    subprocess.run(ffmpeg_command, shell=True, check=True)\ndef compress_video(input_path, output_path):\n    with open(input_path, \"rb\") as src_file:\n        with gzip.open(output_path, \"wb\") as dest_file:\n            shutil.copyfileobj(src_file, dest_file)",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "reduce_bitrate",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def reduce_bitrate(input_path, output_path, bitrate, crf, preset):\n    ffmpeg_command = f\"ffmpeg -i {input_path} -b:v {bitrate} -crf {crf} -preset {preset} {output_path}\"\n    subprocess.run(ffmpeg_command, shell=True, check=True)\ndef compress_video(input_path, output_path):\n    with open(input_path, \"rb\") as src_file:\n        with gzip.open(output_path, \"wb\") as dest_file:\n            shutil.copyfileobj(src_file, dest_file)\ndef scale_video(input_path, output_path, resolution):\n    clip = VideoFileClip(input_path)\n    height = resolution",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "compress_video",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def compress_video(input_path, output_path):\n    with open(input_path, \"rb\") as src_file:\n        with gzip.open(output_path, \"wb\") as dest_file:\n            shutil.copyfileobj(src_file, dest_file)\ndef scale_video(input_path, output_path, resolution):\n    clip = VideoFileClip(input_path)\n    height = resolution\n    scaled_clip = clip.resize(\n        height=height\n    )  # This will maintain the original aspect ratio",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "scale_video",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def scale_video(input_path, output_path, resolution):\n    clip = VideoFileClip(input_path)\n    height = resolution\n    scaled_clip = clip.resize(\n        height=height\n    )  # This will maintain the original aspect ratio\n    scaled_clip.write_videofile(output_path, codec=\"libx264\")\nimport os\nimport subprocess\nfrom django.core.exceptions import ObjectDoesNotExist",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "process_video_task",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def process_video_task(\n    input_path, output_path, resolution, bitrate, crf, preset, video_id\n):\n    try:\n        temp_path = input_path\n        scaled_output_path = os.path.splitext(output_path)[0] + f\"_{resolution}p.mp4\"\n        scale_video(temp_path, scaled_output_path, resolution)\n        reduced_output_path = os.path.splitext(scaled_output_path)[0] + \"_reduced.mp4\"\n        reduce_bitrate(scaled_output_path, reduced_output_path, bitrate, crf, preset)\n        os.remove(scaled_output_path)",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "cleanup_video_files",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def cleanup_video_files():\n    # List all video files and HLS directories currently referenced in the database\n    referenced_files = set()\n    referenced_dirs = set()\n    for video in Video.objects.all():\n        if video.original_file:\n            referenced_files.add(\n                os.path.join(settings.MEDIA_ROOT, video.original_file.name)\n            )\n        if video.preview_image:",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "create_streaming_files_task",
        "kind": 2,
        "importPath": "app.nadooit_website.tasks.video",
        "description": "app.nadooit_website.tasks.video",
        "peekOfCode": "def create_streaming_files_task(video_id):\n    from django.db import connections\n    try:\n        video = Video.objects.get(id=video_id)\n    except ObjectDoesNotExist:\n        print(f\"Video with id {video_id} does not exist\")\n        return\n    connections.close_all()\n    input_path = video.original_file.path\n    print(\"Input path:\", input_path)",
        "detail": "app.nadooit_website.tasks.video",
        "documentation": {}
    },
    {
        "label": "SessionStatusFilter",
        "kind": 6,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "class SessionStatusFilter(SimpleListFilter):\n    title = \"Session Status\"\n    parameter_name = \"session_status\"\n    def lookups(self, request, model_admin):\n        return (\n            (\"active\", \"Active\"),\n            (\"inactive\", \"Inactive\"),\n        )\n    def queryset(self, request, queryset):\n        now = timezone.now()",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "SessionSignalsInline",
        "kind": 6,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "class SessionSignalsInline(admin.TabularInline):\n    model = Session_Signal\n    extra = 0\n    readonly_fields = (\"section\", \"session_signal_type\", \"session_signal_date\")\n    can_delete = False  # Prevent deletion of Session_Signals\n    ordering = (\"-session_signal_date\",)  # Order Session_Signals by date\n    def has_add_permission(self, request, obj=None):\n        return False  # Prevent adding new Session_Signals through the admin interface\nclass SessionAdmin(admin.ModelAdmin):\n    list_display = (",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "SessionAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "class SessionAdmin(admin.ModelAdmin):\n    list_display = (\n        \"session_id\",\n        \"session_section_order\",\n        \"session_score\",\n        \"group_average_score\",\n        \"group_lowest_score\",\n        \"group_highest_score\",\n        \"session_status\",\n    )",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "WebsiteSectionsOrderTabularInline",
        "kind": 6,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "class WebsiteSectionsOrderTabularInline(OrderedTabularInline):\n    model = Section_Order_Sections_Through_Model\n    fields = (\"section\", \"move_up_down_links\")\n    readonly_fields = (\n        \"order\",\n        \"move_up_down_links\",\n    )\n    ordering = (\"order\",)\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "Section_OrderAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "class Section_OrderAdmin(OrderedInlineModelAdminMixin, admin.ModelAdmin):\n    list_display = (\"section_order_id\",)\n    inlines = (WebsiteSectionsOrderTabularInline,)\n    save_as = True\n# Add VideoAdmin for managing videos in the admin panel\nclass VideoAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        super().save_model(request, obj, form, change)\n        logger = logging.getLogger(__name__)\n        logger.setLevel(logging.DEBUG)",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "VideoAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "class VideoAdmin(admin.ModelAdmin):\n    def save_model(self, request, obj, form, change):\n        super().save_model(request, obj, form, change)\n        logger = logging.getLogger(__name__)\n        logger.setLevel(logging.DEBUG)\n        logger.debug(\"Checking if the uploaded video is an MKV file\")\n        if obj.video_file.name.lower().endswith(\".mkv\"):\n            logger.info(\"Starting transcoding task for video ID: %s\", obj.id)\n            transcode_video_to_mp4_task.delay(obj.id)\n# Update SectionAdmin to include video field in the form",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "SectionAdmin",
        "kind": 6,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "class SectionAdmin(admin.ModelAdmin):\n    list_display = (\"section_id\", \"name\", \"html\", \"video\")\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.DEBUG)\n    def save_model(self, request, obj, form, change):\n        self.logger.info(\"Saving section with ID: %s\", obj.section_id)\n        if obj.video and \"{{ video }}\" not in obj.html:\n            messages.warning(\n                request,\n                \"A video is selected for this section, but the {{ video }} tag is missing in the HTML. Please add the tag where you want the video to appear.\",",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "SESSION_ACTIVE_OFFSET",
        "kind": 5,
        "importPath": "app.nadooit_website.admin_old",
        "description": "app.nadooit_website.admin_old",
        "peekOfCode": "SESSION_ACTIVE_OFFSET = 100\nclass SessionStatusFilter(SimpleListFilter):\n    title = \"Session Status\"\n    parameter_name = \"session_status\"\n    def lookups(self, request, model_admin):\n        return (\n            (\"active\", \"Active\"),\n            (\"inactive\", \"Inactive\"),\n        )\n    def queryset(self, request, queryset):",
        "detail": "app.nadooit_website.admin_old",
        "documentation": {}
    },
    {
        "label": "NadooitWebsiteConfig",
        "kind": 6,
        "importPath": "app.nadooit_website.apps",
        "description": "app.nadooit_website.apps",
        "peekOfCode": "class NadooitWebsiteConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_website\"",
        "detail": "app.nadooit_website.apps",
        "documentation": {}
    },
    {
        "label": "UploadZipForm",
        "kind": 6,
        "importPath": "app.nadooit_website.forms",
        "description": "app.nadooit_website.forms",
        "peekOfCode": "class UploadZipForm(forms.Form):\n    file = forms.FileField()",
        "detail": "app.nadooit_website.forms",
        "documentation": {}
    },
    {
        "label": "RenameFileStorage",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class RenameFileStorage(FileSystemStorage):\n    def get_valid_name(self, name):\n        ext = name.split(\".\")[-1]\n        name = f\"{uuid4()}.{ext}\"\n        return name\n# Create your models here.\n# create a model for someone visiting the site\n# the visit holds the date and time of the visit and the site the visitor visited\nclass Visit(models.Model):\n    # the date and time of the visit",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Visit",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Visit(models.Model):\n    # the date and time of the visit\n    visit_date = models.DateTimeField(auto_now_add=True)\n    # the site the visitor visited\n    site = models.CharField(max_length=200)\n    # the string representation of the visit\n    def __str__(self):\n        return self.visit_date.strftime(\"%Y-%m-%d %H:%M:%S\") + \" \" + self.site\nclass Video(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Video",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Video(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    title = models.CharField(max_length=200)\n    preview_image = models.ImageField(upload_to=\"video_previews/\")\n    reprocess_video = models.BooleanField(default=False)\n    original_file = models.FileField(upload_to=\"original_videos/\")\n    def __str__(self):\n        return self.title\n    def save(self, *args, **kwargs):\n        try:",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "VideoResolution",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class VideoResolution(models.Model):\n    video = models.ForeignKey(\n        Video, related_name=\"resolutions\", on_delete=models.CASCADE\n    )\n    resolution = models.PositiveIntegerField()\n    video_file = models.FileField(upload_to=\"videos/\")\n    hls_playlist_file = models.FileField(upload_to=hls_upload_to, blank=True, null=True, max_length=500)\n    def __str__(self):\n        return f\"{self.video.title} ({self.resolution}p)\"\n    from django.db import transaction",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Signals_Option",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Signals_Option(models.Model):\n    signal_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    signal_date = models.DateTimeField(auto_now_add=True)\n    signal_type = models.CharField(max_length=200)\n    def __str__(self):\n        return self.signal_type\nclass Category(models.Model):\n    name = models.CharField(\n        max_length=255,\n        choices=(",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(\n        max_length=255,\n        choices=(\n            (\"fast_and_engaged\", \"Fast and Engaged\"),\n            (\"fast_and_not_engaged\", \"Fast and Not Engaged\"),\n            (\"slow_and_engaged\", \"Slow and Engaged\"),\n            (\"slow_and_not_engaged\", \"Slow and Not Engaged\"),\n        ),\n        unique=True,",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class File(models.Model):\n    \"\"\"\n    This class represents a file that can be linked to a section.\n    \"\"\"\n    file_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200)\n    file = models.FileField(\n        upload_to=\"uploads/\"\n    )  # assuming files are stored in a directory named 'uploads' at the media root\n    def __str__(self):",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Section(models.Model):\n    section_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200)\n    # content for the section\n    html = models.TextField()\n    # Add a ForeignKey to Video model with null and blank values set to True\n    video = models.ForeignKey(Video, on_delete=models.SET_NULL, null=True, blank=True)\n    file = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, blank=True)\n    categories = models.ManyToManyField(Category)\n    # Classify the section as a greeting section or not",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Plugin",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Plugin(models.Model):\n    name = models.CharField(max_length=200)\n    html = models.TextField()\n    def __str__(self):\n        return self.name\n    def is_valid_filename(self, filename):\n        return all(c.isalnum() or c in \"._- \" for c in filename)\n    def get_valid_filename(self, filename):\n        return \"\".join(c for c in filename if c.isalnum() or c in \"._- \")\n    def save(self, *args, **kwargs):",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "SectionScore",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class SectionScore(models.Model):\n    section = models.OneToOneField(Section, on_delete=models.CASCADE)\n    score = models.FloatField(default=0)\n    experiment_group = models.IntegerField(\n        choices=((0, \"Control\"), (1, \"Experimental\")), default=0\n    )\n    def __str__(self):\n        return f\"{self.section} - {self.experiment_group} - Score: {self.score}\"\n# Section_Order is a class that stores the order in which the sections are displayed to the visitor\n# It contains a list of section ids in the order they are displayed to the visitor",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section_Order",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Section_Order(models.Model):\n    section_order_id = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False\n    )\n    section_order_date = models.DateTimeField(auto_now_add=True)\n    # section_order is a list of section ids in the order they are displayed to the visitor\n    sections = models.ManyToManyField(\n        Section, through=\"Section_Order_Sections_Through_Model\"\n    )\n    plugins = models.ManyToManyField(Plugin)",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section_Order_Sections_Through_Model",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Section_Order_Sections_Through_Model(OrderedModel):\n    section_order = models.ForeignKey(Section_Order, on_delete=models.CASCADE)\n    section = models.ForeignKey(Section, on_delete=models.CASCADE)\n    order_with_respect_to = \"section_order\"\n    class Meta:\n        ordering = (\"section_order\", \"order\")\nclass ExperimentGroup(models.Model):\n    name = models.CharField(max_length=255)\n    section_order = models.ForeignKey(\n        Section_Order, on_delete=models.CASCADE, null=True",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "ExperimentGroup",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class ExperimentGroup(models.Model):\n    name = models.CharField(max_length=255)\n    section_order = models.ForeignKey(\n        Section_Order, on_delete=models.CASCADE, null=True\n    )\n    successful_sessions = models.IntegerField(default=0)\n    total_sessions = models.IntegerField(default=0)\n    def success_ratio(self):\n        if self.total_sessions == 0:\n            return 0",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Session(models.Model):\n    session_id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    session_section_order = models.ForeignKey(Section_Order, on_delete=models.CASCADE)\n    session_start_time = models.DateTimeField(auto_now_add=True)\n    session_duration = models.IntegerField(default=0)\n    total_interaction_time = models.FloatField(default=0)\n    shown_sections = models.ManyToManyField(Section, blank=True)\n    session_clicked_on_appointment_form = models.BooleanField(default=False)\n    session_score = models.IntegerField(default=0)\n    is_bot_visit = models.BooleanField(default=False)",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Session_Signal",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Session_Signal(models.Model):\n    session_signal_id = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False\n    )\n    session_signal_date = models.DateTimeField(auto_now_add=True)\n    session_signal_type = models.CharField(max_length=200)\n    section = models.ForeignKey(Section, on_delete=models.CASCADE)\n    session = models.ForeignKey(Session, on_delete=models.CASCADE, null=True)\n    def __str__(self):\n        return str(self.section) + \" \" + self.session_signal_type",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section_Transition",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Section_Transition(models.Model):\n    section_transition_id = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False\n    )\n    section_1_id = models.UUIDField()\n    section_2_id = models.UUIDField()\n    transition_percentage = models.IntegerField()\n    def __str__(self):\n        return (\n            self.section_transition_id",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section_Transition_Test",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Section_Transition_Test(models.Model):\n    section_test_id = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False\n    )\n    section_test_date = models.DateTimeField(auto_now_add=True)\n    # section_transition_id is the id of the section transition that is being tested\n    section_transition_id = models.ForeignKey(\n        Section_Transition, on_delete=models.CASCADE\n    )\n    section_was_pased = models.BooleanField(default=False)",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "Section_Competition",
        "kind": 6,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "class Section_Competition(models.Model):\n    section_competition_id = models.UUIDField(\n        primary_key=True, default=uuid.uuid4, editable=False\n    )\n    section_competition_date = models.DateTimeField(auto_now_add=True)\n    section_1_id = models.ForeignKey(Section, on_delete=models.CASCADE)\n    section_transition_tests = models.ManyToManyField(Section_Transition_Test)\n    def __str__(self):\n        return (\n            self.section_competition_id",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "hls_upload_to",
        "kind": 2,
        "importPath": "app.nadooit_website.models",
        "description": "app.nadooit_website.models",
        "peekOfCode": "def hls_upload_to(instance, filename):\n    # Create a string representing the desired upload path\n    path = f\"hls_playlists/{instance.video.id}_{instance.resolution}p\"\n    # Get the full system path\n    full_path = os.path.join(settings.MEDIA_ROOT, path)\n    # If the directory doesn't exist, create it\n    if not os.path.exists(full_path):\n        os.makedirs(full_path)\n    # Return the path, including the file's original name\n    return f\"{path}/{filename}\"",
        "detail": "app.nadooit_website.models",
        "documentation": {}
    },
    {
        "label": "refresh_embeddings",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def refresh_embeddings():\n    load_embeddings()\ndef get_embedding_for_signal(signal_id):\n    return embeddings[signal_id]\ndef get_similarity(signal_id1, signal_id2):\n    embedding1 = get_embedding_for_signal(signal_id1)\n    embedding2 = get_embedding_for_signal(signal_id2)\n    return cosine_similarity([embedding1], [embedding2])[0][0]\n \"\"\"\ndef get__session_tick():",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get_embedding_for_signal",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get_embedding_for_signal(signal_id):\n    return embeddings[signal_id]\ndef get_similarity(signal_id1, signal_id2):\n    embedding1 = get_embedding_for_signal(signal_id1)\n    embedding2 = get_embedding_for_signal(signal_id2)\n    return cosine_similarity([embedding1], [embedding2])[0][0]\n \"\"\"\ndef get__session_tick():\n    return session_tick\ndef add__signal(html_of_section, session_id, section_id, signal_type):",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get_similarity",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get_similarity(signal_id1, signal_id2):\n    embedding1 = get_embedding_for_signal(signal_id1)\n    embedding2 = get_embedding_for_signal(signal_id2)\n    return cosine_similarity([embedding1], [embedding2])[0][0]\n \"\"\"\ndef get__session_tick():\n    return session_tick\ndef add__signal(html_of_section, session_id, section_id, signal_type):\n    if signal_type == \"end_of_session_sections\":\n        logger.info(html_of_section)",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__session_tick",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__session_tick():\n    return session_tick\ndef add__signal(html_of_section, session_id, section_id, signal_type):\n    if signal_type == \"end_of_session_sections\":\n        logger.info(html_of_section)\n        end_of_session_tracking = (\n            '<div class=\"banner\" hx-post=\"{% url \\'nadooit_website:end_of_session_sections\\' '\n            + \"'\"\n            + str(session_id)\n            + \"'\"",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "add__signal",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def add__signal(html_of_section, session_id, section_id, signal_type):\n    if signal_type == \"end_of_session_sections\":\n        logger.info(html_of_section)\n        end_of_session_tracking = (\n            '<div class=\"banner\" hx-post=\"{% url \\'nadooit_website:end_of_session_sections\\' '\n            + \"'\"\n            + str(session_id)\n            + \"'\"\n            + \" \"\n            + \"'\"",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__template__for__section",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__template__for__section(section):\n    pass\ndef get_seen_sections(session_id):\n    try:\n        session = Session.objects.get(session_id=session_id)\n        seen_sections = session.shown_sections.all()\n        return seen_sections\n    except Session.DoesNotExist:\n        # Handle the case when the session does not exist\n        return None",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get_seen_sections",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get_seen_sections(session_id):\n    try:\n        session = Session.objects.get(session_id=session_id)\n        seen_sections = session.shown_sections.all()\n        return seen_sections\n    except Session.DoesNotExist:\n        # Handle the case when the session does not exist\n        return None\ndef categorize_user(session_id):\n    SOME_THRESHOLD = 5",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "categorize_user",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def categorize_user(session_id):\n    SOME_THRESHOLD = 5\n    session = Session.objects.get(session_id=session_id)\n    total_interaction_time = session.total_interaction_time\n    total_score = session.session_score\n    shown_sections_count = session.shown_sections.count()\n    if shown_sections_count > 0:\n        avg_interaction_time = total_interaction_time / shown_sections_count\n    else:\n        avg_interaction_time = 0",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "generate_video_embed_code",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def generate_video_embed_code(playlist_url_480p, playlist_url_720p, playlist_url_1080p):\n    player_uuid = str(uuid.uuid4())\n    context = {\n        \"player_uuid\": player_uuid,\n        \"playlist_url_480p\": playlist_url_480p,\n        \"playlist_url_720p\": playlist_url_720p,\n        \"playlist_url_1080p\": playlist_url_1080p,\n    }\n    video_embed_code = render_to_string(\"nadooit_website/video_embed.html\", context)\n    return video_embed_code",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "process_video",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def process_video(section: Section, html_of_section: str):\n    \"\"\"\n    This function replaces the video tag in the HTML with the appropriate video embed code.\n    \"\"\"\n    if section.video:\n        playlist_files_exist = all(\n            section.video.resolutions.filter(resolution=res).first()\n            and section.video.resolutions.filter(resolution=res)\n            .first()\n            .hls_playlist_file",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "process_file",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def process_file(section: Section, html_of_section: str):\n    \"\"\"\n    This function replaces the file tag in the HTML with the appropriate download button.\n    \"\"\"\n    if \"{{ file }}\" in html_of_section:\n        if section.file:\n            file_name = section.file.name\n            file_url = section.file.file.url\n            # Render the file download button\n            context = {\"file_url\": file_url, \"file_name\": file_name}",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__section_html_including_signals__for__section_and_session_id",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__section_html_including_signals__for__section_and_session_id(\n    section: Section, session_id\n):\n    html_of_section = section.html\n    logger.info(f\"Section: {section.html}\")\n    section_id = section.section_id\n    signal_options = section.signal_options.all()\n    if signal_options is not None:\n        for signal_option in signal_options:\n            html_of_section = add__signal(",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__template__for__session_id",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__template__for__session_id(session_id):\n    # start_section = get_next_section(session_id)\n    section_entry = get__sections__for__session_id(session_id)\n    # combine all the html of the sections into one html string as section_entry_html\n    # use a for loop to iterate over all the sections\n    # add all the tracking signals to the html\n    section_entry_html = \"\"\n    section_id = \"\"\n    for i, section in enumerate(section_entry):\n        section_id = section.section_id",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "create__session_signal__for__session_id",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def create__session_signal__for__session_id(session_id, section_id, signal_type):\n    CHANGE_FOR_VOTE = 30\n    session = Session.objects.get(session_id=session_id)\n    section = Section.objects.get(section_id=section_id)\n    session_signal = Session_Signal(\n        session_signal_type=signal_type, section=section, session=session\n    )\n    session_signal.save()\n    # Update the section score based on the signal_type\n    section_score, created = SectionScore.objects.get_or_create(section=section)",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__sections__for__session_id",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__sections__for__session_id(session_id):\n    return (\n        Session.objects.get(session_id=session_id)\n        .session_section_order.sections.all()\n        .order_by(\"section_order_sections_through_model\")\n    )\ndef create__session():\n    # session_variant = \"control\" if random.random() < 0.6 else \"experimental\"\n    # for testing purposes\n    session_variant = \"control\"",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "create__session",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def create__session():\n    # session_variant = \"control\" if random.random() < 0.6 else \"experimental\"\n    # for testing purposes\n    session_variant = \"control\"\n    section_order = get_most_successful_section_order()\n    session = Session(session_section_order=section_order)\n    session.save()  # Save the session first to create a record in the database\n    session.variant = session_variant\n    if session_variant == \"experimental\":\n        assign_experiment_group(session.session_id)",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get_most_successful_section_order",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get_most_successful_section_order():\n    # Replace this with the actual logic for finding the most successful Section_Order\n    if settings.DEBUG:\n        return Section_Order.objects.get(\n            section_order_id=\"283b9e7b-f463-4d82-8e9e-838c618223be\"\n        )\n    else:\n        return Section_Order.objects.get(\n            section_order_id=\"23afce39-e88f-4c5b-a2a0-e197116d6113\"\n        )",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "received__session_still_active_signal__for__session_id",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def received__session_still_active_signal__for__session_id(session_id):\n    session = Session.objects.get(session_id=session_id)\n    session.session_duration = session_tick + session.session_duration\n    session.save()\n    return session.session_id\ndef get_next_best_section_for_experimental_group(\n    user_category, seen_sections, last_shown_section_id=None\n):\n    sections = (\n        Section.objects.filter(categories__name=user_category)",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get_next_best_section_for_experimental_group",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get_next_best_section_for_experimental_group(\n    user_category, seen_sections, last_shown_section_id=None\n):\n    sections = (\n        Section.objects.filter(categories__name=user_category)\n        .exclude(section_id__in=seen_sections)\n        .exclude(section_id=last_shown_section_id)\n        .order_by(\"-sectionscore__score\")\n    )\n    if sections.exists():",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__next_section__for__session_id_and_current_section_id",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__next_section__for__session_id_and_current_section_id(\n    session_id, current_section_id\n) -> Optional[Section]:\n    session = Session.objects.get(session_id=session_id)\n    current_section = Section.objects.get(section_id=current_section_id)\n    current_section_order = session.session_section_order\n    ordered_sections = current_section_order.sections.all().order_by(\n        \"section_order_sections_through_model__order\"\n    )\n    seen_sections = session.shown_sections.values_list(\"section_id\", flat=True)",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__next_best_section",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__next_best_section(session_id, current_section_id):\n    current_section = Section.objects.get(id=current_section_id)\n    session = Session.objects.get(session_id=session_id)\n    experiment_group = session.experiment_group\n    if session.variant == \"control\":\n        section_scores = (\n            SectionScore.objects.filter(experiment_group=experiment_group)\n            .exclude(section=current_section)\n            .order_by(\"-score\")\n        )",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get_next_best_section_with_transitions",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get_next_best_section_with_transitions(\n    user_category, seen_sections, current_section_id, next_section_id\n) -> Optional[Section]:\n    # Get sections with the user_category and exclude plugin sections\n    sections = Section.objects.filter(category=user_category)\n    # Get transitions for the current section\n    transitions = Section_Transition.objects.filter(section_1_id=current_section_id)\n    # Exclude sections that have already been shown\n    valid_transitions = transitions.exclude(section_2_id__in=seen_sections)\n    # Filter transitions with sections that match the user_category",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__next_section_html",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__next_section_html(session_id, current_section_id):\n    session = Session.objects.get(session_id=session_id)\n    current_section = Section.objects.get(section_id=current_section_id)\n    current_section_order = session.session_section_order\n    ordered_sections = current_section_order.sections.all().order_by(\n        \"section_order_sections_through_model__order\"\n    )\n    seen_sections = session.shown_sections.values_list(\"section_id\", flat=True)\n    # Get user category\n    user_category = categorize_user(session_id)",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "check__session_id__is_valid",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def check__session_id__is_valid(session_id: uuid):\n    return Session.objects.filter(session_id=session_id).exists()\ndef get__first_section():\n    # check if there are the last first section tests are done.\n    # To find that out take all first section tests and check if they are done.\n    # That can be figured out by checking if the session_end_time is futher in the past than the session start_time + session_duration + session_tick.\n    # If all first section tests are done, evalualte them.\n    # If not create a new competition and get the first section.\n    pass\ndef assign_experiment_group(session_id):",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get__first_section",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get__first_section():\n    # check if there are the last first section tests are done.\n    # To find that out take all first section tests and check if they are done.\n    # That can be figured out by checking if the session_end_time is futher in the past than the session start_time + session_duration + session_tick.\n    # If all first section tests are done, evalualte them.\n    # If not create a new competition and get the first section.\n    pass\ndef assign_experiment_group(session_id):\n    # Retrieve the session object using the session_id\n    session = Session.objects.get(session_id=session_id)",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "assign_experiment_group",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def assign_experiment_group(session_id):\n    # Retrieve the session object using the session_id\n    session = Session.objects.get(session_id=session_id)\n    # Get all available experimental groups\n    experiment_groups = ExperimentGroup.objects.all()\n    # If there are existing experimental groups, randomly select one\n    # Otherwise, create a new experimental group with the name \"Default\"\n    if experiment_groups.exists():\n        experiment_group = random.choice(experiment_groups)\n    else:",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "create_new_section_order",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def create_new_section_order():\n    # Replace this with the actual logic for creating a new Section_Order\n    section_order = Section_Order.objects.create()\n    section_order.save()\n    return section_order\ndef get_next_section_based_on_variant(\n    session_id, current_section_id, user_category, seen_sections, variant\n):\n    session = Session.objects.get(session_id=session_id)\n    if variant == \"experimental\":",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "get_next_section_based_on_variant",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def get_next_section_based_on_variant(\n    session_id, current_section_id, user_category, seen_sections, variant\n):\n    session = Session.objects.get(session_id=session_id)\n    if variant == \"experimental\":\n        next_section = get_next_best_section_for_experimental_group(\n            user_category, seen_sections, last_shown_section_id=current_section_id\n        )\n    else:\n        next_section = get__next_section__for__session_id_and_current_section_id(",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "delete_video_files",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def delete_video_files(video):\n    try:\n        # Load the JSON configuration file\n        try:\n            with open(\"video_config.json\") as config_file:\n                config = json.load(config_file)\n        except Exception as e:\n            print(f\"Error loading configuration file: {e}\")\n            return\n        original_file_name = os.path.splitext(",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "zip_files",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def zip_files(file_paths, output_name):\n    with zipfile.ZipFile(output_name, \"w\") as zipf:\n        for file in file_paths:\n            zipf.write(file)\n    return output_name\nimport zipfile\nimport os\ndef zip_directories_and_files(paths, output_name):\n    with zipfile.ZipFile(output_name, \"w\") as zipf:\n        for path in paths:",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "zip_directories_and_files",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def zip_directories_and_files(paths, output_name):\n    with zipfile.ZipFile(output_name, \"w\") as zipf:\n        for path in paths:\n            if os.path.isfile(path):\n                zipf.write(path, arcname=os.path.basename(path))\n            elif os.path.isdir(path):\n                for root, _, files in os.walk(path):\n                    for file in files:\n                        file_path = os.path.join(root, file)\n                        arcname = os.path.relpath(",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "handle_uploaded_file",
        "kind": 2,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "def handle_uploaded_file(file):\n    temp_dir = os.path.join(settings.MEDIA_ROOT, \"temp\")\n    os.makedirs(temp_dir, exist_ok=True)\n    try:\n        with zipfile.ZipFile(file, \"r\") as zip_ref:\n            zip_ref.extractall(temp_dir)\n        with open(os.path.join(temp_dir, \"video_data.json\"), \"r\") as json_file:\n            video_data = json.load(json_file)\n        video, _ = Video.objects.update_or_create(\n            id=video_data[\"id\"],",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nsession_tick = 5\n\"\"\" \n# optimatzion\nfrom . import embeddings\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom . import load_embeddings\ndef refresh_embeddings():\n    load_embeddings()\ndef get_embedding_for_signal(signal_id):",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "session_tick",
        "kind": 5,
        "importPath": "app.nadooit_website.services",
        "description": "app.nadooit_website.services",
        "peekOfCode": "session_tick = 5\n\"\"\" \n# optimatzion\nfrom . import embeddings\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom . import load_embeddings\ndef refresh_embeddings():\n    load_embeddings()\ndef get_embedding_for_signal(signal_id):\n    return embeddings[signal_id]",
        "detail": "app.nadooit_website.services",
        "documentation": {}
    },
    {
        "label": "test_check__session_id__is_valid",
        "kind": 2,
        "importPath": "app.nadooit_website.test_services",
        "description": "app.nadooit_website.test_services",
        "peekOfCode": "def test_check__session_id__is_valid():\n    session_id = uuid.uuid4()\n    session = baker.make(\"nadooit_website.Session\", session_id=session_id)\n    assert session.session_id == session_id",
        "detail": "app.nadooit_website.test_services",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.nadooit_website.urls",
        "description": "app.nadooit_website.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.new_index, name=\"index\"),\n    path(\"impressum\", views.impressum, name=\"impressum\"),\n    path(\"datenschutz\", views.datenschutz, name=\"datenschutz\"),\n    path(\"statistics\", views.statistics, name=\"statistics\"),\n    path(\n        \"get_next_section/<str:session_id>/<str:current_section_id>\",\n        views.get_next_section,\n        name=\"get_next_section\",\n    ),",
        "detail": "app.nadooit_website.urls",
        "documentation": {}
    },
    {
        "label": "user_is_staf",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def user_is_staf(user: User) -> bool:\n    return user.is_staff\n# Create your views here.\ndef index(request):\n    # create a visit object for the index page\n    visit = Visit(site=\"Index\")\n    # save the visit\n    visit.save()\n    return render(request, \"nadooit_website/index.html\", {\"page_title\": \"Home\"})\ndef new_index(request):",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def index(request):\n    # create a visit object for the index page\n    visit = Visit(site=\"Index\")\n    # save the visit\n    visit.save()\n    return render(request, \"nadooit_website/index.html\", {\"page_title\": \"Home\"})\ndef new_index(request):\n    # create a visit object for the index page\n    visit = Visit(site=\"New_Index\")\n    # save the visit",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "new_index",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def new_index(request):\n    # create a visit object for the index page\n    visit = Visit(site=\"New_Index\")\n    # save the visit\n    visit.save()\n    # create a session id used to identify the user for the visit\n    session_id = create__session()\n    section_entry_template = get__template__for__session_id(session_id)\n    return render(\n        request,",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def signal(request, session_id, section_id, signal_type):\n    if check__session_id__is_valid(session_id):\n        create__session_signal__for__session_id(session_id, section_id, signal_type)\n        if signal_type == \"mouseenter_once\":\n            logger.info(\n                str(session_id)\n                + \" \"\n                + str(section_id)\n                + \" \"\n                + str(signal_type)",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "end_of_session_sections",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def end_of_session_sections(request, session_id, current_section_id):\n    if request.htmx:\n        logger.info(\"end_of_session_sections htmx\")\n        if check__session_id__is_valid(session_id):\n            logger.info(\"end_of_session_sections valid session\")\n            create__session_signal__for__session_id(\n                section_id=current_section_id,\n                session_id=session_id,\n                signal_type=\"end_of_session_sections\",\n            )",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "get_next_section",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def get_next_section(request, session_id, current_section_id):\n    if request.htmx:\n        if check__session_id__is_valid(session_id):\n            next_section_template = get__next_section_html(\n                session_id, current_section_id\n            )\n            if next_section_template:\n                return render(request, next_section_template)\n            else:\n                return django.http.HttpResponse(\"No more sections available.\")",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "session_is_active_signal",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def session_is_active_signal(request, session_id):\n    if request.htmx:\n        if check__session_id__is_valid(session_id):\n            # all active sessions send a singlnal to this view\n            # the time is set to session_duration of the session for the given session_id in the database\n            received__session_still_active_signal__for__session_id(session_id)\n            return django.http.HttpResponse()\n        else:\n            return django.http.HttpResponseForbidden()\n    else:",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "impressum",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def impressum(request):\n    # create a visit object\n    visit = Visit(site=\"Impressum\")\n    # save the visit\n    visit.save()\n    return render(\n        request, \"nadooit_website/impressum.html\", {\"page_title\": \"Impressum\"}\n    )\ndef datenschutz(request):\n    # create a visit object",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "datenschutz",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def datenschutz(request):\n    # create a visit object\n    visit = Visit(site=\"Datenschutz\")\n    # save the visit\n    visit.save()\n    return render(\n        request,\n        \"nadooit_website/datenschutz.html\",\n        {\"page_title\": \"Datenschutzerklärung\"},\n    )",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def statistics(request):\n    return render(\n        request,\n        \"nadooit_website/statistics.html\",\n        {\"page_title\": \"Statistiken\", \"visits\": Visit.objects.all()},\n    )\ndef section_transitions(request, group_filter=None):\n    filename = (\n        f\"section_transitions_{group_filter}.html\"\n        if group_filter",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "section_transitions",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def section_transitions(request, group_filter=None):\n    filename = (\n        f\"section_transitions_{group_filter}.html\"\n        if group_filter\n        else \"section_transitions.html\"\n    )\n    file_path = os.path.join(\n        settings.BASE_DIR, \"nadooit_website\", \"section_transition\", filename\n    )\n    with open(file_path, \"r\") as file:",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "visualize_session_data",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def visualize_session_data(request):\n    # Call the function to generate the Plotly HTML file\n    analyze_and_visualize_session_data()\n    # Render the section_transitions.html template\n    return render(request, \"section_transitions.html\")\n \"\"\"\nfrom django.shortcuts import render\nfrom .forms import UploadZipForm\nfrom django.contrib.admin.views.decorators import staff_member_required\nfrom django.contrib.auth.decorators import login_required",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "upload_video_zip",
        "kind": 2,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "def upload_video_zip(request):\n    if request.method == \"POST\":\n        form = UploadZipForm(request.POST, request.FILES)\n        if form.is_valid():\n            try:\n                handle_uploaded_file(request.FILES[\"file\"])\n                messages.success(\n                    request, \"The video zip file was successfully processed.\"\n                )\n            except Exception as e:",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app.nadooit_website.views",
        "description": "app.nadooit_website.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef user_is_staf(user: User) -> bool:\n    return user.is_staff\n# Create your views here.\ndef index(request):\n    # create a visit object for the index page\n    visit = Visit(site=\"Index\")\n    # save the visit\n    visit.save()\n    return render(request, \"nadooit_website/index.html\", {\"page_title\": \"Home\"})",
        "detail": "app.nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "analyze_and_visualize_session_data",
        "kind": 2,
        "importPath": "app.nadooit_website.visulize",
        "description": "app.nadooit_website.visulize",
        "peekOfCode": "def analyze_and_visualize_session_data():\n    group_filter = \"control\"\n    sessions, session_signals = load_session_data()\n    validate_data(sessions, session_signals)\n    section_transitions = create_section_transition_graph(session_signals, group_filter)\n    visualize_section_transitions(section_transitions, group_filter)\n    plot_interactive_section_transitions(section_transitions, group_filter)\ndef load_session_data():\n    sessions = pd.DataFrame.from_records(Session.objects.values())\n    session_signals = pd.DataFrame.from_records(Session_Signal.objects.values())",
        "detail": "app.nadooit_website.visulize",
        "documentation": {}
    },
    {
        "label": "load_session_data",
        "kind": 2,
        "importPath": "app.nadooit_website.visulize",
        "description": "app.nadooit_website.visulize",
        "peekOfCode": "def load_session_data():\n    sessions = pd.DataFrame.from_records(Session.objects.values())\n    session_signals = pd.DataFrame.from_records(Session_Signal.objects.values())\n    print(\"Sessions columns:\", sessions.columns)\n    print(\"Session_Signals columns:\", session_signals.columns)\n    return sessions, session_signals\ndef validate_data(sessions, session_signals):\n    # Check if there are any sections in the sessions DataFrame that are not present in the session_signals DataFrame\n    missing_sections = set(sessions[\"section_id\"]).difference(\n        session_signals[\"section_id\"]",
        "detail": "app.nadooit_website.visulize",
        "documentation": {}
    },
    {
        "label": "validate_data",
        "kind": 2,
        "importPath": "app.nadooit_website.visulize",
        "description": "app.nadooit_website.visulize",
        "peekOfCode": "def validate_data(sessions, session_signals):\n    # Check if there are any sections in the sessions DataFrame that are not present in the session_signals DataFrame\n    missing_sections = set(sessions[\"section_id\"]).difference(\n        session_signals[\"section_id\"]\n    )\n    if missing_sections:\n        print(\n            f\"Warning: Missing section data for the following sections: {', '.join(map(str, missing_sections))}\"\n        )\ndef create_section_transition_graph(session_signals, group_filter=None):",
        "detail": "app.nadooit_website.visulize",
        "documentation": {}
    },
    {
        "label": "create_section_transition_graph",
        "kind": 2,
        "importPath": "app.nadooit_website.visulize",
        "description": "app.nadooit_website.visulize",
        "peekOfCode": "def create_section_transition_graph(session_signals, group_filter=None):\n    section_transitions = defaultdict(int)\n    for _, session in session_signals.iterrows():\n        if group_filter and session[\"variant\"] != group_filter:\n            continue\n        if session[\"signal_type\"] in [\"revealed\", \"end_of_session_sections\"]:\n            from_section_id = session[\"from_section_id\"]\n            to_section_id = session[\"to_section_id\"]\n            section_transitions[(from_section_id, to_section_id)] += 1\n    return section_transitions",
        "detail": "app.nadooit_website.visulize",
        "documentation": {}
    },
    {
        "label": "visualize_section_transitions",
        "kind": 2,
        "importPath": "app.nadooit_website.visulize",
        "description": "app.nadooit_website.visulize",
        "peekOfCode": "def visualize_section_transitions(section_transitions, group_filter=None):\n    dot = Digraph(comment=\"Section Transitions\")\n    for (from_section, to_section), count in section_transitions.items():\n        dot.node(str(from_section), str(from_section))\n        dot.node(str(to_section), str(to_section))\n        dot.edge(str(from_section), str(to_section), label=str(count))\n    output_filename = (\n        f\"section_transitions_{group_filter}.gv\"\n        if group_filter\n        else \"section_transitions.gv\"",
        "detail": "app.nadooit_website.visulize",
        "documentation": {}
    },
    {
        "label": "plot_interactive_section_transitions",
        "kind": 2,
        "importPath": "app.nadooit_website.visulize",
        "description": "app.nadooit_website.visulize",
        "peekOfCode": "def plot_interactive_section_transitions(section_transitions, group_filter=None):\n    edges_df = pd.DataFrame(\n        [\n            {\"from_section\": from_section, \"to_section\": to_section, \"count\": count}\n            for (from_section, to_section), count in section_transitions.items()\n        ]\n    )\n    fig = px.sunburst(\n        edges_df,\n        path=[\"from_section\", \"to_section\"],",
        "detail": "app.nadooit_website.visulize",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.nadooit_workflow.migrations.0001_initial",
        "description": "app.nadooit_workflow.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('nadooit_crm', '0001_initial'),\n        ('nadooit_program', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Process',\n            fields=[",
        "detail": "app.nadooit_workflow.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NadooitWorkflowConfig",
        "kind": 6,
        "importPath": "app.nadooit_workflow.apps",
        "description": "app.nadooit_workflow.apps",
        "peekOfCode": "class NadooitWorkflowConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"nadooit_workflow\"",
        "detail": "app.nadooit_workflow.apps",
        "documentation": {}
    },
    {
        "label": "Process",
        "kind": 6,
        "importPath": "app.nadooit_workflow.models",
        "description": "app.nadooit_workflow.models",
        "peekOfCode": "class Process(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    # process_trigger_evnets is a list of events that trigger the process. They are represented as a list of strings.\n    # process_trigger_events = models.CharField(max_length=255)\t#list of events that trigger the process.\n    # process_subscriptions = models.CharField(max_length=255)\n    trigger_process = models.ForeignKey(\"self\", on_delete=models.SET_NULL, null=True)\n    tiggers_process = models.ManyToManyField(\"self\", blank=True)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    description = models.TextField()",
        "detail": "app.nadooit_workflow.models",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app.manage",
        "description": "app.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"nadooit.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "app.manage",
        "documentation": {}
    }
]
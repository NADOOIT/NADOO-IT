[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "nadooit",
        "description": "nadooit",
        "isExtraImport": true,
        "detail": "nadooit",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "create_execution",
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "check_user",
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "create_token",
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "index_management",
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "TokenForm",
        "importPath": "nadooit_api_executions_system.forms",
        "description": "nadooit_api_executions_system.forms",
        "isExtraImport": true,
        "detail": "nadooit_api_executions_system.forms",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "nadooit.asgi",
        "description": "nadooit.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "nadooit.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n#Production \n#config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\n#Development\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "#config_json",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "#config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\n#Development\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\n#SECRET_KEY = 'django-insecure-r_!=ggg^bx66haa&uq%q9!u1)%rax+f((om7_!c3qn)8#ch3#t'\nSECRET_KEY = config.get('SECRET_KEY')",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "config_json",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\n#SECRET_KEY = 'django-insecure-r_!=ggg^bx66haa&uq%q9!u1)%rax+f((om7_!c3qn)8#ch3#t'\nSECRET_KEY = config.get('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "#SECRET_KEY",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "#SECRET_KEY = 'django-insecure-r_!=ggg^bx66haa&uq%q9!u1)%rax+f((om7_!c3qn)8#ch3#t'\nSECRET_KEY = config.get('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "SECRET_KEY = config.get('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'nadooit_api_executions_system.apps.NadooitApiExecutionsSystemConfig',\n    'nadooit_website.apps.NadooitWebsiteConfig',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n]",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nROOT_URLCONF = 'nadooit.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "ROOT_URLCONF = 'nadooit.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "WSGI_APPLICATION = 'nadooit.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        \t'ENGINE': 'django.db.backends.postgresql',\n        \t'NAME': config.get('POSTGRE_SQL_DB_NAME'),\n        \t'USER': config.get('POSTGRE_SQL_DB_USER'),\n        \t'PASSWORD': config.get('POSTGRE_SQL_DB_PASSWORD'),\n        \t'HOST': 'localhost',  ",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        \t'ENGINE': 'django.db.backends.postgresql',\n        \t'NAME': config.get('POSTGRE_SQL_DB_NAME'),\n        \t'USER': config.get('POSTGRE_SQL_DB_USER'),\n        \t'PASSWORD': config.get('POSTGRE_SQL_DB_PASSWORD'),\n        \t'HOST': 'localhost',  \n        \t'PORT': config.get('POSTGRE_SQL_DB_PORT')\n    \t}\n}",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'nadooit_api_executions_system.User'\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n#according to doc STATIC_ROOT = \"/var/www/nadooit.de/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = 'static/'\n\"\"\" According to doc",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n#according to doc STATIC_ROOT = \"/var/www/nadooit.de/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = 'static/'\n\"\"\" According to doc\nSTATICFILES_DIRS = [",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n#according to doc STATIC_ROOT = \"/var/www/nadooit.de/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = 'static/'\n\"\"\" According to doc\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n#according to doc STATIC_ROOT = \"/var/www/nadooit.de/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = 'static/'\n\"\"\" According to doc\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n    '/var/www/static/',",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = 'static/'\n\"\"\" According to doc\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n    '/var/www/static/',\n]\n\"\"\"\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n\"\"\" According to doc\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n    '/var/www/static/',\n]\n\"\"\"\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n    '/var/www/static/',\n]\n\"\"\"\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "STATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "nadooit.settings",
        "description": "nadooit.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "nadooit.settings",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "nadooit.urls",
        "description": "nadooit.urls",
        "peekOfCode": "admin.site.site_header = 'NADOOIT Administration'  # default: \"Django Administration\"\nadmin.site.index_title = 'NADOOIT Administration Site'  # default: \"Site administration\"\nadmin.site.site_title = 'NADOOIT'\n#This is where the urls are placed\nurlpatterns = [\n                  path('', include('nadooit_website.urls')),\n                  path('api/', include('nadooit_api_executions_system.urls.api')),\n                  path('token/', include('nadooit_api_executions_system.urls.management')),\n                  path('admin/', admin.site.urls),\n              ] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "nadooit.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "nadooit.urls",
        "description": "nadooit.urls",
        "peekOfCode": "admin.site.index_title = 'NADOOIT Administration Site'  # default: \"Site administration\"\nadmin.site.site_title = 'NADOOIT'\n#This is where the urls are placed\nurlpatterns = [\n                  path('', include('nadooit_website.urls')),\n                  path('api/', include('nadooit_api_executions_system.urls.api')),\n                  path('token/', include('nadooit_api_executions_system.urls.management')),\n                  path('admin/', admin.site.urls),\n              ] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "nadooit.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "nadooit.urls",
        "description": "nadooit.urls",
        "peekOfCode": "admin.site.site_title = 'NADOOIT'\n#This is where the urls are placed\nurlpatterns = [\n                  path('', include('nadooit_website.urls')),\n                  path('api/', include('nadooit_api_executions_system.urls.api')),\n                  path('token/', include('nadooit_api_executions_system.urls.management')),\n                  path('admin/', admin.site.urls),\n              ] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "nadooit.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "nadooit.urls",
        "description": "nadooit.urls",
        "peekOfCode": "urlpatterns = [\n                  path('', include('nadooit_website.urls')),\n                  path('api/', include('nadooit_api_executions_system.urls.api')),\n                  path('token/', include('nadooit_api_executions_system.urls.management')),\n                  path('admin/', admin.site.urls),\n              ] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "nadooit.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "nadooit.wsgi",
        "description": "nadooit.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "nadooit.wsgi",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.urls.api",
        "description": "nadooit_api_executions_system.urls.api",
        "peekOfCode": "urlpatterns = [\n    path('executions', create_execution, name=\"create\"),\n    path('users/check', check_user, name=\"check\"),\n]",
        "detail": "nadooit_api_executions_system.urls.api",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.urls.management",
        "description": "nadooit_api_executions_system.urls.management",
        "peekOfCode": "urlpatterns = [\n    path('create', create_token, name=\"create-token\"),\n    path('', index_management, name=\"manage-token\"),\n]",
        "detail": "nadooit_api_executions_system.urls.management",
        "documentation": {}
    },
    {
        "label": "create_execution",
        "kind": 2,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "def create_execution(request):\n    try:\n        if request.data['NADOOIT__API_KEY'] == NADOOIT__API_KEY:\n            user = Token.objects.filter(token=request.data['NADOOIT__USER_AUTH_TOKEN'],\n                                        is_active=True)\n            if len(user) > 0:\n                obj = CustomerProgram.objects.get(id=request.data['program_id'])\n                CustomerProgramExecution.objects.create(program_time_saved=obj.program_time_saved,\n                                                        customer_program_id=obj)\n                return Response({\"status_code\": 200,",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 2,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "def token(request):\n    try:\n        if request.data['NADOOIT__API_KEY'] == NADOOIT__API_KEY:\n            if request.method == 'GET':\n                print(\"its a get\")\n                if request.data['NADOOIT__USER_AUTH_TOKEN'] != \"None\":\n                    print(\"have NADOOIT__USER_AUTH_TOKEN\")\n                    obj = Token.objects.get(user_code=request.data['NADOOIT__USER_CODE'], token=request.data['NADOOIT__USER_AUTH_TOKEN'],\n                                            is_active=True)\n                    duration = timezone.now() - obj.created_at",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "check_user",
        "kind": 2,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "def check_user(request):\n    if request.data['NADOOIT__API_KEY'] == NADOOIT__API_KEY:\n        obj = Token.objects.get(user_code=request.data['NADOOIT__USER_CODE'], token=request.data['NADOOIT__USER_AUTH_TOKEN'],\n                                is_active=False)\n        if obj:\n            return True\n        else:\n            return False\n    else:\n        return Response({\"status_code\": 403, \"msg\": \"access denied\"})",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "#NADOOIT__API_KEY",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "#NADOOIT__API_KEY = \"rtjs0t24oc(+1m6mvyd^^+*zm2=(n$#b9&#j9xxn6qi^=bj0eo\"\n#NADOOIT__API_KEY = os.environ.get('NADOOIT__API_KEY')\n#for local development\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\n#for production\n#config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\n@api_view(['POST'])",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "#NADOOIT__API_KEY",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "#NADOOIT__API_KEY = os.environ.get('NADOOIT__API_KEY')\n#for local development\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\n#for production\n#config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\n@api_view(['POST'])\ndef create_execution(request):",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "config_json",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\n#for production\n#config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\n@api_view(['POST'])\ndef create_execution(request):\n    try:\n        if request.data['NADOOIT__API_KEY'] == NADOOIT__API_KEY:",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "#config_json",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "#config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\n@api_view(['POST'])\ndef create_execution(request):\n    try:\n        if request.data['NADOOIT__API_KEY'] == NADOOIT__API_KEY:\n            user = Token.objects.filter(token=request.data['NADOOIT__USER_AUTH_TOKEN'],\n                                        is_active=True)",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "NADOOIT__API_KEY",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.api",
        "description": "nadooit_api_executions_system.views.api",
        "peekOfCode": "NADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\n@api_view(['POST'])\ndef create_execution(request):\n    try:\n        if request.data['NADOOIT__API_KEY'] == NADOOIT__API_KEY:\n            user = Token.objects.filter(token=request.data['NADOOIT__USER_AUTH_TOKEN'],\n                                        is_active=True)\n            if len(user) > 0:\n                obj = CustomerProgram.objects.get(id=request.data['program_id'])\n                CustomerProgramExecution.objects.create(program_time_saved=obj.program_time_saved,",
        "detail": "nadooit_api_executions_system.views.api",
        "documentation": {}
    },
    {
        "label": "index_management",
        "kind": 2,
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "peekOfCode": "def index_management(request):\n    return render(request, 'token/index_token_management.html')\ndef create_token(request):\n    submitted = False\n    if request.method == \"POST\":\n        form = TokenForm(request.POST)\n        if form.is_valid():\n            token = form.save(commit=False)\n            token.updated_at = timezone.now()\n            token.created_at = timezone.now()",
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "create_token",
        "kind": 2,
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "peekOfCode": "def create_token(request):\n    submitted = False\n    if request.method == \"POST\":\n        form = TokenForm(request.POST)\n        if form.is_valid():\n            token = form.save(commit=False)\n            token.updated_at = timezone.now()\n            token.created_at = timezone.now()\n            token.save()\n            return HttpResponseRedirect('/token/create?submitted=True')",
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "#NADOOIT__API_KEY",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "peekOfCode": "#NADOOIT__API_KEY = \"rtjs0t24oc(+1m6mvyd^^+*zm2=(n$#b9&#j9xxn6qi^=bj0eo\"\n#NADOOIT__API_KEY = os.environ.get('NADOOIT__API_KEY')\n#for local development\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\n#for production\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\ndef index_management(request):",
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "#NADOOIT__API_KEY",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "peekOfCode": "#NADOOIT__API_KEY = os.environ.get('NADOOIT__API_KEY')\n#for local development\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\n#for production\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\ndef index_management(request):\n    return render(request, 'token/index_token_management.html')",
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "config_json",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "peekOfCode": "config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config_dev.json')\n#for production\nconfig_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\ndef index_management(request):\n    return render(request, 'token/index_token_management.html')\ndef create_token(request):\n    submitted = False",
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "config_json",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "peekOfCode": "config_json = Path.home().joinpath('NADOOIT').joinpath('config').joinpath('config.json')\nwith open(config_json) as config_file:\n    config = json.load(config_file)\nNADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\ndef index_management(request):\n    return render(request, 'token/index_token_management.html')\ndef create_token(request):\n    submitted = False\n    if request.method == \"POST\":\n        form = TokenForm(request.POST)",
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "NADOOIT__API_KEY",
        "kind": 5,
        "importPath": "nadooit_api_executions_system.views.management",
        "description": "nadooit_api_executions_system.views.management",
        "peekOfCode": "NADOOIT__API_KEY = config.get('NADOOIT__API_KEY')\ndef index_management(request):\n    return render(request, 'token/index_token_management.html')\ndef create_token(request):\n    submitted = False\n    if request.method == \"POST\":\n        form = TokenForm(request.POST)\n        if form.is_valid():\n            token = form.save(commit=False)\n            token.updated_at = timezone.now()",
        "detail": "nadooit_api_executions_system.views.management",
        "documentation": {}
    },
    {
        "label": "ProgramAdmin",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.admin",
        "description": "nadooit_api_executions_system.admin",
        "peekOfCode": "class ProgramAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Program._meta.fields]\nclass CustomerAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Customer._meta.fields]\nclass TeamAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Team._meta.fields]\nclass CustomerProgramAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgram._meta.fields]\nclass DeveloperAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Developer._meta.fields]",
        "detail": "nadooit_api_executions_system.admin",
        "documentation": {}
    },
    {
        "label": "CustomerAdmin",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.admin",
        "description": "nadooit_api_executions_system.admin",
        "peekOfCode": "class CustomerAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Customer._meta.fields]\nclass TeamAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Team._meta.fields]\nclass CustomerProgramAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgram._meta.fields]\nclass DeveloperAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Developer._meta.fields]\nclass CustomerProgramExecutionAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgramExecution._meta.fields]",
        "detail": "nadooit_api_executions_system.admin",
        "documentation": {}
    },
    {
        "label": "TeamAdmin",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.admin",
        "description": "nadooit_api_executions_system.admin",
        "peekOfCode": "class TeamAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Team._meta.fields]\nclass CustomerProgramAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgram._meta.fields]\nclass DeveloperAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Developer._meta.fields]\nclass CustomerProgramExecutionAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgramExecution._meta.fields]\nclass AddressAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Address._meta.fields]",
        "detail": "nadooit_api_executions_system.admin",
        "documentation": {}
    },
    {
        "label": "CustomerProgramAdmin",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.admin",
        "description": "nadooit_api_executions_system.admin",
        "peekOfCode": "class CustomerProgramAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgram._meta.fields]\nclass DeveloperAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Developer._meta.fields]\nclass CustomerProgramExecutionAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgramExecution._meta.fields]\nclass AddressAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Address._meta.fields]\nadmin.site.register(Program, ProgramAdmin)\nadmin.site.register(Team, TeamAdmin)",
        "detail": "nadooit_api_executions_system.admin",
        "documentation": {}
    },
    {
        "label": "DeveloperAdmin",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.admin",
        "description": "nadooit_api_executions_system.admin",
        "peekOfCode": "class DeveloperAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Developer._meta.fields]\nclass CustomerProgramExecutionAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgramExecution._meta.fields]\nclass AddressAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Address._meta.fields]\nadmin.site.register(Program, ProgramAdmin)\nadmin.site.register(Team, TeamAdmin)\nadmin.site.register(Customer, CustomerAdmin)\nadmin.site.register(CustomerProgram, CustomerProgramAdmin)",
        "detail": "nadooit_api_executions_system.admin",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecutionAdmin",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.admin",
        "description": "nadooit_api_executions_system.admin",
        "peekOfCode": "class CustomerProgramExecutionAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in CustomerProgramExecution._meta.fields]\nclass AddressAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Address._meta.fields]\nadmin.site.register(Program, ProgramAdmin)\nadmin.site.register(Team, TeamAdmin)\nadmin.site.register(Customer, CustomerAdmin)\nadmin.site.register(CustomerProgram, CustomerProgramAdmin)\nadmin.site.register(Developer, DeveloperAdmin)\nadmin.site.register(CustomerProgramExecution, CustomerProgramExecutionAdmin)",
        "detail": "nadooit_api_executions_system.admin",
        "documentation": {}
    },
    {
        "label": "AddressAdmin",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.admin",
        "description": "nadooit_api_executions_system.admin",
        "peekOfCode": "class AddressAdmin(admin.ModelAdmin):\n    list_display = [field.name for field in Address._meta.fields]\nadmin.site.register(Program, ProgramAdmin)\nadmin.site.register(Team, TeamAdmin)\nadmin.site.register(Customer, CustomerAdmin)\nadmin.site.register(CustomerProgram, CustomerProgramAdmin)\nadmin.site.register(Developer, DeveloperAdmin)\nadmin.site.register(CustomerProgramExecution, CustomerProgramExecutionAdmin)\nadmin.site.register(Address, AddressAdmin)\nadmin.site.register(Token)",
        "detail": "nadooit_api_executions_system.admin",
        "documentation": {}
    },
    {
        "label": "NadooitApiExecutionsSystemConfig",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.apps",
        "description": "nadooit_api_executions_system.apps",
        "peekOfCode": "class NadooitApiExecutionsSystemConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'nadooit_api_executions_system'",
        "detail": "nadooit_api_executions_system.apps",
        "documentation": {}
    },
    {
        "label": "TokenForm",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.forms",
        "description": "nadooit_api_executions_system.forms",
        "peekOfCode": "class TokenForm(ModelForm):\n    class Meta:\n        model = Token\n        fields = ['user_code', 'token', 'is_active']\n        widgets = {\n            'user_code': forms.TextInput(attrs={'class': 'form-control', 'style': 'width: 150px;' , 'class': 'form-control'}),\n            'token': forms.TextInput(attrs={'class': 'form-control', 'style': 'width: 390px;' , 'class': 'form-control'}),\n            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),\n        }\n        labels = {",
        "detail": "nadooit_api_executions_system.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class User(AbstractUser,PermissionsMixin):\n    user_code = models.CharField(max_length=32, unique=True, editable=True, null=False, blank=False,default=get_user_code)\n    display_name = models.CharField(max_length=32, editable=True)\n    def __str__(self):\n        print(f'This is the displayname{self.display_name}')\n        if self.display_name is not \"\":\n            return self.display_name\n        else:\n            return self.username\n    #Every User can have multiple api_keys",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "ApiKey",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class ApiKey(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    #api_keys are unique and are stored in the database as a hash of the api key\n    api_key = models.CharField(max_length=255, unique=True, editable=True, null=False, blank=False,default=uuid.uuid4)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    is_active = models.BooleanField(default=True) \n    def __str__(self):\n        if self.user.display_name is not \"\":\n            return f'{self.user.display_name}  {self.user.user_code}'",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class Token(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user_code = models.CharField(max_length=255,unique=True)\n    token = models.TextField( default=uuid.uuid4)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.user_code\nclass Team(models.Model):",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class Team(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.name\nclass Address(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    street = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class Address(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    street = models.CharField(max_length=255, null=True, blank=True)\n    house_number = models.CharField(max_length=255, null=True, blank=True)\n    town = models.CharField(max_length=255, null=True, blank=True)\n    postal_code = models.CharField(max_length=255, null=True, blank=True)\n    addressed_to = models.CharField(max_length=255, null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Developer",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class Developer(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    teams = models.ManyToManyField(Team, related_name='developer_teams')\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.name\nclass Customer(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class Customer(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    addresses = models.ManyToManyField(Address, related_name='customer_addresses')\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.name\nclass Program(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "Program",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class Program(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    team_id = models.ForeignKey(Team, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.name\nclass CustomerProgram(models.Model):",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgram",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class CustomerProgram(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    program_time_saved = models.CharField(max_length=255)\n    program_balance = models.CharField(max_length=255)\n    over_charge = models.BooleanField(default=False)\n    program_id = models.ForeignKey(Program, on_delete=models.SET_NULL, null=True)\n    customer_id = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "CustomerProgramExecution",
        "kind": 6,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "class CustomerProgramExecution(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    program_time_saved = models.CharField(max_length=255)\n    customer_program_id = models.ForeignKey(CustomerProgram, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True, editable=True)\n    updated_at = models.DateTimeField(auto_now=True, editable=True)\n    def __str__(self):\n        return self.customer_program_id.program_id.name",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "get_user_code",
        "kind": 2,
        "importPath": "nadooit_api_executions_system.models",
        "description": "nadooit_api_executions_system.models",
        "peekOfCode": "def get_user_code():\n    user_code = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(6))\n    return user_code\nclass User(AbstractUser,PermissionsMixin):\n    user_code = models.CharField(max_length=32, unique=True, editable=True, null=False, blank=False,default=get_user_code)\n    display_name = models.CharField(max_length=32, editable=True)\n    def __str__(self):\n        print(f'This is the displayname{self.display_name}')\n        if self.display_name is not \"\":\n            return self.display_name",
        "detail": "nadooit_api_executions_system.models",
        "documentation": {}
    },
    {
        "label": "NadooitWebsiteConfig",
        "kind": 6,
        "importPath": "nadooit_website.apps",
        "description": "nadooit_website.apps",
        "peekOfCode": "class NadooitWebsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'nadooit_website'",
        "detail": "nadooit_website.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "nadooit_website.urls",
        "description": "nadooit_website.urls",
        "peekOfCode": "urlpatterns = [\n                  path('', views.index, name='index'),\n                  path('impressum', views.impressum, name='impressum'),\n                  path('datenschutz', views.datenschutz, name='datenschutz'),\n              ]",
        "detail": "nadooit_website.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "nadooit_website.views",
        "description": "nadooit_website.views",
        "peekOfCode": "def index(request):\n    return render(request, 'index.html', {})\ndef impressum(request):\n    return render(request, 'impressum.html', {})\ndef datenschutz(request):\n    return render(request, 'datenschutz.html', {})",
        "detail": "nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "impressum",
        "kind": 2,
        "importPath": "nadooit_website.views",
        "description": "nadooit_website.views",
        "peekOfCode": "def impressum(request):\n    return render(request, 'impressum.html', {})\ndef datenschutz(request):\n    return render(request, 'datenschutz.html', {})",
        "detail": "nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "datenschutz",
        "kind": 2,
        "importPath": "nadooit_website.views",
        "description": "nadooit_website.views",
        "peekOfCode": "def datenschutz(request):\n    return render(request, 'datenschutz.html', {})",
        "detail": "nadooit_website.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nadooit.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]